
gps.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009ad8  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005e4  08009be8  08009be8  00019be8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a1cc  0800a1cc  00020350  2**0
                  CONTENTS
  4 .ARM          00000000  0800a1cc  0800a1cc  00020350  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800a1cc  0800a1cc  00020350  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a1cc  0800a1cc  0001a1cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a1d0  0800a1d0  0001a1d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000350  20000000  0800a1d4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001274  20000350  0800a524  00020350  2**2
                  ALLOC
 10 ._user_heap_stack 00000c04  200015c4  0800a524  000215c4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020350  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012b2e  00000000  00000000  00020379  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000398f  00000000  00000000  00032ea7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000da0  00000000  00000000  00036838  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000dd0  00000000  00000000  000375d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017bf5  00000000  00000000  000383a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014738  00000000  00000000  0004ff9d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00070b65  00000000  00000000  000646d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d523a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003870  00000000  00000000  000d528c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loc    000098cd  00000000  00000000  000d8afc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000350 	.word	0x20000350
 800012c:	00000000 	.word	0x00000000
 8000130:	08009bd0 	.word	0x08009bd0

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000354 	.word	0x20000354
 800014c:	08009bd0 	.word	0x08009bd0

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_frsub>:
 8000b68:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b6c:	e002      	b.n	8000b74 <__addsf3>
 8000b6e:	bf00      	nop

08000b70 <__aeabi_fsub>:
 8000b70:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b74 <__addsf3>:
 8000b74:	0042      	lsls	r2, r0, #1
 8000b76:	bf1f      	itttt	ne
 8000b78:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b7c:	ea92 0f03 	teqne	r2, r3
 8000b80:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b84:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b88:	d06a      	beq.n	8000c60 <__addsf3+0xec>
 8000b8a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b8e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b92:	bfc1      	itttt	gt
 8000b94:	18d2      	addgt	r2, r2, r3
 8000b96:	4041      	eorgt	r1, r0
 8000b98:	4048      	eorgt	r0, r1
 8000b9a:	4041      	eorgt	r1, r0
 8000b9c:	bfb8      	it	lt
 8000b9e:	425b      	neglt	r3, r3
 8000ba0:	2b19      	cmp	r3, #25
 8000ba2:	bf88      	it	hi
 8000ba4:	4770      	bxhi	lr
 8000ba6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000baa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bae:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bba:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bbe:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bc2:	bf18      	it	ne
 8000bc4:	4249      	negne	r1, r1
 8000bc6:	ea92 0f03 	teq	r2, r3
 8000bca:	d03f      	beq.n	8000c4c <__addsf3+0xd8>
 8000bcc:	f1a2 0201 	sub.w	r2, r2, #1
 8000bd0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bd4:	eb10 000c 	adds.w	r0, r0, ip
 8000bd8:	f1c3 0320 	rsb	r3, r3, #32
 8000bdc:	fa01 f103 	lsl.w	r1, r1, r3
 8000be0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000be4:	d502      	bpl.n	8000bec <__addsf3+0x78>
 8000be6:	4249      	negs	r1, r1
 8000be8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bec:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bf0:	d313      	bcc.n	8000c1a <__addsf3+0xa6>
 8000bf2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bf6:	d306      	bcc.n	8000c06 <__addsf3+0x92>
 8000bf8:	0840      	lsrs	r0, r0, #1
 8000bfa:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bfe:	f102 0201 	add.w	r2, r2, #1
 8000c02:	2afe      	cmp	r2, #254	; 0xfe
 8000c04:	d251      	bcs.n	8000caa <__addsf3+0x136>
 8000c06:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c0a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c0e:	bf08      	it	eq
 8000c10:	f020 0001 	biceq.w	r0, r0, #1
 8000c14:	ea40 0003 	orr.w	r0, r0, r3
 8000c18:	4770      	bx	lr
 8000c1a:	0049      	lsls	r1, r1, #1
 8000c1c:	eb40 0000 	adc.w	r0, r0, r0
 8000c20:	3a01      	subs	r2, #1
 8000c22:	bf28      	it	cs
 8000c24:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c28:	d2ed      	bcs.n	8000c06 <__addsf3+0x92>
 8000c2a:	fab0 fc80 	clz	ip, r0
 8000c2e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c32:	ebb2 020c 	subs.w	r2, r2, ip
 8000c36:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c3a:	bfaa      	itet	ge
 8000c3c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c40:	4252      	neglt	r2, r2
 8000c42:	4318      	orrge	r0, r3
 8000c44:	bfbc      	itt	lt
 8000c46:	40d0      	lsrlt	r0, r2
 8000c48:	4318      	orrlt	r0, r3
 8000c4a:	4770      	bx	lr
 8000c4c:	f092 0f00 	teq	r2, #0
 8000c50:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c54:	bf06      	itte	eq
 8000c56:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c5a:	3201      	addeq	r2, #1
 8000c5c:	3b01      	subne	r3, #1
 8000c5e:	e7b5      	b.n	8000bcc <__addsf3+0x58>
 8000c60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c68:	bf18      	it	ne
 8000c6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c6e:	d021      	beq.n	8000cb4 <__addsf3+0x140>
 8000c70:	ea92 0f03 	teq	r2, r3
 8000c74:	d004      	beq.n	8000c80 <__addsf3+0x10c>
 8000c76:	f092 0f00 	teq	r2, #0
 8000c7a:	bf08      	it	eq
 8000c7c:	4608      	moveq	r0, r1
 8000c7e:	4770      	bx	lr
 8000c80:	ea90 0f01 	teq	r0, r1
 8000c84:	bf1c      	itt	ne
 8000c86:	2000      	movne	r0, #0
 8000c88:	4770      	bxne	lr
 8000c8a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c8e:	d104      	bne.n	8000c9a <__addsf3+0x126>
 8000c90:	0040      	lsls	r0, r0, #1
 8000c92:	bf28      	it	cs
 8000c94:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c98:	4770      	bx	lr
 8000c9a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c9e:	bf3c      	itt	cc
 8000ca0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bxcc	lr
 8000ca6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000caa:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000cae:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb2:	4770      	bx	lr
 8000cb4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cb8:	bf16      	itet	ne
 8000cba:	4608      	movne	r0, r1
 8000cbc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cc0:	4601      	movne	r1, r0
 8000cc2:	0242      	lsls	r2, r0, #9
 8000cc4:	bf06      	itte	eq
 8000cc6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cca:	ea90 0f01 	teqeq	r0, r1
 8000cce:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000cd2:	4770      	bx	lr

08000cd4 <__aeabi_ui2f>:
 8000cd4:	f04f 0300 	mov.w	r3, #0
 8000cd8:	e004      	b.n	8000ce4 <__aeabi_i2f+0x8>
 8000cda:	bf00      	nop

08000cdc <__aeabi_i2f>:
 8000cdc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ce0:	bf48      	it	mi
 8000ce2:	4240      	negmi	r0, r0
 8000ce4:	ea5f 0c00 	movs.w	ip, r0
 8000ce8:	bf08      	it	eq
 8000cea:	4770      	bxeq	lr
 8000cec:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cf0:	4601      	mov	r1, r0
 8000cf2:	f04f 0000 	mov.w	r0, #0
 8000cf6:	e01c      	b.n	8000d32 <__aeabi_l2f+0x2a>

08000cf8 <__aeabi_ul2f>:
 8000cf8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f04f 0300 	mov.w	r3, #0
 8000d04:	e00a      	b.n	8000d1c <__aeabi_l2f+0x14>
 8000d06:	bf00      	nop

08000d08 <__aeabi_l2f>:
 8000d08:	ea50 0201 	orrs.w	r2, r0, r1
 8000d0c:	bf08      	it	eq
 8000d0e:	4770      	bxeq	lr
 8000d10:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d14:	d502      	bpl.n	8000d1c <__aeabi_l2f+0x14>
 8000d16:	4240      	negs	r0, r0
 8000d18:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d1c:	ea5f 0c01 	movs.w	ip, r1
 8000d20:	bf02      	ittt	eq
 8000d22:	4684      	moveq	ip, r0
 8000d24:	4601      	moveq	r1, r0
 8000d26:	2000      	moveq	r0, #0
 8000d28:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d2c:	bf08      	it	eq
 8000d2e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d32:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d36:	fabc f28c 	clz	r2, ip
 8000d3a:	3a08      	subs	r2, #8
 8000d3c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d40:	db10      	blt.n	8000d64 <__aeabi_l2f+0x5c>
 8000d42:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d46:	4463      	add	r3, ip
 8000d48:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d4c:	f1c2 0220 	rsb	r2, r2, #32
 8000d50:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d54:	fa20 f202 	lsr.w	r2, r0, r2
 8000d58:	eb43 0002 	adc.w	r0, r3, r2
 8000d5c:	bf08      	it	eq
 8000d5e:	f020 0001 	biceq.w	r0, r0, #1
 8000d62:	4770      	bx	lr
 8000d64:	f102 0220 	add.w	r2, r2, #32
 8000d68:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d6c:	f1c2 0220 	rsb	r2, r2, #32
 8000d70:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d74:	fa21 f202 	lsr.w	r2, r1, r2
 8000d78:	eb43 0002 	adc.w	r0, r3, r2
 8000d7c:	bf08      	it	eq
 8000d7e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d82:	4770      	bx	lr

08000d84 <__aeabi_fmul>:
 8000d84:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d88:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d8c:	bf1e      	ittt	ne
 8000d8e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d92:	ea92 0f0c 	teqne	r2, ip
 8000d96:	ea93 0f0c 	teqne	r3, ip
 8000d9a:	d06f      	beq.n	8000e7c <__aeabi_fmul+0xf8>
 8000d9c:	441a      	add	r2, r3
 8000d9e:	ea80 0c01 	eor.w	ip, r0, r1
 8000da2:	0240      	lsls	r0, r0, #9
 8000da4:	bf18      	it	ne
 8000da6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000daa:	d01e      	beq.n	8000dea <__aeabi_fmul+0x66>
 8000dac:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000db0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000db4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000db8:	fba0 3101 	umull	r3, r1, r0, r1
 8000dbc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000dc0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000dc4:	bf3e      	ittt	cc
 8000dc6:	0049      	lslcc	r1, r1, #1
 8000dc8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dcc:	005b      	lslcc	r3, r3, #1
 8000dce:	ea40 0001 	orr.w	r0, r0, r1
 8000dd2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000dd6:	2afd      	cmp	r2, #253	; 0xfd
 8000dd8:	d81d      	bhi.n	8000e16 <__aeabi_fmul+0x92>
 8000dda:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000dde:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000de2:	bf08      	it	eq
 8000de4:	f020 0001 	biceq.w	r0, r0, #1
 8000de8:	4770      	bx	lr
 8000dea:	f090 0f00 	teq	r0, #0
 8000dee:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000df2:	bf08      	it	eq
 8000df4:	0249      	lsleq	r1, r1, #9
 8000df6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dfa:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dfe:	3a7f      	subs	r2, #127	; 0x7f
 8000e00:	bfc2      	ittt	gt
 8000e02:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e06:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e0a:	4770      	bxgt	lr
 8000e0c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e10:	f04f 0300 	mov.w	r3, #0
 8000e14:	3a01      	subs	r2, #1
 8000e16:	dc5d      	bgt.n	8000ed4 <__aeabi_fmul+0x150>
 8000e18:	f112 0f19 	cmn.w	r2, #25
 8000e1c:	bfdc      	itt	le
 8000e1e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000e22:	4770      	bxle	lr
 8000e24:	f1c2 0200 	rsb	r2, r2, #0
 8000e28:	0041      	lsls	r1, r0, #1
 8000e2a:	fa21 f102 	lsr.w	r1, r1, r2
 8000e2e:	f1c2 0220 	rsb	r2, r2, #32
 8000e32:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e36:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e3a:	f140 0000 	adc.w	r0, r0, #0
 8000e3e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e42:	bf08      	it	eq
 8000e44:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e48:	4770      	bx	lr
 8000e4a:	f092 0f00 	teq	r2, #0
 8000e4e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e52:	bf02      	ittt	eq
 8000e54:	0040      	lsleq	r0, r0, #1
 8000e56:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e5a:	3a01      	subeq	r2, #1
 8000e5c:	d0f9      	beq.n	8000e52 <__aeabi_fmul+0xce>
 8000e5e:	ea40 000c 	orr.w	r0, r0, ip
 8000e62:	f093 0f00 	teq	r3, #0
 8000e66:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e6a:	bf02      	ittt	eq
 8000e6c:	0049      	lsleq	r1, r1, #1
 8000e6e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e72:	3b01      	subeq	r3, #1
 8000e74:	d0f9      	beq.n	8000e6a <__aeabi_fmul+0xe6>
 8000e76:	ea41 010c 	orr.w	r1, r1, ip
 8000e7a:	e78f      	b.n	8000d9c <__aeabi_fmul+0x18>
 8000e7c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e80:	ea92 0f0c 	teq	r2, ip
 8000e84:	bf18      	it	ne
 8000e86:	ea93 0f0c 	teqne	r3, ip
 8000e8a:	d00a      	beq.n	8000ea2 <__aeabi_fmul+0x11e>
 8000e8c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e90:	bf18      	it	ne
 8000e92:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e96:	d1d8      	bne.n	8000e4a <__aeabi_fmul+0xc6>
 8000e98:	ea80 0001 	eor.w	r0, r0, r1
 8000e9c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ea0:	4770      	bx	lr
 8000ea2:	f090 0f00 	teq	r0, #0
 8000ea6:	bf17      	itett	ne
 8000ea8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000eac:	4608      	moveq	r0, r1
 8000eae:	f091 0f00 	teqne	r1, #0
 8000eb2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000eb6:	d014      	beq.n	8000ee2 <__aeabi_fmul+0x15e>
 8000eb8:	ea92 0f0c 	teq	r2, ip
 8000ebc:	d101      	bne.n	8000ec2 <__aeabi_fmul+0x13e>
 8000ebe:	0242      	lsls	r2, r0, #9
 8000ec0:	d10f      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ec2:	ea93 0f0c 	teq	r3, ip
 8000ec6:	d103      	bne.n	8000ed0 <__aeabi_fmul+0x14c>
 8000ec8:	024b      	lsls	r3, r1, #9
 8000eca:	bf18      	it	ne
 8000ecc:	4608      	movne	r0, r1
 8000ece:	d108      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ed0:	ea80 0001 	eor.w	r0, r0, r1
 8000ed4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ed8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000edc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ee0:	4770      	bx	lr
 8000ee2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ee6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000eea:	4770      	bx	lr

08000eec <__aeabi_fdiv>:
 8000eec:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ef0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ef4:	bf1e      	ittt	ne
 8000ef6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000efa:	ea92 0f0c 	teqne	r2, ip
 8000efe:	ea93 0f0c 	teqne	r3, ip
 8000f02:	d069      	beq.n	8000fd8 <__aeabi_fdiv+0xec>
 8000f04:	eba2 0203 	sub.w	r2, r2, r3
 8000f08:	ea80 0c01 	eor.w	ip, r0, r1
 8000f0c:	0249      	lsls	r1, r1, #9
 8000f0e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f12:	d037      	beq.n	8000f84 <__aeabi_fdiv+0x98>
 8000f14:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f18:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f1c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f20:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000f24:	428b      	cmp	r3, r1
 8000f26:	bf38      	it	cc
 8000f28:	005b      	lslcc	r3, r3, #1
 8000f2a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000f2e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f32:	428b      	cmp	r3, r1
 8000f34:	bf24      	itt	cs
 8000f36:	1a5b      	subcs	r3, r3, r1
 8000f38:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f3c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f40:	bf24      	itt	cs
 8000f42:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f46:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f4a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f4e:	bf24      	itt	cs
 8000f50:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f54:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f58:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f5c:	bf24      	itt	cs
 8000f5e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f62:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f66:	011b      	lsls	r3, r3, #4
 8000f68:	bf18      	it	ne
 8000f6a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f6e:	d1e0      	bne.n	8000f32 <__aeabi_fdiv+0x46>
 8000f70:	2afd      	cmp	r2, #253	; 0xfd
 8000f72:	f63f af50 	bhi.w	8000e16 <__aeabi_fmul+0x92>
 8000f76:	428b      	cmp	r3, r1
 8000f78:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f7c:	bf08      	it	eq
 8000f7e:	f020 0001 	biceq.w	r0, r0, #1
 8000f82:	4770      	bx	lr
 8000f84:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f88:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f8c:	327f      	adds	r2, #127	; 0x7f
 8000f8e:	bfc2      	ittt	gt
 8000f90:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f94:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f98:	4770      	bxgt	lr
 8000f9a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f9e:	f04f 0300 	mov.w	r3, #0
 8000fa2:	3a01      	subs	r2, #1
 8000fa4:	e737      	b.n	8000e16 <__aeabi_fmul+0x92>
 8000fa6:	f092 0f00 	teq	r2, #0
 8000faa:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000fae:	bf02      	ittt	eq
 8000fb0:	0040      	lsleq	r0, r0, #1
 8000fb2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000fb6:	3a01      	subeq	r2, #1
 8000fb8:	d0f9      	beq.n	8000fae <__aeabi_fdiv+0xc2>
 8000fba:	ea40 000c 	orr.w	r0, r0, ip
 8000fbe:	f093 0f00 	teq	r3, #0
 8000fc2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000fc6:	bf02      	ittt	eq
 8000fc8:	0049      	lsleq	r1, r1, #1
 8000fca:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000fce:	3b01      	subeq	r3, #1
 8000fd0:	d0f9      	beq.n	8000fc6 <__aeabi_fdiv+0xda>
 8000fd2:	ea41 010c 	orr.w	r1, r1, ip
 8000fd6:	e795      	b.n	8000f04 <__aeabi_fdiv+0x18>
 8000fd8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fdc:	ea92 0f0c 	teq	r2, ip
 8000fe0:	d108      	bne.n	8000ff4 <__aeabi_fdiv+0x108>
 8000fe2:	0242      	lsls	r2, r0, #9
 8000fe4:	f47f af7d 	bne.w	8000ee2 <__aeabi_fmul+0x15e>
 8000fe8:	ea93 0f0c 	teq	r3, ip
 8000fec:	f47f af70 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8000ff0:	4608      	mov	r0, r1
 8000ff2:	e776      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ff4:	ea93 0f0c 	teq	r3, ip
 8000ff8:	d104      	bne.n	8001004 <__aeabi_fdiv+0x118>
 8000ffa:	024b      	lsls	r3, r1, #9
 8000ffc:	f43f af4c 	beq.w	8000e98 <__aeabi_fmul+0x114>
 8001000:	4608      	mov	r0, r1
 8001002:	e76e      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001004:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8001008:	bf18      	it	ne
 800100a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800100e:	d1ca      	bne.n	8000fa6 <__aeabi_fdiv+0xba>
 8001010:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8001014:	f47f af5c 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8001018:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 800101c:	f47f af3c 	bne.w	8000e98 <__aeabi_fmul+0x114>
 8001020:	e75f      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001022:	bf00      	nop

08001024 <__aeabi_f2iz>:
 8001024:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001028:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 800102c:	d30f      	bcc.n	800104e <__aeabi_f2iz+0x2a>
 800102e:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8001032:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001036:	d90d      	bls.n	8001054 <__aeabi_f2iz+0x30>
 8001038:	ea4f 2300 	mov.w	r3, r0, lsl #8
 800103c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001040:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8001044:	fa23 f002 	lsr.w	r0, r3, r2
 8001048:	bf18      	it	ne
 800104a:	4240      	negne	r0, r0
 800104c:	4770      	bx	lr
 800104e:	f04f 0000 	mov.w	r0, #0
 8001052:	4770      	bx	lr
 8001054:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001058:	d101      	bne.n	800105e <__aeabi_f2iz+0x3a>
 800105a:	0242      	lsls	r2, r0, #9
 800105c:	d105      	bne.n	800106a <__aeabi_f2iz+0x46>
 800105e:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8001062:	bf08      	it	eq
 8001064:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8001068:	4770      	bx	lr
 800106a:	f04f 0000 	mov.w	r0, #0
 800106e:	4770      	bx	lr

08001070 <__aeabi_d2lz>:
 8001070:	b538      	push	{r3, r4, r5, lr}
 8001072:	4605      	mov	r5, r0
 8001074:	460c      	mov	r4, r1
 8001076:	2200      	movs	r2, #0
 8001078:	2300      	movs	r3, #0
 800107a:	4628      	mov	r0, r5
 800107c:	4621      	mov	r1, r4
 800107e:	f7ff fc9d 	bl	80009bc <__aeabi_dcmplt>
 8001082:	b928      	cbnz	r0, 8001090 <__aeabi_d2lz+0x20>
 8001084:	4628      	mov	r0, r5
 8001086:	4621      	mov	r1, r4
 8001088:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800108c:	f000 b80a 	b.w	80010a4 <__aeabi_d2ulz>
 8001090:	4628      	mov	r0, r5
 8001092:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 8001096:	f000 f805 	bl	80010a4 <__aeabi_d2ulz>
 800109a:	4240      	negs	r0, r0
 800109c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80010a0:	bd38      	pop	{r3, r4, r5, pc}
 80010a2:	bf00      	nop

080010a4 <__aeabi_d2ulz>:
 80010a4:	b5d0      	push	{r4, r6, r7, lr}
 80010a6:	2200      	movs	r2, #0
 80010a8:	4b0b      	ldr	r3, [pc, #44]	; (80010d8 <__aeabi_d2ulz+0x34>)
 80010aa:	4606      	mov	r6, r0
 80010ac:	460f      	mov	r7, r1
 80010ae:	f7ff fa13 	bl	80004d8 <__aeabi_dmul>
 80010b2:	f7ff fce9 	bl	8000a88 <__aeabi_d2uiz>
 80010b6:	4604      	mov	r4, r0
 80010b8:	f7ff f994 	bl	80003e4 <__aeabi_ui2d>
 80010bc:	2200      	movs	r2, #0
 80010be:	4b07      	ldr	r3, [pc, #28]	; (80010dc <__aeabi_d2ulz+0x38>)
 80010c0:	f7ff fa0a 	bl	80004d8 <__aeabi_dmul>
 80010c4:	4602      	mov	r2, r0
 80010c6:	460b      	mov	r3, r1
 80010c8:	4630      	mov	r0, r6
 80010ca:	4639      	mov	r1, r7
 80010cc:	f7ff f84c 	bl	8000168 <__aeabi_dsub>
 80010d0:	f7ff fcda 	bl	8000a88 <__aeabi_d2uiz>
 80010d4:	4621      	mov	r1, r4
 80010d6:	bdd0      	pop	{r4, r6, r7, pc}
 80010d8:	3df00000 	.word	0x3df00000
 80010dc:	41f00000 	.word	0x41f00000

080010e0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80010e0:	b530      	push	{r4, r5, lr}
 80010e2:	b087      	sub	sp, #28

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010e4:	2400      	movs	r4, #0
 80010e6:	9402      	str	r4, [sp, #8]
 80010e8:	9403      	str	r4, [sp, #12]
 80010ea:	9404      	str	r4, [sp, #16]
 80010ec:	9405      	str	r4, [sp, #20]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80010ee:	4b13      	ldr	r3, [pc, #76]	; (800113c <MX_GPIO_Init+0x5c>)
 80010f0:	699a      	ldr	r2, [r3, #24]
 80010f2:	f042 0220 	orr.w	r2, r2, #32
 80010f6:	619a      	str	r2, [r3, #24]
 80010f8:	699a      	ldr	r2, [r3, #24]
 80010fa:	f002 0220 	and.w	r2, r2, #32
 80010fe:	9200      	str	r2, [sp, #0]
 8001100:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001102:	699a      	ldr	r2, [r3, #24]
 8001104:	f042 0204 	orr.w	r2, r2, #4
 8001108:	619a      	str	r2, [r3, #24]
 800110a:	699b      	ldr	r3, [r3, #24]
 800110c:	f003 0304 	and.w	r3, r3, #4
 8001110:	9301      	str	r3, [sp, #4]
 8001112:	9b01      	ldr	r3, [sp, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPS_GPIO_Port, GPS_Pin, GPIO_PIN_RESET);
 8001114:	4d0a      	ldr	r5, [pc, #40]	; (8001140 <MX_GPIO_Init+0x60>)
 8001116:	4622      	mov	r2, r4
 8001118:	2110      	movs	r1, #16
 800111a:	4628      	mov	r0, r5
 800111c:	f000 fd04 	bl	8001b28 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = GPS_Pin;
 8001120:	2310      	movs	r3, #16
 8001122:	9302      	str	r3, [sp, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001124:	2301      	movs	r3, #1
 8001126:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001128:	9404      	str	r4, [sp, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800112a:	2302      	movs	r3, #2
 800112c:	9305      	str	r3, [sp, #20]
  HAL_GPIO_Init(GPS_GPIO_Port, &GPIO_InitStruct);
 800112e:	a902      	add	r1, sp, #8
 8001130:	4628      	mov	r0, r5
 8001132:	f000 fbe7 	bl	8001904 <HAL_GPIO_Init>

}
 8001136:	b007      	add	sp, #28
 8001138:	bd30      	pop	{r4, r5, pc}
 800113a:	bf00      	nop
 800113c:	40021000 	.word	0x40021000
 8001140:	40010800 	.word	0x40010800

08001144 <GPS_Init>:
	CDC_Transmit_FS((unsigned char *) buf, (uint16_t) strlen(buf));
}
#endif

void GPS_Init()
{
 8001144:	b508      	push	{r3, lr}
	HAL_UART_Receive_IT(GPS_USART, &rx_data, 1);
 8001146:	2201      	movs	r2, #1
 8001148:	4902      	ldr	r1, [pc, #8]	; (8001154 <GPS_Init+0x10>)
 800114a:	4803      	ldr	r0, [pc, #12]	; (8001158 <GPS_Init+0x14>)
 800114c:	f001 fde9 	bl	8002d22 <HAL_UART_Receive_IT>
}
 8001150:	bd08      	pop	{r3, pc}
 8001152:	bf00      	nop
 8001154:	20000444 	.word	0x20000444
 8001158:	2000044c 	.word	0x2000044c

0800115c <GPS_validate>:

    i=0;
    calculated_check=0;

    // check to ensure that the string starts with a $
    if(nmeastr[i] == '$')
 800115c:	7803      	ldrb	r3, [r0, #0]
 800115e:	2b24      	cmp	r3, #36	; 0x24
 8001160:	d010      	beq.n	8001184 <GPS_validate+0x28>
        i++;
    else
        return 0;
 8001162:	2000      	movs	r0, #0
 8001164:	4770      	bx	lr

    //No NULL reached, 75 char largest possible NMEA message, no '*' reached
    while((nmeastr[i] != 0) && (nmeastr[i] != '*') && (i < 75)){
        calculated_check ^= nmeastr[i];// calculate the checksum
 8001166:	404a      	eors	r2, r1
        i++;
 8001168:	3301      	adds	r3, #1
    while((nmeastr[i] != 0) && (nmeastr[i] != '*') && (i < 75)){
 800116a:	469c      	mov	ip, r3
 800116c:	5cc1      	ldrb	r1, [r0, r3]
 800116e:	b119      	cbz	r1, 8001178 <GPS_validate+0x1c>
 8001170:	292a      	cmp	r1, #42	; 0x2a
 8001172:	d001      	beq.n	8001178 <GPS_validate+0x1c>
 8001174:	2b4a      	cmp	r3, #74	; 0x4a
 8001176:	ddf6      	ble.n	8001166 <GPS_validate+0xa>
    }

    if(i >= 75){
 8001178:	2b4a      	cmp	r3, #74	; 0x4a
 800117a:	dc23      	bgt.n	80011c4 <GPS_validate+0x68>
        return 0;// the string was too long so return an error
    }

    if (nmeastr[i] == '*'){
 800117c:	292a      	cmp	r1, #42	; 0x2a
 800117e:	d004      	beq.n	800118a <GPS_validate+0x2e>
        check[0] = nmeastr[i+1];    //put hex chars in check string
        check[1] = nmeastr[i+2];
        check[2] = 0;
    }
    else
        return 0;// no checksum separator found there for invalid
 8001180:	2000      	movs	r0, #0

    sprintf(checkcalcstr,"%02X",calculated_check);
    return((checkcalcstr[0] == check[0])
        && (checkcalcstr[1] == check[1])) ? 1 : 0 ;
}
 8001182:	4770      	bx	lr
    calculated_check=0;
 8001184:	2200      	movs	r2, #0
        i++;
 8001186:	2301      	movs	r3, #1
 8001188:	e7ef      	b.n	800116a <GPS_validate+0xe>
int GPS_validate(char *nmeastr){
 800118a:	b530      	push	{r4, r5, lr}
 800118c:	b083      	sub	sp, #12
        check[0] = nmeastr[i+1];    //put hex chars in check string
 800118e:	4460      	add	r0, ip
 8001190:	7844      	ldrb	r4, [r0, #1]
 8001192:	f88d 4004 	strb.w	r4, [sp, #4]
        check[1] = nmeastr[i+2];
 8001196:	7885      	ldrb	r5, [r0, #2]
 8001198:	f88d 5005 	strb.w	r5, [sp, #5]
        check[2] = 0;
 800119c:	2300      	movs	r3, #0
 800119e:	f88d 3006 	strb.w	r3, [sp, #6]
    sprintf(checkcalcstr,"%02X",calculated_check);
 80011a2:	490a      	ldr	r1, [pc, #40]	; (80011cc <GPS_validate+0x70>)
 80011a4:	4668      	mov	r0, sp
 80011a6:	f004 fb23 	bl	80057f0 <siprintf>
    return((checkcalcstr[0] == check[0])
 80011aa:	f89d 3000 	ldrb.w	r3, [sp]
        && (checkcalcstr[1] == check[1])) ? 1 : 0 ;
 80011ae:	429c      	cmp	r4, r3
 80011b0:	d002      	beq.n	80011b8 <GPS_validate+0x5c>
 80011b2:	2000      	movs	r0, #0
}
 80011b4:	b003      	add	sp, #12
 80011b6:	bd30      	pop	{r4, r5, pc}
        && (checkcalcstr[1] == check[1])) ? 1 : 0 ;
 80011b8:	f89d 3001 	ldrb.w	r3, [sp, #1]
 80011bc:	429d      	cmp	r5, r3
 80011be:	d003      	beq.n	80011c8 <GPS_validate+0x6c>
 80011c0:	2000      	movs	r0, #0
 80011c2:	e7f7      	b.n	80011b4 <GPS_validate+0x58>
        return 0;// the string was too long so return an error
 80011c4:	2000      	movs	r0, #0
 80011c6:	4770      	bx	lr
        && (checkcalcstr[1] == check[1])) ? 1 : 0 ;
 80011c8:	2001      	movs	r0, #1
 80011ca:	e7f3      	b.n	80011b4 <GPS_validate+0x58>
 80011cc:	08009bf4 	.word	0x08009bf4

080011d0 <GPS_nmea_to_dec>:
        if(sscanf(GPSstrParse, "$GPVTG,%f,%c,%f,%c,%f,%c,%f,%c", &GPS.course_t, &GPS.course_t_unit, &GPS.course_m, &GPS.course_m_unit, &GPS.speed_k, &GPS.speed_k_unit, &GPS.speed_km, &GPS.speed_km_unit) >= 1)
            return;
    }
}

float GPS_nmea_to_dec(float deg_coord, char nsew) {
 80011d0:	b570      	push	{r4, r5, r6, lr}
 80011d2:	4606      	mov	r6, r0
 80011d4:	460d      	mov	r5, r1
    int degree = (int)(deg_coord/100);
 80011d6:	4910      	ldr	r1, [pc, #64]	; (8001218 <GPS_nmea_to_dec+0x48>)
 80011d8:	f7ff fe88 	bl	8000eec <__aeabi_fdiv>
 80011dc:	f7ff ff22 	bl	8001024 <__aeabi_f2iz>
 80011e0:	4604      	mov	r4, r0
    float minutes = deg_coord - degree*100;
 80011e2:	2064      	movs	r0, #100	; 0x64
 80011e4:	fb04 f000 	mul.w	r0, r4, r0
 80011e8:	f7ff fd78 	bl	8000cdc <__aeabi_i2f>
 80011ec:	4601      	mov	r1, r0
 80011ee:	4630      	mov	r0, r6
 80011f0:	f7ff fcbe 	bl	8000b70 <__aeabi_fsub>
    float dec_deg = minutes / 60;
 80011f4:	4909      	ldr	r1, [pc, #36]	; (800121c <GPS_nmea_to_dec+0x4c>)
 80011f6:	f7ff fe79 	bl	8000eec <__aeabi_fdiv>
 80011fa:	4606      	mov	r6, r0
    float decimal = degree + dec_deg;
 80011fc:	4620      	mov	r0, r4
 80011fe:	f7ff fd6d 	bl	8000cdc <__aeabi_i2f>
 8001202:	4631      	mov	r1, r6
 8001204:	f7ff fcb6 	bl	8000b74 <__addsf3>
    if (nsew == 'S' || nsew == 'W') { // return negative
 8001208:	2d53      	cmp	r5, #83	; 0x53
 800120a:	d001      	beq.n	8001210 <GPS_nmea_to_dec+0x40>
 800120c:	2d57      	cmp	r5, #87	; 0x57
 800120e:	d101      	bne.n	8001214 <GPS_nmea_to_dec+0x44>
        decimal *= -1;
 8001210:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
    }
    return decimal;
}
 8001214:	bd70      	pop	{r4, r5, r6, pc}
 8001216:	bf00      	nop
 8001218:	42c80000 	.word	0x42c80000
 800121c:	42700000 	.word	0x42700000

08001220 <GPS_parse>:
void GPS_parse(char *GPSstrParse){
 8001220:	b510      	push	{r4, lr}
 8001222:	b088      	sub	sp, #32
 8001224:	4604      	mov	r4, r0
    if(!strncmp(GPSstrParse, "$GPGGA", 6)){
 8001226:	2206      	movs	r2, #6
 8001228:	4949      	ldr	r1, [pc, #292]	; (8001350 <GPS_parse+0x130>)
 800122a:	f004 fb70 	bl	800590e <strncmp>
 800122e:	2800      	cmp	r0, #0
 8001230:	d02f      	beq.n	8001292 <GPS_parse+0x72>
    else if (!strncmp(GPSstrParse, "$GPRMC", 6)){
 8001232:	2206      	movs	r2, #6
 8001234:	4947      	ldr	r1, [pc, #284]	; (8001354 <GPS_parse+0x134>)
 8001236:	4620      	mov	r0, r4
 8001238:	f004 fb69 	bl	800590e <strncmp>
 800123c:	2800      	cmp	r0, #0
 800123e:	d056      	beq.n	80012ee <GPS_parse+0xce>
    else if (!strncmp(GPSstrParse, "$GPGLL", 6)){
 8001240:	2206      	movs	r2, #6
 8001242:	4945      	ldr	r1, [pc, #276]	; (8001358 <GPS_parse+0x138>)
 8001244:	4620      	mov	r0, r4
 8001246:	f004 fb62 	bl	800590e <strncmp>
 800124a:	2800      	cmp	r0, #0
 800124c:	d06b      	beq.n	8001326 <GPS_parse+0x106>
    else if (!strncmp(GPSstrParse, "$GPVTG", 6)){
 800124e:	2206      	movs	r2, #6
 8001250:	4942      	ldr	r1, [pc, #264]	; (800135c <GPS_parse+0x13c>)
 8001252:	4620      	mov	r0, r4
 8001254:	f004 fb5b 	bl	800590e <strncmp>
 8001258:	2800      	cmp	r0, #0
 800125a:	d162      	bne.n	8001322 <GPS_parse+0x102>
        if(sscanf(GPSstrParse, "$GPVTG,%f,%c,%f,%c,%f,%c,%f,%c", &GPS.course_t, &GPS.course_t_unit, &GPS.course_m, &GPS.course_m_unit, &GPS.speed_k, &GPS.speed_k_unit, &GPS.speed_km, &GPS.speed_km_unit) >= 1)
 800125c:	4a40      	ldr	r2, [pc, #256]	; (8001360 <GPS_parse+0x140>)
 800125e:	f102 0354 	add.w	r3, r2, #84	; 0x54
 8001262:	9305      	str	r3, [sp, #20]
 8001264:	f102 0350 	add.w	r3, r2, #80	; 0x50
 8001268:	9304      	str	r3, [sp, #16]
 800126a:	f102 034d 	add.w	r3, r2, #77	; 0x4d
 800126e:	9303      	str	r3, [sp, #12]
 8001270:	f102 0330 	add.w	r3, r2, #48	; 0x30
 8001274:	9302      	str	r3, [sp, #8]
 8001276:	f102 034c 	add.w	r3, r2, #76	; 0x4c
 800127a:	9301      	str	r3, [sp, #4]
 800127c:	f102 0348 	add.w	r3, r2, #72	; 0x48
 8001280:	9300      	str	r3, [sp, #0]
 8001282:	f102 0344 	add.w	r3, r2, #68	; 0x44
 8001286:	3240      	adds	r2, #64	; 0x40
 8001288:	4936      	ldr	r1, [pc, #216]	; (8001364 <GPS_parse+0x144>)
 800128a:	4620      	mov	r0, r4
 800128c:	f004 fad0 	bl	8005830 <siscanf>
 8001290:	e047      	b.n	8001322 <GPS_parse+0x102>
    	if (sscanf(GPSstrParse, "$GPGGA,%f,%f,%c,%f,%c,%d,%d,%f,%f,%c", &GPS.utc_time, &GPS.nmea_latitude, &GPS.ns, &GPS.nmea_longitude, &GPS.ew, &GPS.lock, &GPS.satelites, &GPS.hdop, &GPS.msl_altitude, &GPS.msl_units) >= 1){
 8001292:	4a33      	ldr	r2, [pc, #204]	; (8001360 <GPS_parse+0x140>)
 8001294:	f102 032c 	add.w	r3, r2, #44	; 0x2c
 8001298:	9307      	str	r3, [sp, #28]
 800129a:	f102 0328 	add.w	r3, r2, #40	; 0x28
 800129e:	9306      	str	r3, [sp, #24]
 80012a0:	f102 0324 	add.w	r3, r2, #36	; 0x24
 80012a4:	9305      	str	r3, [sp, #20]
 80012a6:	f102 0320 	add.w	r3, r2, #32
 80012aa:	9304      	str	r3, [sp, #16]
 80012ac:	f102 031c 	add.w	r3, r2, #28
 80012b0:	9303      	str	r3, [sp, #12]
 80012b2:	f102 0319 	add.w	r3, r2, #25
 80012b6:	9302      	str	r3, [sp, #8]
 80012b8:	f102 030c 	add.w	r3, r2, #12
 80012bc:	9301      	str	r3, [sp, #4]
 80012be:	f102 0318 	add.w	r3, r2, #24
 80012c2:	9300      	str	r3, [sp, #0]
 80012c4:	f102 0310 	add.w	r3, r2, #16
 80012c8:	3214      	adds	r2, #20
 80012ca:	4927      	ldr	r1, [pc, #156]	; (8001368 <GPS_parse+0x148>)
 80012cc:	4620      	mov	r0, r4
 80012ce:	f004 faaf 	bl	8005830 <siscanf>
 80012d2:	2800      	cmp	r0, #0
 80012d4:	dd25      	ble.n	8001322 <GPS_parse+0x102>
    		GPS.dec_latitude = GPS_nmea_to_dec(GPS.nmea_latitude, GPS.ns);
 80012d6:	4c22      	ldr	r4, [pc, #136]	; (8001360 <GPS_parse+0x140>)
 80012d8:	7e21      	ldrb	r1, [r4, #24]
 80012da:	6920      	ldr	r0, [r4, #16]
 80012dc:	f7ff ff78 	bl	80011d0 <GPS_nmea_to_dec>
 80012e0:	6060      	str	r0, [r4, #4]
    		GPS.dec_longitude = GPS_nmea_to_dec(GPS.nmea_longitude, GPS.ew);
 80012e2:	7e61      	ldrb	r1, [r4, #25]
 80012e4:	68e0      	ldr	r0, [r4, #12]
 80012e6:	f7ff ff73 	bl	80011d0 <GPS_nmea_to_dec>
 80012ea:	6020      	str	r0, [r4, #0]
    		return;
 80012ec:	e019      	b.n	8001322 <GPS_parse+0x102>
    	if(sscanf(GPSstrParse, "$GPRMC,%f,%f,%c,%f,%c,%f,%f,%d", &GPS.utc_time, &GPS.nmea_latitude, &GPS.ns, &GPS.nmea_longitude, &GPS.ew, &GPS.speed_k, &GPS.course_d, &GPS.date) >= 1)
 80012ee:	4a1c      	ldr	r2, [pc, #112]	; (8001360 <GPS_parse+0x140>)
 80012f0:	f102 0338 	add.w	r3, r2, #56	; 0x38
 80012f4:	9305      	str	r3, [sp, #20]
 80012f6:	f102 0334 	add.w	r3, r2, #52	; 0x34
 80012fa:	9304      	str	r3, [sp, #16]
 80012fc:	f102 0330 	add.w	r3, r2, #48	; 0x30
 8001300:	9303      	str	r3, [sp, #12]
 8001302:	f102 0319 	add.w	r3, r2, #25
 8001306:	9302      	str	r3, [sp, #8]
 8001308:	f102 030c 	add.w	r3, r2, #12
 800130c:	9301      	str	r3, [sp, #4]
 800130e:	f102 0318 	add.w	r3, r2, #24
 8001312:	9300      	str	r3, [sp, #0]
 8001314:	f102 0310 	add.w	r3, r2, #16
 8001318:	3214      	adds	r2, #20
 800131a:	4914      	ldr	r1, [pc, #80]	; (800136c <GPS_parse+0x14c>)
 800131c:	4620      	mov	r0, r4
 800131e:	f004 fa87 	bl	8005830 <siscanf>
}
 8001322:	b008      	add	sp, #32
 8001324:	bd10      	pop	{r4, pc}
        if(sscanf(GPSstrParse, "$GPGLL,%f,%c,%f,%c,%f,%c", &GPS.nmea_latitude, &GPS.ns, &GPS.nmea_longitude, &GPS.ew, &GPS.utc_time, &GPS.gll_status) >= 1)
 8001326:	4a0e      	ldr	r2, [pc, #56]	; (8001360 <GPS_parse+0x140>)
 8001328:	f102 033c 	add.w	r3, r2, #60	; 0x3c
 800132c:	9303      	str	r3, [sp, #12]
 800132e:	f102 0314 	add.w	r3, r2, #20
 8001332:	9302      	str	r3, [sp, #8]
 8001334:	f102 0319 	add.w	r3, r2, #25
 8001338:	9301      	str	r3, [sp, #4]
 800133a:	f102 030c 	add.w	r3, r2, #12
 800133e:	9300      	str	r3, [sp, #0]
 8001340:	f102 0318 	add.w	r3, r2, #24
 8001344:	3210      	adds	r2, #16
 8001346:	490a      	ldr	r1, [pc, #40]	; (8001370 <GPS_parse+0x150>)
 8001348:	4620      	mov	r0, r4
 800134a:	f004 fa71 	bl	8005830 <siscanf>
 800134e:	e7e8      	b.n	8001322 <GPS_parse+0x102>
 8001350:	08009bfc 	.word	0x08009bfc
 8001354:	08009c2c 	.word	0x08009c2c
 8001358:	08009c54 	.word	0x08009c54
 800135c:	08009c78 	.word	0x08009c78
 8001360:	2000036c 	.word	0x2000036c
 8001364:	08009c80 	.word	0x08009c80
 8001368:	08009c04 	.word	0x08009c04
 800136c:	08009c34 	.word	0x08009c34
 8001370:	08009c5c 	.word	0x08009c5c

08001374 <GPS_UART_CallBack>:
void GPS_UART_CallBack(){
 8001374:	b508      	push	{r3, lr}
	if (rx_data != '\n' && rx_index < sizeof(rx_buffer)) {
 8001376:	4b12      	ldr	r3, [pc, #72]	; (80013c0 <GPS_UART_CallBack+0x4c>)
 8001378:	781b      	ldrb	r3, [r3, #0]
 800137a:	2b0a      	cmp	r3, #10
 800137c:	d00b      	beq.n	8001396 <GPS_UART_CallBack+0x22>
 800137e:	4a11      	ldr	r2, [pc, #68]	; (80013c4 <GPS_UART_CallBack+0x50>)
 8001380:	7811      	ldrb	r1, [r2, #0]
 8001382:	f992 2000 	ldrsb.w	r2, [r2]
 8001386:	2a00      	cmp	r2, #0
 8001388:	db05      	blt.n	8001396 <GPS_UART_CallBack+0x22>
		rx_buffer[rx_index++] = rx_data;
 800138a:	1c48      	adds	r0, r1, #1
 800138c:	4a0d      	ldr	r2, [pc, #52]	; (80013c4 <GPS_UART_CallBack+0x50>)
 800138e:	7010      	strb	r0, [r2, #0]
 8001390:	4a0d      	ldr	r2, [pc, #52]	; (80013c8 <GPS_UART_CallBack+0x54>)
 8001392:	5453      	strb	r3, [r2, r1]
 8001394:	e00a      	b.n	80013ac <GPS_UART_CallBack+0x38>
		if(GPS_validate((char*) rx_buffer))
 8001396:	480c      	ldr	r0, [pc, #48]	; (80013c8 <GPS_UART_CallBack+0x54>)
 8001398:	f7ff fee0 	bl	800115c <GPS_validate>
 800139c:	b960      	cbnz	r0, 80013b8 <GPS_UART_CallBack+0x44>
		rx_index = 0;
 800139e:	2100      	movs	r1, #0
 80013a0:	4b08      	ldr	r3, [pc, #32]	; (80013c4 <GPS_UART_CallBack+0x50>)
 80013a2:	7019      	strb	r1, [r3, #0]
		memset(rx_buffer, 0, sizeof(rx_buffer));
 80013a4:	2280      	movs	r2, #128	; 0x80
 80013a6:	4808      	ldr	r0, [pc, #32]	; (80013c8 <GPS_UART_CallBack+0x54>)
 80013a8:	f003 fba8 	bl	8004afc <memset>
	HAL_UART_Receive_IT(GPS_USART, &rx_data, 1);
 80013ac:	2201      	movs	r2, #1
 80013ae:	4904      	ldr	r1, [pc, #16]	; (80013c0 <GPS_UART_CallBack+0x4c>)
 80013b0:	4806      	ldr	r0, [pc, #24]	; (80013cc <GPS_UART_CallBack+0x58>)
 80013b2:	f001 fcb6 	bl	8002d22 <HAL_UART_Receive_IT>
}
 80013b6:	bd08      	pop	{r3, pc}
			GPS_parse((char*) rx_buffer);
 80013b8:	4803      	ldr	r0, [pc, #12]	; (80013c8 <GPS_UART_CallBack+0x54>)
 80013ba:	f7ff ff31 	bl	8001220 <GPS_parse>
 80013be:	e7ee      	b.n	800139e <GPS_UART_CallBack+0x2a>
 80013c0:	20000444 	.word	0x20000444
 80013c4:	20000445 	.word	0x20000445
 80013c8:	200003c4 	.word	0x200003c4
 80013cc:	2000044c 	.word	0x2000044c

080013d0 <HAL_UART_RxCpltCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80013d0:	b508      	push	{r3, lr}
	if(huart == &huart2) GPS_UART_CallBack();
 80013d2:	4b03      	ldr	r3, [pc, #12]	; (80013e0 <HAL_UART_RxCpltCallback+0x10>)
 80013d4:	4283      	cmp	r3, r0
 80013d6:	d000      	beq.n	80013da <HAL_UART_RxCpltCallback+0xa>
}
 80013d8:	bd08      	pop	{r3, pc}
	if(huart == &huart2) GPS_UART_CallBack();
 80013da:	f7ff ffcb 	bl	8001374 <GPS_UART_CallBack>
}
 80013de:	e7fb      	b.n	80013d8 <HAL_UART_RxCpltCallback+0x8>
 80013e0:	2000044c 	.word	0x2000044c

080013e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80013e4:	b530      	push	{r4, r5, lr}
 80013e6:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013e8:	2228      	movs	r2, #40	; 0x28
 80013ea:	2100      	movs	r1, #0
 80013ec:	eb0d 0002 	add.w	r0, sp, r2
 80013f0:	f003 fb84 	bl	8004afc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013f4:	2400      	movs	r4, #0
 80013f6:	9405      	str	r4, [sp, #20]
 80013f8:	9406      	str	r4, [sp, #24]
 80013fa:	9407      	str	r4, [sp, #28]
 80013fc:	9408      	str	r4, [sp, #32]
 80013fe:	9409      	str	r4, [sp, #36]	; 0x24
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001400:	9401      	str	r4, [sp, #4]
 8001402:	9402      	str	r4, [sp, #8]
 8001404:	9403      	str	r4, [sp, #12]
 8001406:	9404      	str	r4, [sp, #16]

  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001408:	2201      	movs	r2, #1
 800140a:	920a      	str	r2, [sp, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800140c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001410:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001412:	920e      	str	r2, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001414:	2502      	movs	r5, #2
 8001416:	9511      	str	r5, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001418:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800141a:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800141e:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001420:	a80a      	add	r0, sp, #40	; 0x28
 8001422:	f000 ffff 	bl	8002424 <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001426:	230f      	movs	r3, #15
 8001428:	9305      	str	r3, [sp, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800142a:	9506      	str	r5, [sp, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800142c:	9407      	str	r4, [sp, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800142e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001432:	9308      	str	r3, [sp, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001434:	9409      	str	r4, [sp, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001436:	4629      	mov	r1, r5
 8001438:	a805      	add	r0, sp, #20
 800143a:	f001 fa33 	bl	80028a4 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800143e:	2310      	movs	r3, #16
 8001440:	9301      	str	r3, [sp, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8001442:	9404      	str	r4, [sp, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001444:	a801      	add	r0, sp, #4
 8001446:	f001 fb09 	bl	8002a5c <HAL_RCCEx_PeriphCLKConfig>
  {
    Error_Handler();
  }
}
 800144a:	b015      	add	sp, #84	; 0x54
 800144c:	bd30      	pop	{r4, r5, pc}
	...

08001450 <main>:
{
 8001450:	b508      	push	{r3, lr}
  HAL_Init();
 8001452:	f000 f97b 	bl	800174c <HAL_Init>
  SystemClock_Config();
 8001456:	f7ff ffc5 	bl	80013e4 <SystemClock_Config>
  MX_GPIO_Init();
 800145a:	f7ff fe41 	bl	80010e0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800145e:	f000 f8cb 	bl	80015f8 <MX_USART2_UART_Init>
  MX_USB_DEVICE_Init();
 8001462:	f003 f91f 	bl	80046a4 <MX_USB_DEVICE_Init>
  HAL_GPIO_WritePin(GPS_GPIO_Port, GPS_Pin, GPIO_PIN_SET);
 8001466:	2201      	movs	r2, #1
 8001468:	2110      	movs	r1, #16
 800146a:	4803      	ldr	r0, [pc, #12]	; (8001478 <main+0x28>)
 800146c:	f000 fb5c 	bl	8001b28 <HAL_GPIO_WritePin>
  GPS_Init();
 8001470:	f7ff fe68 	bl	8001144 <GPS_Init>
  while (1)
 8001474:	e7fe      	b.n	8001474 <main+0x24>
 8001476:	bf00      	nop
 8001478:	40010800 	.word	0x40010800

0800147c <Error_Handler>:
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800147c:	4770      	bx	lr
	...

08001480 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001480:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001482:	4b0e      	ldr	r3, [pc, #56]	; (80014bc <HAL_MspInit+0x3c>)
 8001484:	699a      	ldr	r2, [r3, #24]
 8001486:	f042 0201 	orr.w	r2, r2, #1
 800148a:	619a      	str	r2, [r3, #24]
 800148c:	699a      	ldr	r2, [r3, #24]
 800148e:	f002 0201 	and.w	r2, r2, #1
 8001492:	9200      	str	r2, [sp, #0]
 8001494:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001496:	69da      	ldr	r2, [r3, #28]
 8001498:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800149c:	61da      	str	r2, [r3, #28]
 800149e:	69db      	ldr	r3, [r3, #28]
 80014a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014a4:	9301      	str	r3, [sp, #4]
 80014a6:	9b01      	ldr	r3, [sp, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80014a8:	4a05      	ldr	r2, [pc, #20]	; (80014c0 <HAL_MspInit+0x40>)
 80014aa:	6853      	ldr	r3, [r2, #4]
 80014ac:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80014b0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80014b4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014b6:	b002      	add	sp, #8
 80014b8:	4770      	bx	lr
 80014ba:	bf00      	nop
 80014bc:	40021000 	.word	0x40021000
 80014c0:	40010000 	.word	0x40010000

080014c4 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80014c4:	4770      	bx	lr

080014c6 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014c6:	e7fe      	b.n	80014c6 <HardFault_Handler>

080014c8 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014c8:	e7fe      	b.n	80014c8 <MemManage_Handler>

080014ca <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014ca:	e7fe      	b.n	80014ca <BusFault_Handler>

080014cc <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014cc:	e7fe      	b.n	80014cc <UsageFault_Handler>

080014ce <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80014ce:	4770      	bx	lr

080014d0 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014d0:	4770      	bx	lr

080014d2 <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80014d2:	4770      	bx	lr

080014d4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80014d4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80014d6:	f000 f94b 	bl	8001770 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80014da:	bd08      	pop	{r3, pc}

080014dc <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 80014dc:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80014de:	4802      	ldr	r0, [pc, #8]	; (80014e8 <USB_LP_CAN1_RX0_IRQHandler+0xc>)
 80014e0:	f000 fe49 	bl	8002176 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 80014e4:	bd08      	pop	{r3, pc}
 80014e6:	bf00      	nop
 80014e8:	20001128 	.word	0x20001128

080014ec <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80014ec:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80014ee:	4802      	ldr	r0, [pc, #8]	; (80014f8 <USART2_IRQHandler+0xc>)
 80014f0:	f001 fca6 	bl	8002e40 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80014f4:	bd08      	pop	{r3, pc}
 80014f6:	bf00      	nop
 80014f8:	2000044c 	.word	0x2000044c

080014fc <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 80014fc:	2001      	movs	r0, #1
 80014fe:	4770      	bx	lr

08001500 <_kill>:

int _kill(int pid, int sig)
{
 8001500:	b508      	push	{r3, lr}
	errno = EINVAL;
 8001502:	f003 fad1 	bl	8004aa8 <__errno>
 8001506:	2316      	movs	r3, #22
 8001508:	6003      	str	r3, [r0, #0]
	return -1;
}
 800150a:	f04f 30ff 	mov.w	r0, #4294967295
 800150e:	bd08      	pop	{r3, pc}

08001510 <_exit>:

void _exit (int status)
{
 8001510:	b508      	push	{r3, lr}
	_kill(status, -1);
 8001512:	f04f 31ff 	mov.w	r1, #4294967295
 8001516:	f7ff fff3 	bl	8001500 <_kill>
	while (1) {}		/* Make sure we hang here */
 800151a:	e7fe      	b.n	800151a <_exit+0xa>

0800151c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800151c:	b570      	push	{r4, r5, r6, lr}
 800151e:	460c      	mov	r4, r1
 8001520:	4616      	mov	r6, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001522:	2500      	movs	r5, #0
 8001524:	e006      	b.n	8001534 <_read+0x18>
	{
		*ptr++ = __io_getchar();
 8001526:	f3af 8000 	nop.w
 800152a:	4621      	mov	r1, r4
 800152c:	f801 0b01 	strb.w	r0, [r1], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001530:	3501      	adds	r5, #1
		*ptr++ = __io_getchar();
 8001532:	460c      	mov	r4, r1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001534:	42b5      	cmp	r5, r6
 8001536:	dbf6      	blt.n	8001526 <_read+0xa>
	}

return len;
}
 8001538:	4630      	mov	r0, r6
 800153a:	bd70      	pop	{r4, r5, r6, pc}

0800153c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800153c:	b570      	push	{r4, r5, r6, lr}
 800153e:	460c      	mov	r4, r1
 8001540:	4616      	mov	r6, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001542:	2500      	movs	r5, #0
 8001544:	e004      	b.n	8001550 <_write+0x14>
	{
		__io_putchar(*ptr++);
 8001546:	f814 0b01 	ldrb.w	r0, [r4], #1
 800154a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800154e:	3501      	adds	r5, #1
 8001550:	42b5      	cmp	r5, r6
 8001552:	dbf8      	blt.n	8001546 <_write+0xa>
	}
	return len;
}
 8001554:	4630      	mov	r0, r6
 8001556:	bd70      	pop	{r4, r5, r6, pc}

08001558 <_close>:

int _close(int file)
{
	return -1;
}
 8001558:	f04f 30ff 	mov.w	r0, #4294967295
 800155c:	4770      	bx	lr

0800155e <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 800155e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001562:	604b      	str	r3, [r1, #4]
	return 0;
}
 8001564:	2000      	movs	r0, #0
 8001566:	4770      	bx	lr

08001568 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 8001568:	2001      	movs	r0, #1
 800156a:	4770      	bx	lr

0800156c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 800156c:	2000      	movs	r0, #0
 800156e:	4770      	bx	lr

08001570 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8001570:	b508      	push	{r3, lr}
 8001572:	4603      	mov	r3, r0
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001574:	4a0b      	ldr	r2, [pc, #44]	; (80015a4 <_sbrk+0x34>)
 8001576:	6812      	ldr	r2, [r2, #0]
 8001578:	b142      	cbz	r2, 800158c <_sbrk+0x1c>
		heap_end = &end;

	prev_heap_end = heap_end;
 800157a:	4a0a      	ldr	r2, [pc, #40]	; (80015a4 <_sbrk+0x34>)
 800157c:	6810      	ldr	r0, [r2, #0]
	if (heap_end + incr > stack_ptr)
 800157e:	4403      	add	r3, r0
 8001580:	466a      	mov	r2, sp
 8001582:	4293      	cmp	r3, r2
 8001584:	d806      	bhi.n	8001594 <_sbrk+0x24>
	{
		errno = ENOMEM;
		return (caddr_t) -1;
	}

	heap_end += incr;
 8001586:	4a07      	ldr	r2, [pc, #28]	; (80015a4 <_sbrk+0x34>)
 8001588:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
}
 800158a:	bd08      	pop	{r3, pc}
		heap_end = &end;
 800158c:	4a05      	ldr	r2, [pc, #20]	; (80015a4 <_sbrk+0x34>)
 800158e:	4906      	ldr	r1, [pc, #24]	; (80015a8 <_sbrk+0x38>)
 8001590:	6011      	str	r1, [r2, #0]
 8001592:	e7f2      	b.n	800157a <_sbrk+0xa>
		errno = ENOMEM;
 8001594:	f003 fa88 	bl	8004aa8 <__errno>
 8001598:	230c      	movs	r3, #12
 800159a:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 800159c:	f04f 30ff 	mov.w	r0, #4294967295
 80015a0:	e7f3      	b.n	800158a <_sbrk+0x1a>
 80015a2:	bf00      	nop
 80015a4:	20000448 	.word	0x20000448
 80015a8:	200015c8 	.word	0x200015c8

080015ac <SystemInit>:
  */
void SystemInit (void)
{
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 80015ac:	4b0f      	ldr	r3, [pc, #60]	; (80015ec <SystemInit+0x40>)
 80015ae:	681a      	ldr	r2, [r3, #0]
 80015b0:	f042 0201 	orr.w	r2, r2, #1
 80015b4:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 80015b6:	6859      	ldr	r1, [r3, #4]
 80015b8:	4a0d      	ldr	r2, [pc, #52]	; (80015f0 <SystemInit+0x44>)
 80015ba:	400a      	ands	r2, r1
 80015bc:	605a      	str	r2, [r3, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 80015be:	681a      	ldr	r2, [r3, #0]
 80015c0:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 80015c4:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80015c8:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80015ca:	681a      	ldr	r2, [r3, #0]
 80015cc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80015d0:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 80015d2:	685a      	ldr	r2, [r3, #4]
 80015d4:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 80015d8:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 80015da:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 80015de:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80015e0:	4b04      	ldr	r3, [pc, #16]	; (80015f4 <SystemInit+0x48>)
 80015e2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80015e6:	609a      	str	r2, [r3, #8]
#endif 
}
 80015e8:	4770      	bx	lr
 80015ea:	bf00      	nop
 80015ec:	40021000 	.word	0x40021000
 80015f0:	f8ff0000 	.word	0xf8ff0000
 80015f4:	e000ed00 	.word	0xe000ed00

080015f8 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80015f8:	b508      	push	{r3, lr}

  huart2.Instance = USART2;
 80015fa:	480a      	ldr	r0, [pc, #40]	; (8001624 <MX_USART2_UART_Init+0x2c>)
 80015fc:	4b0a      	ldr	r3, [pc, #40]	; (8001628 <MX_USART2_UART_Init+0x30>)
 80015fe:	6003      	str	r3, [r0, #0]
  huart2.Init.BaudRate = 9600;
 8001600:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 8001604:	6043      	str	r3, [r0, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001606:	2300      	movs	r3, #0
 8001608:	6083      	str	r3, [r0, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800160a:	60c3      	str	r3, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800160c:	6103      	str	r3, [r0, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800160e:	220c      	movs	r2, #12
 8001610:	6142      	str	r2, [r0, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001612:	6183      	str	r3, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001614:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001616:	f001 fb55 	bl	8002cc4 <HAL_UART_Init>
 800161a:	b900      	cbnz	r0, 800161e <MX_USART2_UART_Init+0x26>
  {
    Error_Handler();
  }

}
 800161c:	bd08      	pop	{r3, pc}
    Error_Handler();
 800161e:	f7ff ff2d 	bl	800147c <Error_Handler>
}
 8001622:	e7fb      	b.n	800161c <MX_USART2_UART_Init+0x24>
 8001624:	2000044c 	.word	0x2000044c
 8001628:	40004400 	.word	0x40004400

0800162c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800162c:	b530      	push	{r4, r5, lr}
 800162e:	b087      	sub	sp, #28

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001630:	2300      	movs	r3, #0
 8001632:	9302      	str	r3, [sp, #8]
 8001634:	9303      	str	r3, [sp, #12]
 8001636:	9304      	str	r3, [sp, #16]
 8001638:	9305      	str	r3, [sp, #20]
  if(uartHandle->Instance==USART2)
 800163a:	6802      	ldr	r2, [r0, #0]
 800163c:	4b1b      	ldr	r3, [pc, #108]	; (80016ac <HAL_UART_MspInit+0x80>)
 800163e:	429a      	cmp	r2, r3
 8001640:	d001      	beq.n	8001646 <HAL_UART_MspInit+0x1a>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001642:	b007      	add	sp, #28
 8001644:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_USART2_CLK_ENABLE();
 8001646:	f503 33e6 	add.w	r3, r3, #117760	; 0x1cc00
 800164a:	69da      	ldr	r2, [r3, #28]
 800164c:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8001650:	61da      	str	r2, [r3, #28]
 8001652:	69da      	ldr	r2, [r3, #28]
 8001654:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8001658:	9200      	str	r2, [sp, #0]
 800165a:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800165c:	699a      	ldr	r2, [r3, #24]
 800165e:	f042 0204 	orr.w	r2, r2, #4
 8001662:	619a      	str	r2, [r3, #24]
 8001664:	699b      	ldr	r3, [r3, #24]
 8001666:	f003 0304 	and.w	r3, r3, #4
 800166a:	9301      	str	r3, [sp, #4]
 800166c:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800166e:	2304      	movs	r3, #4
 8001670:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001672:	2302      	movs	r3, #2
 8001674:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001676:	2303      	movs	r3, #3
 8001678:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800167a:	4d0d      	ldr	r5, [pc, #52]	; (80016b0 <HAL_UART_MspInit+0x84>)
 800167c:	a902      	add	r1, sp, #8
 800167e:	4628      	mov	r0, r5
 8001680:	f000 f940 	bl	8001904 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001684:	2308      	movs	r3, #8
 8001686:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001688:	2400      	movs	r4, #0
 800168a:	9403      	str	r4, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800168c:	9404      	str	r4, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800168e:	eb0d 0103 	add.w	r1, sp, r3
 8001692:	4628      	mov	r0, r5
 8001694:	f000 f936 	bl	8001904 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001698:	4622      	mov	r2, r4
 800169a:	4621      	mov	r1, r4
 800169c:	2026      	movs	r0, #38	; 0x26
 800169e:	f000 f88b 	bl	80017b8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80016a2:	2026      	movs	r0, #38	; 0x26
 80016a4:	f000 f8c0 	bl	8001828 <HAL_NVIC_EnableIRQ>
}
 80016a8:	e7cb      	b.n	8001642 <HAL_UART_MspInit+0x16>
 80016aa:	bf00      	nop
 80016ac:	40004400 	.word	0x40004400
 80016b0:	40010800 	.word	0x40010800

080016b4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80016b4:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80016b6:	e003      	b.n	80016c0 <LoopCopyDataInit>

080016b8 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80016b8:	4b0b      	ldr	r3, [pc, #44]	; (80016e8 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80016ba:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80016bc:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80016be:	3104      	adds	r1, #4

080016c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80016c0:	480a      	ldr	r0, [pc, #40]	; (80016ec <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80016c2:	4b0b      	ldr	r3, [pc, #44]	; (80016f0 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80016c4:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80016c6:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80016c8:	d3f6      	bcc.n	80016b8 <CopyDataInit>
  ldr r2, =_sbss
 80016ca:	4a0a      	ldr	r2, [pc, #40]	; (80016f4 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80016cc:	e002      	b.n	80016d4 <LoopFillZerobss>

080016ce <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80016ce:	2300      	movs	r3, #0
  str r3, [r2], #4
 80016d0:	f842 3b04 	str.w	r3, [r2], #4

080016d4 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80016d4:	4b08      	ldr	r3, [pc, #32]	; (80016f8 <LoopFillZerobss+0x24>)
  cmp r2, r3
 80016d6:	429a      	cmp	r2, r3
  bcc FillZerobss
 80016d8:	d3f9      	bcc.n	80016ce <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80016da:	f7ff ff67 	bl	80015ac <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80016de:	f003 f9e9 	bl	8004ab4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80016e2:	f7ff feb5 	bl	8001450 <main>
  bx lr
 80016e6:	4770      	bx	lr
  ldr r3, =_sidata
 80016e8:	0800a1d4 	.word	0x0800a1d4
  ldr r0, =_sdata
 80016ec:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80016f0:	20000350 	.word	0x20000350
  ldr r2, =_sbss
 80016f4:	20000350 	.word	0x20000350
  ldr r3, = _ebss
 80016f8:	200015c4 	.word	0x200015c4

080016fc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80016fc:	e7fe      	b.n	80016fc <ADC1_2_IRQHandler>
	...

08001700 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001700:	b510      	push	{r4, lr}
 8001702:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001704:	4b0e      	ldr	r3, [pc, #56]	; (8001740 <HAL_InitTick+0x40>)
 8001706:	7818      	ldrb	r0, [r3, #0]
 8001708:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800170c:	fbb3 f3f0 	udiv	r3, r3, r0
 8001710:	4a0c      	ldr	r2, [pc, #48]	; (8001744 <HAL_InitTick+0x44>)
 8001712:	6810      	ldr	r0, [r2, #0]
 8001714:	fbb0 f0f3 	udiv	r0, r0, r3
 8001718:	f000 f894 	bl	8001844 <HAL_SYSTICK_Config>
 800171c:	b968      	cbnz	r0, 800173a <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800171e:	2c0f      	cmp	r4, #15
 8001720:	d901      	bls.n	8001726 <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 8001722:	2001      	movs	r0, #1
 8001724:	e00a      	b.n	800173c <HAL_InitTick+0x3c>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001726:	2200      	movs	r2, #0
 8001728:	4621      	mov	r1, r4
 800172a:	f04f 30ff 	mov.w	r0, #4294967295
 800172e:	f000 f843 	bl	80017b8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001732:	4b05      	ldr	r3, [pc, #20]	; (8001748 <HAL_InitTick+0x48>)
 8001734:	601c      	str	r4, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001736:	2000      	movs	r0, #0
 8001738:	e000      	b.n	800173c <HAL_InitTick+0x3c>
    return HAL_ERROR;
 800173a:	2001      	movs	r0, #1
}
 800173c:	bd10      	pop	{r4, pc}
 800173e:	bf00      	nop
 8001740:	20000004 	.word	0x20000004
 8001744:	20000000 	.word	0x20000000
 8001748:	20000008 	.word	0x20000008

0800174c <HAL_Init>:
{
 800174c:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800174e:	4a07      	ldr	r2, [pc, #28]	; (800176c <HAL_Init+0x20>)
 8001750:	6813      	ldr	r3, [r2, #0]
 8001752:	f043 0310 	orr.w	r3, r3, #16
 8001756:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001758:	2003      	movs	r0, #3
 800175a:	f000 f81b 	bl	8001794 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 800175e:	2000      	movs	r0, #0
 8001760:	f7ff ffce 	bl	8001700 <HAL_InitTick>
  HAL_MspInit();
 8001764:	f7ff fe8c 	bl	8001480 <HAL_MspInit>
}
 8001768:	2000      	movs	r0, #0
 800176a:	bd08      	pop	{r3, pc}
 800176c:	40022000 	.word	0x40022000

08001770 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8001770:	4a03      	ldr	r2, [pc, #12]	; (8001780 <HAL_IncTick+0x10>)
 8001772:	6811      	ldr	r1, [r2, #0]
 8001774:	4b03      	ldr	r3, [pc, #12]	; (8001784 <HAL_IncTick+0x14>)
 8001776:	781b      	ldrb	r3, [r3, #0]
 8001778:	440b      	add	r3, r1
 800177a:	6013      	str	r3, [r2, #0]
}
 800177c:	4770      	bx	lr
 800177e:	bf00      	nop
 8001780:	2000048c 	.word	0x2000048c
 8001784:	20000004 	.word	0x20000004

08001788 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001788:	4b01      	ldr	r3, [pc, #4]	; (8001790 <HAL_GetTick+0x8>)
 800178a:	6818      	ldr	r0, [r3, #0]
}
 800178c:	4770      	bx	lr
 800178e:	bf00      	nop
 8001790:	2000048c 	.word	0x2000048c

08001794 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001794:	4a07      	ldr	r2, [pc, #28]	; (80017b4 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8001796:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001798:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800179c:	041b      	lsls	r3, r3, #16
 800179e:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80017a0:	0200      	lsls	r0, r0, #8
 80017a2:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017a6:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 80017a8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80017ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 80017b0:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80017b2:	4770      	bx	lr
 80017b4:	e000ed00 	.word	0xe000ed00

080017b8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80017b8:	b500      	push	{lr}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017ba:	4b19      	ldr	r3, [pc, #100]	; (8001820 <HAL_NVIC_SetPriority+0x68>)
 80017bc:	68db      	ldr	r3, [r3, #12]
 80017be:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80017c2:	f1c3 0c07 	rsb	ip, r3, #7
 80017c6:	f1bc 0f04 	cmp.w	ip, #4
 80017ca:	bf28      	it	cs
 80017cc:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017d0:	f103 0e04 	add.w	lr, r3, #4
 80017d4:	f1be 0f06 	cmp.w	lr, #6
 80017d8:	d918      	bls.n	800180c <HAL_NVIC_SetPriority+0x54>
 80017da:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017dc:	f04f 3eff 	mov.w	lr, #4294967295
 80017e0:	fa0e fc0c 	lsl.w	ip, lr, ip
 80017e4:	ea21 010c 	bic.w	r1, r1, ip
 80017e8:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80017ea:	fa0e f303 	lsl.w	r3, lr, r3
 80017ee:	ea22 0303 	bic.w	r3, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017f2:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) >= 0)
 80017f4:	2800      	cmp	r0, #0
 80017f6:	db0b      	blt.n	8001810 <HAL_NVIC_SetPriority+0x58>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017f8:	0109      	lsls	r1, r1, #4
 80017fa:	b2c9      	uxtb	r1, r1
 80017fc:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8001800:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8001804:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8001808:	f85d fb04 	ldr.w	pc, [sp], #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800180c:	2300      	movs	r3, #0
 800180e:	e7e5      	b.n	80017dc <HAL_NVIC_SetPriority+0x24>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001810:	f000 000f 	and.w	r0, r0, #15
 8001814:	0109      	lsls	r1, r1, #4
 8001816:	b2c9      	uxtb	r1, r1
 8001818:	4b02      	ldr	r3, [pc, #8]	; (8001824 <HAL_NVIC_SetPriority+0x6c>)
 800181a:	5419      	strb	r1, [r3, r0]
 800181c:	e7f4      	b.n	8001808 <HAL_NVIC_SetPriority+0x50>
 800181e:	bf00      	nop
 8001820:	e000ed00 	.word	0xe000ed00
 8001824:	e000ed14 	.word	0xe000ed14

08001828 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8001828:	2800      	cmp	r0, #0
 800182a:	db07      	blt.n	800183c <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800182c:	f000 021f 	and.w	r2, r0, #31
 8001830:	0940      	lsrs	r0, r0, #5
 8001832:	2301      	movs	r3, #1
 8001834:	4093      	lsls	r3, r2
 8001836:	4a02      	ldr	r2, [pc, #8]	; (8001840 <HAL_NVIC_EnableIRQ+0x18>)
 8001838:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 800183c:	4770      	bx	lr
 800183e:	bf00      	nop
 8001840:	e000e100 	.word	0xe000e100

08001844 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001844:	3801      	subs	r0, #1
 8001846:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800184a:	d20b      	bcs.n	8001864 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800184c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8001850:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001852:	4a05      	ldr	r2, [pc, #20]	; (8001868 <HAL_SYSTICK_Config+0x24>)
 8001854:	21f0      	movs	r1, #240	; 0xf0
 8001856:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800185a:	2000      	movs	r0, #0
 800185c:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800185e:	2207      	movs	r2, #7
 8001860:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001862:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8001864:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8001866:	4770      	bx	lr
 8001868:	e000ed00 	.word	0xe000ed00

0800186c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800186c:	b508      	push	{r3, lr}
  HAL_StatusTypeDef status = HAL_OK;
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800186e:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 8001872:	2b02      	cmp	r3, #2
 8001874:	d003      	beq.n	800187e <HAL_DMA_Abort_IT+0x12>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001876:	2304      	movs	r3, #4
 8001878:	6383      	str	r3, [r0, #56]	; 0x38
        
    status = HAL_ERROR;
 800187a:	2001      	movs	r0, #1
    {
      hdma->XferAbortCallback(hdma);
    } 
  }
  return status;
}
 800187c:	bd08      	pop	{r3, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800187e:	6802      	ldr	r2, [r0, #0]
 8001880:	6813      	ldr	r3, [r2, #0]
 8001882:	f023 030e 	bic.w	r3, r3, #14
 8001886:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 8001888:	6802      	ldr	r2, [r0, #0]
 800188a:	6813      	ldr	r3, [r2, #0]
 800188c:	f023 0301 	bic.w	r3, r3, #1
 8001890:	6013      	str	r3, [r2, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001892:	6803      	ldr	r3, [r0, #0]
 8001894:	4a19      	ldr	r2, [pc, #100]	; (80018fc <HAL_DMA_Abort_IT+0x90>)
 8001896:	4293      	cmp	r3, r2
 8001898:	d014      	beq.n	80018c4 <HAL_DMA_Abort_IT+0x58>
 800189a:	3214      	adds	r2, #20
 800189c:	4293      	cmp	r3, r2
 800189e:	d01f      	beq.n	80018e0 <HAL_DMA_Abort_IT+0x74>
 80018a0:	3214      	adds	r2, #20
 80018a2:	4293      	cmp	r3, r2
 80018a4:	d01e      	beq.n	80018e4 <HAL_DMA_Abort_IT+0x78>
 80018a6:	3214      	adds	r2, #20
 80018a8:	4293      	cmp	r3, r2
 80018aa:	d01e      	beq.n	80018ea <HAL_DMA_Abort_IT+0x7e>
 80018ac:	3214      	adds	r2, #20
 80018ae:	4293      	cmp	r3, r2
 80018b0:	d01e      	beq.n	80018f0 <HAL_DMA_Abort_IT+0x84>
 80018b2:	3214      	adds	r2, #20
 80018b4:	4293      	cmp	r3, r2
 80018b6:	d002      	beq.n	80018be <HAL_DMA_Abort_IT+0x52>
 80018b8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80018bc:	e003      	b.n	80018c6 <HAL_DMA_Abort_IT+0x5a>
 80018be:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80018c2:	e000      	b.n	80018c6 <HAL_DMA_Abort_IT+0x5a>
 80018c4:	2201      	movs	r2, #1
 80018c6:	4b0e      	ldr	r3, [pc, #56]	; (8001900 <HAL_DMA_Abort_IT+0x94>)
 80018c8:	605a      	str	r2, [r3, #4]
    hdma->State = HAL_DMA_STATE_READY;
 80018ca:	2301      	movs	r3, #1
 80018cc:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
    __HAL_UNLOCK(hdma);
 80018d0:	2300      	movs	r3, #0
 80018d2:	f880 3020 	strb.w	r3, [r0, #32]
    if(hdma->XferAbortCallback != NULL)
 80018d6:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80018d8:	b16b      	cbz	r3, 80018f6 <HAL_DMA_Abort_IT+0x8a>
      hdma->XferAbortCallback(hdma);
 80018da:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 80018dc:	2000      	movs	r0, #0
 80018de:	e7cd      	b.n	800187c <HAL_DMA_Abort_IT+0x10>
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80018e0:	2210      	movs	r2, #16
 80018e2:	e7f0      	b.n	80018c6 <HAL_DMA_Abort_IT+0x5a>
 80018e4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80018e8:	e7ed      	b.n	80018c6 <HAL_DMA_Abort_IT+0x5a>
 80018ea:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80018ee:	e7ea      	b.n	80018c6 <HAL_DMA_Abort_IT+0x5a>
 80018f0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80018f4:	e7e7      	b.n	80018c6 <HAL_DMA_Abort_IT+0x5a>
  HAL_StatusTypeDef status = HAL_OK;
 80018f6:	2000      	movs	r0, #0
 80018f8:	e7c0      	b.n	800187c <HAL_DMA_Abort_IT+0x10>
 80018fa:	bf00      	nop
 80018fc:	40020008 	.word	0x40020008
 8001900:	40020000 	.word	0x40020000

08001904 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001904:	b570      	push	{r4, r5, r6, lr}
 8001906:	b082      	sub	sp, #8
  uint32_t position = 0x00u;
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001908:	2400      	movs	r4, #0
  uint32_t position = 0x00u;
 800190a:	46a4      	mov	ip, r4
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800190c:	e0a6      	b.n	8001a5c <HAL_GPIO_Init+0x158>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800190e:	4d80      	ldr	r5, [pc, #512]	; (8001b10 <HAL_GPIO_Init+0x20c>)
 8001910:	42aa      	cmp	r2, r5
 8001912:	d010      	beq.n	8001936 <HAL_GPIO_Init+0x32>
 8001914:	d907      	bls.n	8001926 <HAL_GPIO_Init+0x22>
 8001916:	4d7f      	ldr	r5, [pc, #508]	; (8001b14 <HAL_GPIO_Init+0x210>)
 8001918:	42aa      	cmp	r2, r5
 800191a:	d00c      	beq.n	8001936 <HAL_GPIO_Init+0x32>
 800191c:	f505 3580 	add.w	r5, r5, #65536	; 0x10000
 8001920:	42aa      	cmp	r2, r5
 8001922:	d008      	beq.n	8001936 <HAL_GPIO_Init+0x32>
 8001924:	e013      	b.n	800194e <HAL_GPIO_Init+0x4a>
 8001926:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800192a:	42aa      	cmp	r2, r5
 800192c:	d003      	beq.n	8001936 <HAL_GPIO_Init+0x32>
 800192e:	f505 2570 	add.w	r5, r5, #983040	; 0xf0000
 8001932:	42aa      	cmp	r2, r5
 8001934:	d107      	bne.n	8001946 <HAL_GPIO_Init+0x42>
        case GPIO_MODE_EVT_RISING:
        case GPIO_MODE_EVT_FALLING:
        case GPIO_MODE_EVT_RISING_FALLING:
          /* Check the GPIO pull parameter */
          assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001936:	688a      	ldr	r2, [r1, #8]
 8001938:	2a00      	cmp	r2, #0
 800193a:	d058      	beq.n	80019ee <HAL_GPIO_Init+0xea>
          {
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
          }
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800193c:	2a01      	cmp	r2, #1
 800193e:	d051      	beq.n	80019e4 <HAL_GPIO_Init+0xe0>
          else /* GPIO_PULLDOWN */
          {
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;

            /* Reset the corresponding ODR bit */
            GPIOx->BRR = ioposition;
 8001940:	6143      	str	r3, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001942:	2408      	movs	r4, #8
 8001944:	e003      	b.n	800194e <HAL_GPIO_Init+0x4a>
      switch (GPIO_Init->Mode)
 8001946:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800194a:	42aa      	cmp	r2, r5
 800194c:	d0f3      	beq.n	8001936 <HAL_GPIO_Init+0x32>
          break;
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800194e:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8001952:	d84e      	bhi.n	80019f2 <HAL_GPIO_Init+0xee>
 8001954:	4606      	mov	r6, r0
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001956:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 800195a:	d84c      	bhi.n	80019f6 <HAL_GPIO_Init+0xf2>
 800195c:	ea4f 028c 	mov.w	r2, ip, lsl #2

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001960:	6833      	ldr	r3, [r6, #0]
 8001962:	250f      	movs	r5, #15
 8001964:	4095      	lsls	r5, r2
 8001966:	ea23 0305 	bic.w	r3, r3, r5
 800196a:	fa04 f202 	lsl.w	r2, r4, r2
 800196e:	4313      	orrs	r3, r2
 8001970:	6033      	str	r3, [r6, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001972:	684b      	ldr	r3, [r1, #4]
 8001974:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8001978:	d06e      	beq.n	8001a58 <HAL_GPIO_Init+0x154>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800197a:	4b67      	ldr	r3, [pc, #412]	; (8001b18 <HAL_GPIO_Init+0x214>)
 800197c:	699a      	ldr	r2, [r3, #24]
 800197e:	f042 0201 	orr.w	r2, r2, #1
 8001982:	619a      	str	r2, [r3, #24]
 8001984:	699b      	ldr	r3, [r3, #24]
 8001986:	f003 0301 	and.w	r3, r3, #1
 800198a:	9301      	str	r3, [sp, #4]
 800198c:	9b01      	ldr	r3, [sp, #4]
        temp = AFIO->EXTICR[position >> 2u];
 800198e:	ea4f 029c 	mov.w	r2, ip, lsr #2
 8001992:	1c95      	adds	r5, r2, #2
 8001994:	4b61      	ldr	r3, [pc, #388]	; (8001b1c <HAL_GPIO_Init+0x218>)
 8001996:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800199a:	f00c 0303 	and.w	r3, ip, #3
 800199e:	009d      	lsls	r5, r3, #2
 80019a0:	230f      	movs	r3, #15
 80019a2:	40ab      	lsls	r3, r5
 80019a4:	ea26 0603 	bic.w	r6, r6, r3
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80019a8:	4b5d      	ldr	r3, [pc, #372]	; (8001b20 <HAL_GPIO_Init+0x21c>)
 80019aa:	4298      	cmp	r0, r3
 80019ac:	d029      	beq.n	8001a02 <HAL_GPIO_Init+0xfe>
 80019ae:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80019b2:	4298      	cmp	r0, r3
 80019b4:	f000 808e 	beq.w	8001ad4 <HAL_GPIO_Init+0x1d0>
 80019b8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80019bc:	4298      	cmp	r0, r3
 80019be:	f000 808b 	beq.w	8001ad8 <HAL_GPIO_Init+0x1d4>
 80019c2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80019c6:	4298      	cmp	r0, r3
 80019c8:	d019      	beq.n	80019fe <HAL_GPIO_Init+0xfa>
 80019ca:	2304      	movs	r3, #4
 80019cc:	e01a      	b.n	8001a04 <HAL_GPIO_Init+0x100>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80019ce:	68cc      	ldr	r4, [r1, #12]
          break;
 80019d0:	e7bd      	b.n	800194e <HAL_GPIO_Init+0x4a>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80019d2:	68cc      	ldr	r4, [r1, #12]
 80019d4:	3404      	adds	r4, #4
          break;
 80019d6:	e7ba      	b.n	800194e <HAL_GPIO_Init+0x4a>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80019d8:	68cc      	ldr	r4, [r1, #12]
 80019da:	3408      	adds	r4, #8
          break;
 80019dc:	e7b7      	b.n	800194e <HAL_GPIO_Init+0x4a>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80019de:	68cc      	ldr	r4, [r1, #12]
 80019e0:	340c      	adds	r4, #12
          break;
 80019e2:	e7b4      	b.n	800194e <HAL_GPIO_Init+0x4a>
            GPIOx->BSRR = ioposition;
 80019e4:	6103      	str	r3, [r0, #16]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80019e6:	2408      	movs	r4, #8
 80019e8:	e7b1      	b.n	800194e <HAL_GPIO_Init+0x4a>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80019ea:	2400      	movs	r4, #0
 80019ec:	e7af      	b.n	800194e <HAL_GPIO_Init+0x4a>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80019ee:	2404      	movs	r4, #4
 80019f0:	e7ad      	b.n	800194e <HAL_GPIO_Init+0x4a>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80019f2:	1d06      	adds	r6, r0, #4
 80019f4:	e7af      	b.n	8001956 <HAL_GPIO_Init+0x52>
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80019f6:	f1ac 0208 	sub.w	r2, ip, #8
 80019fa:	0092      	lsls	r2, r2, #2
 80019fc:	e7b0      	b.n	8001960 <HAL_GPIO_Init+0x5c>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80019fe:	2303      	movs	r3, #3
 8001a00:	e000      	b.n	8001a04 <HAL_GPIO_Init+0x100>
 8001a02:	2300      	movs	r3, #0
 8001a04:	40ab      	lsls	r3, r5
 8001a06:	4333      	orrs	r3, r6
        AFIO->EXTICR[position >> 2u] = temp;
 8001a08:	3202      	adds	r2, #2
 8001a0a:	4d44      	ldr	r5, [pc, #272]	; (8001b1c <HAL_GPIO_Init+0x218>)
 8001a0c:	f845 3022 	str.w	r3, [r5, r2, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001a10:	684b      	ldr	r3, [r1, #4]
 8001a12:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8001a16:	d061      	beq.n	8001adc <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001a18:	4a42      	ldr	r2, [pc, #264]	; (8001b24 <HAL_GPIO_Init+0x220>)
 8001a1a:	6813      	ldr	r3, [r2, #0]
 8001a1c:	ea43 030e 	orr.w	r3, r3, lr
 8001a20:	6013      	str	r3, [r2, #0]
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001a22:	684b      	ldr	r3, [r1, #4]
 8001a24:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8001a28:	d05e      	beq.n	8001ae8 <HAL_GPIO_Init+0x1e4>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001a2a:	4a3e      	ldr	r2, [pc, #248]	; (8001b24 <HAL_GPIO_Init+0x220>)
 8001a2c:	6853      	ldr	r3, [r2, #4]
 8001a2e:	ea43 030e 	orr.w	r3, r3, lr
 8001a32:	6053      	str	r3, [r2, #4]
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001a34:	684b      	ldr	r3, [r1, #4]
 8001a36:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8001a3a:	d05b      	beq.n	8001af4 <HAL_GPIO_Init+0x1f0>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001a3c:	4a39      	ldr	r2, [pc, #228]	; (8001b24 <HAL_GPIO_Init+0x220>)
 8001a3e:	6893      	ldr	r3, [r2, #8]
 8001a40:	ea43 030e 	orr.w	r3, r3, lr
 8001a44:	6093      	str	r3, [r2, #8]
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001a46:	684b      	ldr	r3, [r1, #4]
 8001a48:	f413 1f00 	tst.w	r3, #2097152	; 0x200000
 8001a4c:	d058      	beq.n	8001b00 <HAL_GPIO_Init+0x1fc>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001a4e:	4a35      	ldr	r2, [pc, #212]	; (8001b24 <HAL_GPIO_Init+0x220>)
 8001a50:	68d3      	ldr	r3, [r2, #12]
 8001a52:	ea43 030e 	orr.w	r3, r3, lr
 8001a56:	60d3      	str	r3, [r2, #12]
          CLEAR_BIT(EXTI->FTSR, iocurrent);
        }
      }
    }

	position++;
 8001a58:	f10c 0c01 	add.w	ip, ip, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a5c:	680a      	ldr	r2, [r1, #0]
 8001a5e:	fa32 f30c 	lsrs.w	r3, r2, ip
 8001a62:	d053      	beq.n	8001b0c <HAL_GPIO_Init+0x208>
    ioposition = (0x01uL << position);
 8001a64:	2301      	movs	r3, #1
 8001a66:	fa03 f30c 	lsl.w	r3, r3, ip
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a6a:	ea02 0e03 	and.w	lr, r2, r3
    if (iocurrent == ioposition)
 8001a6e:	ea33 0202 	bics.w	r2, r3, r2
 8001a72:	d1f1      	bne.n	8001a58 <HAL_GPIO_Init+0x154>
      switch (GPIO_Init->Mode)
 8001a74:	684a      	ldr	r2, [r1, #4]
 8001a76:	2a12      	cmp	r2, #18
 8001a78:	f63f af49 	bhi.w	800190e <HAL_GPIO_Init+0xa>
 8001a7c:	2a12      	cmp	r2, #18
 8001a7e:	f63f af66 	bhi.w	800194e <HAL_GPIO_Init+0x4a>
 8001a82:	a501      	add	r5, pc, #4	; (adr r5, 8001a88 <HAL_GPIO_Init+0x184>)
 8001a84:	f855 f022 	ldr.w	pc, [r5, r2, lsl #2]
 8001a88:	08001937 	.word	0x08001937
 8001a8c:	080019cf 	.word	0x080019cf
 8001a90:	080019d9 	.word	0x080019d9
 8001a94:	080019eb 	.word	0x080019eb
 8001a98:	0800194f 	.word	0x0800194f
 8001a9c:	0800194f 	.word	0x0800194f
 8001aa0:	0800194f 	.word	0x0800194f
 8001aa4:	0800194f 	.word	0x0800194f
 8001aa8:	0800194f 	.word	0x0800194f
 8001aac:	0800194f 	.word	0x0800194f
 8001ab0:	0800194f 	.word	0x0800194f
 8001ab4:	0800194f 	.word	0x0800194f
 8001ab8:	0800194f 	.word	0x0800194f
 8001abc:	0800194f 	.word	0x0800194f
 8001ac0:	0800194f 	.word	0x0800194f
 8001ac4:	0800194f 	.word	0x0800194f
 8001ac8:	0800194f 	.word	0x0800194f
 8001acc:	080019d3 	.word	0x080019d3
 8001ad0:	080019df 	.word	0x080019df
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001ad4:	2301      	movs	r3, #1
 8001ad6:	e795      	b.n	8001a04 <HAL_GPIO_Init+0x100>
 8001ad8:	2302      	movs	r3, #2
 8001ada:	e793      	b.n	8001a04 <HAL_GPIO_Init+0x100>
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001adc:	4a11      	ldr	r2, [pc, #68]	; (8001b24 <HAL_GPIO_Init+0x220>)
 8001ade:	6813      	ldr	r3, [r2, #0]
 8001ae0:	ea23 030e 	bic.w	r3, r3, lr
 8001ae4:	6013      	str	r3, [r2, #0]
 8001ae6:	e79c      	b.n	8001a22 <HAL_GPIO_Init+0x11e>
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001ae8:	4a0e      	ldr	r2, [pc, #56]	; (8001b24 <HAL_GPIO_Init+0x220>)
 8001aea:	6853      	ldr	r3, [r2, #4]
 8001aec:	ea23 030e 	bic.w	r3, r3, lr
 8001af0:	6053      	str	r3, [r2, #4]
 8001af2:	e79f      	b.n	8001a34 <HAL_GPIO_Init+0x130>
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001af4:	4a0b      	ldr	r2, [pc, #44]	; (8001b24 <HAL_GPIO_Init+0x220>)
 8001af6:	6893      	ldr	r3, [r2, #8]
 8001af8:	ea23 030e 	bic.w	r3, r3, lr
 8001afc:	6093      	str	r3, [r2, #8]
 8001afe:	e7a2      	b.n	8001a46 <HAL_GPIO_Init+0x142>
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001b00:	4a08      	ldr	r2, [pc, #32]	; (8001b24 <HAL_GPIO_Init+0x220>)
 8001b02:	68d3      	ldr	r3, [r2, #12]
 8001b04:	ea23 030e 	bic.w	r3, r3, lr
 8001b08:	60d3      	str	r3, [r2, #12]
 8001b0a:	e7a5      	b.n	8001a58 <HAL_GPIO_Init+0x154>
  }
}
 8001b0c:	b002      	add	sp, #8
 8001b0e:	bd70      	pop	{r4, r5, r6, pc}
 8001b10:	10220000 	.word	0x10220000
 8001b14:	10310000 	.word	0x10310000
 8001b18:	40021000 	.word	0x40021000
 8001b1c:	40010000 	.word	0x40010000
 8001b20:	40010800 	.word	0x40010800
 8001b24:	40010400 	.word	0x40010400

08001b28 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001b28:	b10a      	cbz	r2, 8001b2e <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001b2a:	6101      	str	r1, [r0, #16]
 8001b2c:	4770      	bx	lr
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001b2e:	0409      	lsls	r1, r1, #16
 8001b30:	6101      	str	r1, [r0, #16]
  }
}
 8001b32:	4770      	bx	lr

08001b34 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001b34:	b570      	push	{r4, r5, r6, lr}
 8001b36:	b086      	sub	sp, #24
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001b38:	2800      	cmp	r0, #0
 8001b3a:	d077      	beq.n	8001c2c <HAL_PCD_Init+0xf8>
 8001b3c:	4605      	mov	r5, r0

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001b3e:	f890 3229 	ldrb.w	r3, [r0, #553]	; 0x229
 8001b42:	b1eb      	cbz	r3, 8001b80 <HAL_PCD_Init+0x4c>
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001b44:	2303      	movs	r3, #3
 8001b46:	f885 3229 	strb.w	r3, [r5, #553]	; 0x229
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001b4a:	6828      	ldr	r0, [r5, #0]
 8001b4c:	f001 fa20 	bl	8002f90 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001b50:	462c      	mov	r4, r5
 8001b52:	f854 6b10 	ldr.w	r6, [r4], #16
 8001b56:	46ec      	mov	ip, sp
 8001b58:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001b5a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8001b5e:	6823      	ldr	r3, [r4, #0]
 8001b60:	f8cc 3000 	str.w	r3, [ip]
 8001b64:	1d2b      	adds	r3, r5, #4
 8001b66:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001b68:	4630      	mov	r0, r6
 8001b6a:	f001 fa01 	bl	8002f70 <USB_CoreInit>
 8001b6e:	4604      	mov	r4, r0
 8001b70:	b158      	cbz	r0, 8001b8a <HAL_PCD_Init+0x56>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001b72:	2302      	movs	r3, #2
 8001b74:	f885 3229 	strb.w	r3, [r5, #553]	; 0x229
    return HAL_ERROR;
 8001b78:	2401      	movs	r4, #1
  hpcd->USB_Address = 0U;
  hpcd->State = HAL_PCD_STATE_READY;
  (void)USB_DevDisconnect(hpcd->Instance);

  return HAL_OK;
}
 8001b7a:	4620      	mov	r0, r4
 8001b7c:	b006      	add	sp, #24
 8001b7e:	bd70      	pop	{r4, r5, r6, pc}
    hpcd->Lock = HAL_UNLOCKED;
 8001b80:	f880 3228 	strb.w	r3, [r0, #552]	; 0x228
    HAL_PCD_MspInit(hpcd);
 8001b84:	f002 fe82 	bl	800488c <HAL_PCD_MspInit>
 8001b88:	e7dc      	b.n	8001b44 <HAL_PCD_Init+0x10>
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001b8a:	2100      	movs	r1, #0
 8001b8c:	6828      	ldr	r0, [r5, #0]
 8001b8e:	f001 fa09 	bl	8002fa4 <USB_SetCurrentMode>
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001b92:	4623      	mov	r3, r4
 8001b94:	e011      	b.n	8001bba <HAL_PCD_Init+0x86>
    hpcd->IN_ep[i].is_in = 1U;
 8001b96:	eb05 1243 	add.w	r2, r5, r3, lsl #5
 8001b9a:	2101      	movs	r1, #1
 8001b9c:	f882 1029 	strb.w	r1, [r2, #41]	; 0x29
    hpcd->IN_ep[i].num = i;
 8001ba0:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001ba4:	86d3      	strh	r3, [r2, #54]	; 0x36
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001ba6:	2100      	movs	r1, #0
 8001ba8:	f882 102b 	strb.w	r1, [r2, #43]	; 0x2b
    hpcd->IN_ep[i].maxpacket = 0U;
 8001bac:	6391      	str	r1, [r2, #56]	; 0x38
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001bae:	63d1      	str	r1, [r2, #60]	; 0x3c
    hpcd->IN_ep[i].xfer_len = 0U;
 8001bb0:	1c9a      	adds	r2, r3, #2
 8001bb2:	0152      	lsls	r2, r2, #5
 8001bb4:	50a9      	str	r1, [r5, r2]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001bb6:	3301      	adds	r3, #1
 8001bb8:	b2db      	uxtb	r3, r3
 8001bba:	6869      	ldr	r1, [r5, #4]
 8001bbc:	428b      	cmp	r3, r1
 8001bbe:	d3ea      	bcc.n	8001b96 <HAL_PCD_Init+0x62>
 8001bc0:	e012      	b.n	8001be8 <HAL_PCD_Init+0xb4>
    hpcd->OUT_ep[i].is_in = 0U;
 8001bc2:	eb05 1244 	add.w	r2, r5, r4, lsl #5
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	f882 3129 	strb.w	r3, [r2, #297]	; 0x129
    hpcd->OUT_ep[i].num = i;
 8001bcc:	f882 4128 	strb.w	r4, [r2, #296]	; 0x128
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001bd0:	f882 312b 	strb.w	r3, [r2, #299]	; 0x12b
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001bd4:	f8c2 3138 	str.w	r3, [r2, #312]	; 0x138
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001bd8:	f8c2 313c 	str.w	r3, [r2, #316]	; 0x13c
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001bdc:	f104 020a 	add.w	r2, r4, #10
 8001be0:	0152      	lsls	r2, r2, #5
 8001be2:	50ab      	str	r3, [r5, r2]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001be4:	3401      	adds	r4, #1
 8001be6:	b2e4      	uxtb	r4, r4
 8001be8:	42a1      	cmp	r1, r4
 8001bea:	d8ea      	bhi.n	8001bc2 <HAL_PCD_Init+0x8e>
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001bec:	462c      	mov	r4, r5
 8001bee:	f854 6b10 	ldr.w	r6, [r4], #16
 8001bf2:	46ec      	mov	ip, sp
 8001bf4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001bf6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8001bfa:	6823      	ldr	r3, [r4, #0]
 8001bfc:	f8cc 3000 	str.w	r3, [ip]
 8001c00:	1d2b      	adds	r3, r5, #4
 8001c02:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001c04:	4630      	mov	r0, r6
 8001c06:	f001 f9cf 	bl	8002fa8 <USB_DevInit>
 8001c0a:	4604      	mov	r4, r0
 8001c0c:	b120      	cbz	r0, 8001c18 <HAL_PCD_Init+0xe4>
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001c0e:	2302      	movs	r3, #2
 8001c10:	f885 3229 	strb.w	r3, [r5, #553]	; 0x229
    return HAL_ERROR;
 8001c14:	2401      	movs	r4, #1
 8001c16:	e7b0      	b.n	8001b7a <HAL_PCD_Init+0x46>
  hpcd->USB_Address = 0U;
 8001c18:	2300      	movs	r3, #0
 8001c1a:	f885 3024 	strb.w	r3, [r5, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8001c1e:	2301      	movs	r3, #1
 8001c20:	f885 3229 	strb.w	r3, [r5, #553]	; 0x229
  (void)USB_DevDisconnect(hpcd->Instance);
 8001c24:	6828      	ldr	r0, [r5, #0]
 8001c26:	f001 fd16 	bl	8003656 <USB_DevDisconnect>
  return HAL_OK;
 8001c2a:	e7a6      	b.n	8001b7a <HAL_PCD_Init+0x46>
    return HAL_ERROR;
 8001c2c:	2401      	movs	r4, #1
 8001c2e:	e7a4      	b.n	8001b7a <HAL_PCD_Init+0x46>

08001c30 <HAL_PCD_Start>:
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
  __HAL_LOCK(hpcd);
 8001c30:	f890 3228 	ldrb.w	r3, [r0, #552]	; 0x228
 8001c34:	2b01      	cmp	r3, #1
 8001c36:	d010      	beq.n	8001c5a <HAL_PCD_Start+0x2a>
{
 8001c38:	b510      	push	{r4, lr}
 8001c3a:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 8001c3c:	2101      	movs	r1, #1
 8001c3e:	f880 1228 	strb.w	r1, [r0, #552]	; 0x228
#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8001c42:	f002 ff30 	bl	8004aa6 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */
  (void)USB_DevConnect(hpcd->Instance);
 8001c46:	6820      	ldr	r0, [r4, #0]
 8001c48:	f001 fd03 	bl	8003652 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 8001c4c:	6820      	ldr	r0, [r4, #0]
 8001c4e:	f001 f996 	bl	8002f7e <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 8001c52:	2000      	movs	r0, #0
 8001c54:	f884 0228 	strb.w	r0, [r4, #552]	; 0x228
  return HAL_OK;
}
 8001c58:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 8001c5a:	2002      	movs	r0, #2
}
 8001c5c:	4770      	bx	lr

08001c5e <HAL_PCD_SetAddress>:
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
  __HAL_LOCK(hpcd);
 8001c5e:	f890 3228 	ldrb.w	r3, [r0, #552]	; 0x228
 8001c62:	2b01      	cmp	r3, #1
 8001c64:	d00d      	beq.n	8001c82 <HAL_PCD_SetAddress+0x24>
{
 8001c66:	b510      	push	{r4, lr}
 8001c68:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 8001c6a:	2301      	movs	r3, #1
 8001c6c:	f880 3228 	strb.w	r3, [r0, #552]	; 0x228
  hpcd->USB_Address = address;
 8001c70:	f880 1024 	strb.w	r1, [r0, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001c74:	6800      	ldr	r0, [r0, #0]
 8001c76:	f001 fce6 	bl	8003646 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001c7a:	2000      	movs	r0, #0
 8001c7c:	f884 0228 	strb.w	r0, [r4, #552]	; 0x228
  return HAL_OK;
}
 8001c80:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 8001c82:	2002      	movs	r0, #2
}
 8001c84:	4770      	bx	lr

08001c86 <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8001c86:	b510      	push	{r4, lr}
 8001c88:	4604      	mov	r4, r0
 8001c8a:	468c      	mov	ip, r1
  HAL_StatusTypeDef  ret = HAL_OK;
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001c8c:	f011 0f80 	tst.w	r1, #128	; 0x80
 8001c90:	d124      	bne.n	8001cdc <HAL_PCD_EP_Open+0x56>
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
    ep->is_in = 1U;
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001c92:	f001 0007 	and.w	r0, r1, #7
 8001c96:	0140      	lsls	r0, r0, #5
 8001c98:	f500 7194 	add.w	r1, r0, #296	; 0x128
 8001c9c:	4421      	add	r1, r4
    ep->is_in = 0U;
 8001c9e:	4420      	add	r0, r4
 8001ca0:	f04f 0e00 	mov.w	lr, #0
 8001ca4:	f880 e129 	strb.w	lr, [r0, #297]	; 0x129
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001ca8:	f00c 0c07 	and.w	ip, ip, #7
 8001cac:	f881 c000 	strb.w	ip, [r1]
  ep->maxpacket = ep_mps;
 8001cb0:	610a      	str	r2, [r1, #16]
  ep->type = ep_type;
 8001cb2:	70cb      	strb	r3, [r1, #3]

  if (ep->is_in != 0U)
 8001cb4:	784a      	ldrb	r2, [r1, #1]
 8001cb6:	b10a      	cbz	r2, 8001cbc <HAL_PCD_EP_Open+0x36>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001cb8:	f8a1 c00e 	strh.w	ip, [r1, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001cbc:	2b02      	cmp	r3, #2
 8001cbe:	d019      	beq.n	8001cf4 <HAL_PCD_EP_Open+0x6e>
  {
    ep->data_pid_start = 0U;
  }

  __HAL_LOCK(hpcd);
 8001cc0:	f894 3228 	ldrb.w	r3, [r4, #552]	; 0x228
 8001cc4:	2b01      	cmp	r3, #1
 8001cc6:	d018      	beq.n	8001cfa <HAL_PCD_EP_Open+0x74>
 8001cc8:	2301      	movs	r3, #1
 8001cca:	f884 3228 	strb.w	r3, [r4, #552]	; 0x228
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001cce:	6820      	ldr	r0, [r4, #0]
 8001cd0:	f001 f980 	bl	8002fd4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001cd4:	2000      	movs	r0, #0
 8001cd6:	f884 0228 	strb.w	r0, [r4, #552]	; 0x228

  return ret;
}
 8001cda:	bd10      	pop	{r4, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001cdc:	f001 0007 	and.w	r0, r1, #7
 8001ce0:	0140      	lsls	r0, r0, #5
 8001ce2:	f100 0128 	add.w	r1, r0, #40	; 0x28
 8001ce6:	4421      	add	r1, r4
    ep->is_in = 1U;
 8001ce8:	4420      	add	r0, r4
 8001cea:	f04f 0e01 	mov.w	lr, #1
 8001cee:	f880 e029 	strb.w	lr, [r0, #41]	; 0x29
 8001cf2:	e7d9      	b.n	8001ca8 <HAL_PCD_EP_Open+0x22>
    ep->data_pid_start = 0U;
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	710b      	strb	r3, [r1, #4]
 8001cf8:	e7e2      	b.n	8001cc0 <HAL_PCD_EP_Open+0x3a>
  __HAL_LOCK(hpcd);
 8001cfa:	2002      	movs	r0, #2
 8001cfc:	e7ed      	b.n	8001cda <HAL_PCD_EP_Open+0x54>

08001cfe <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001cfe:	b510      	push	{r4, lr}
 8001d00:	4604      	mov	r4, r0
 8001d02:	460b      	mov	r3, r1
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001d04:	f011 0f80 	tst.w	r1, #128	; 0x80
 8001d08:	d11a      	bne.n	8001d40 <HAL_PCD_EP_Close+0x42>
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
    ep->is_in = 1U;
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001d0a:	f001 0207 	and.w	r2, r1, #7
 8001d0e:	0152      	lsls	r2, r2, #5
 8001d10:	f502 7194 	add.w	r1, r2, #296	; 0x128
 8001d14:	4401      	add	r1, r0
    ep->is_in = 0U;
 8001d16:	4402      	add	r2, r0
 8001d18:	2000      	movs	r0, #0
 8001d1a:	f882 0129 	strb.w	r0, [r2, #297]	; 0x129
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001d1e:	f003 0307 	and.w	r3, r3, #7
 8001d22:	700b      	strb	r3, [r1, #0]

  __HAL_LOCK(hpcd);
 8001d24:	f894 3228 	ldrb.w	r3, [r4, #552]	; 0x228
 8001d28:	2b01      	cmp	r3, #1
 8001d2a:	d014      	beq.n	8001d56 <HAL_PCD_EP_Close+0x58>
 8001d2c:	2301      	movs	r3, #1
 8001d2e:	f884 3228 	strb.w	r3, [r4, #552]	; 0x228
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001d32:	6820      	ldr	r0, [r4, #0]
 8001d34:	f001 fb26 	bl	8003384 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001d38:	2000      	movs	r0, #0
 8001d3a:	f884 0228 	strb.w	r0, [r4, #552]	; 0x228
  return HAL_OK;
}
 8001d3e:	bd10      	pop	{r4, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001d40:	f001 0207 	and.w	r2, r1, #7
 8001d44:	0152      	lsls	r2, r2, #5
 8001d46:	f102 0128 	add.w	r1, r2, #40	; 0x28
 8001d4a:	4401      	add	r1, r0
    ep->is_in = 1U;
 8001d4c:	4402      	add	r2, r0
 8001d4e:	2001      	movs	r0, #1
 8001d50:	f882 0029 	strb.w	r0, [r2, #41]	; 0x29
 8001d54:	e7e3      	b.n	8001d1e <HAL_PCD_EP_Close+0x20>
  __HAL_LOCK(hpcd);
 8001d56:	2002      	movs	r0, #2
 8001d58:	e7f1      	b.n	8001d3e <HAL_PCD_EP_Close+0x40>

08001d5a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001d5a:	b510      	push	{r4, lr}
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001d5c:	f001 0407 	and.w	r4, r1, #7
 8001d60:	ea4f 1c44 	mov.w	ip, r4, lsl #5
 8001d64:	f50c 7194 	add.w	r1, ip, #296	; 0x128
 8001d68:	4401      	add	r1, r0

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001d6a:	4484      	add	ip, r0
 8001d6c:	f8cc 213c 	str.w	r2, [ip, #316]	; 0x13c
  ep->xfer_len = len;
 8001d70:	f104 020a 	add.w	r2, r4, #10
 8001d74:	ea4f 1e42 	mov.w	lr, r2, lsl #5
 8001d78:	eb00 1242 	add.w	r2, r0, r2, lsl #5
 8001d7c:	f840 300e 	str.w	r3, [r0, lr]
  ep->xfer_count = 0U;
 8001d80:	2300      	movs	r3, #0
 8001d82:	6053      	str	r3, [r2, #4]
  ep->is_in = 0U;
 8001d84:	f88c 3129 	strb.w	r3, [ip, #297]	; 0x129
  ep->num = ep_addr & EP_ADDR_MSK;
 8001d88:	f88c 4128 	strb.w	r4, [ip, #296]	; 0x128

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001d8c:	b924      	cbnz	r4, 8001d98 <HAL_PCD_EP_Receive+0x3e>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001d8e:	6800      	ldr	r0, [r0, #0]
 8001d90:	f001 fc7d 	bl	800368e <USB_EPStartXfer>
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
  }

  return HAL_OK;
}
 8001d94:	2000      	movs	r0, #0
 8001d96:	bd10      	pop	{r4, pc}
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001d98:	6800      	ldr	r0, [r0, #0]
 8001d9a:	f001 fc78 	bl	800368e <USB_EPStartXfer>
 8001d9e:	e7f9      	b.n	8001d94 <HAL_PCD_EP_Receive+0x3a>

08001da0 <HAL_PCD_EP_GetRxCount>:
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001da0:	f001 0107 	and.w	r1, r1, #7
 8001da4:	310a      	adds	r1, #10
 8001da6:	eb00 1041 	add.w	r0, r0, r1, lsl #5
}
 8001daa:	6840      	ldr	r0, [r0, #4]
 8001dac:	4770      	bx	lr

08001dae <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001dae:	b510      	push	{r4, lr}
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001db0:	f001 0407 	and.w	r4, r1, #7
 8001db4:	ea4f 1c44 	mov.w	ip, r4, lsl #5
 8001db8:	f10c 0128 	add.w	r1, ip, #40	; 0x28
 8001dbc:	4401      	add	r1, r0

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001dbe:	4484      	add	ip, r0
 8001dc0:	f8cc 203c 	str.w	r2, [ip, #60]	; 0x3c
  ep->xfer_len = len;
 8001dc4:	1ca2      	adds	r2, r4, #2
 8001dc6:	ea4f 1e42 	mov.w	lr, r2, lsl #5
 8001dca:	eb00 1242 	add.w	r2, r0, r2, lsl #5
 8001dce:	f840 300e 	str.w	r3, [r0, lr]
  ep->xfer_count = 0U;
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	6053      	str	r3, [r2, #4]
  ep->is_in = 1U;
 8001dd6:	2301      	movs	r3, #1
 8001dd8:	f88c 3029 	strb.w	r3, [ip, #41]	; 0x29
  ep->num = ep_addr & EP_ADDR_MSK;
 8001ddc:	f88c 4028 	strb.w	r4, [ip, #40]	; 0x28

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001de0:	b924      	cbnz	r4, 8001dec <HAL_PCD_EP_Transmit+0x3e>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001de2:	6800      	ldr	r0, [r0, #0]
 8001de4:	f001 fc53 	bl	800368e <USB_EPStartXfer>
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
  }

  return HAL_OK;
}
 8001de8:	2000      	movs	r0, #0
 8001dea:	bd10      	pop	{r4, pc}
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001dec:	6800      	ldr	r0, [r0, #0]
 8001dee:	f001 fc4e 	bl	800368e <USB_EPStartXfer>
 8001df2:	e7f9      	b.n	8001de8 <HAL_PCD_EP_Transmit+0x3a>

08001df4 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8001df4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001df6:	4605      	mov	r5, r0
  uint16_t wIstr;
  uint16_t wEPVal;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001df8:	e0aa      	b.n	8001f50 <PCD_EP_ISR_Handler+0x15c>
      {
        /* DIR = 0 */

        /* DIR = 0      => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always  */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001dfa:	8803      	ldrh	r3, [r0, #0]
 8001dfc:	b29b      	uxth	r3, r3
 8001dfe:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8001e02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001e06:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001e0a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001e0e:	b29b      	uxth	r3, r3
 8001e10:	8003      	strh	r3, [r0, #0]
        ep = &hpcd->IN_ep[0];

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001e12:	682a      	ldr	r2, [r5, #0]
 8001e14:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 8001e18:	b29b      	uxth	r3, r3
 8001e1a:	f895 1028 	ldrb.w	r1, [r5, #40]	; 0x28
 8001e1e:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8001e22:	3302      	adds	r3, #2
 8001e24:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8001e28:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	; 0x400
 8001e2c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001e30:	646b      	str	r3, [r5, #68]	; 0x44
        ep->xfer_buff += ep->xfer_count;
 8001e32:	6bea      	ldr	r2, [r5, #60]	; 0x3c
 8001e34:	4413      	add	r3, r2
 8001e36:	63eb      	str	r3, [r5, #60]	; 0x3c

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8001e38:	2100      	movs	r1, #0
 8001e3a:	4628      	mov	r0, r5
 8001e3c:	f002 fd58 	bl	80048f0 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8001e40:	f895 3024 	ldrb.w	r3, [r5, #36]	; 0x24
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	f000 8083 	beq.w	8001f50 <PCD_EP_ISR_Handler+0x15c>
 8001e4a:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d17f      	bne.n	8001f50 <PCD_EP_ISR_Handler+0x15c>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8001e50:	f895 3024 	ldrb.w	r3, [r5, #36]	; 0x24
 8001e54:	682a      	ldr	r2, [r5, #0]
 8001e56:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001e5a:	f8a2 304c 	strh.w	r3, [r2, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8001e5e:	2300      	movs	r3, #0
 8001e60:	f885 3024 	strb.w	r3, [r5, #36]	; 0x24
 8001e64:	e074      	b.n	8001f50 <PCD_EP_ISR_Handler+0x15c>
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);

        if ((wEPVal & USB_EP_SETUP) != 0U)
        {
          /* Get SETUP Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001e66:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8001e6a:	b29b      	uxth	r3, r3
 8001e6c:	f895 2128 	ldrb.w	r2, [r5, #296]	; 0x128
 8001e70:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8001e74:	3306      	adds	r3, #6
 8001e76:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8001e7a:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	; 0x400
 8001e7e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001e82:	f8c5 3144 	str.w	r3, [r5, #324]	; 0x144

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001e86:	f8b5 212e 	ldrh.w	r2, [r5, #302]	; 0x12e
 8001e8a:	f505 710c 	add.w	r1, r5, #560	; 0x230
 8001e8e:	f001 fda7 	bl	80039e0 <USB_ReadPMA>
                      ep->pmaadress, (uint16_t)ep->xfer_count);

          /* SETUP bit kept frozen while CTR_RX = 1*/
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001e92:	682a      	ldr	r2, [r5, #0]
 8001e94:	8813      	ldrh	r3, [r2, #0]
 8001e96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001e9a:	051b      	lsls	r3, r3, #20
 8001e9c:	0d1b      	lsrs	r3, r3, #20
 8001e9e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001ea2:	8013      	strh	r3, [r2, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8001ea4:	4628      	mov	r0, r5
 8001ea6:	f002 fd11 	bl	80048cc <HAL_PCD_SetupStageCallback>
 8001eaa:	e051      	b.n	8001f50 <PCD_EP_ISR_Handler+0x15c>
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8001eac:	2a3e      	cmp	r2, #62	; 0x3e
 8001eae:	d809      	bhi.n	8001ec4 <PCD_EP_ISR_Handler+0xd0>
 8001eb0:	0851      	lsrs	r1, r2, #1
 8001eb2:	f012 0f01 	tst.w	r2, #1
 8001eb6:	d000      	beq.n	8001eba <PCD_EP_ISR_Handler+0xc6>
 8001eb8:	3101      	adds	r1, #1
 8001eba:	0289      	lsls	r1, r1, #10
 8001ebc:	b289      	uxth	r1, r1
 8001ebe:	f8a3 140c 	strh.w	r1, [r3, #1036]	; 0x40c
 8001ec2:	e0a6      	b.n	8002012 <PCD_EP_ISR_Handler+0x21e>
 8001ec4:	0951      	lsrs	r1, r2, #5
 8001ec6:	f012 0f1f 	tst.w	r2, #31
 8001eca:	d100      	bne.n	8001ece <PCD_EP_ISR_Handler+0xda>
 8001ecc:	3901      	subs	r1, #1
 8001ece:	ea6f 62c1 	mvn.w	r2, r1, lsl #27
 8001ed2:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8001ed6:	b292      	uxth	r2, r2
 8001ed8:	f8a3 240c 	strh.w	r2, [r3, #1036]	; 0x40c
 8001edc:	e099      	b.n	8002012 <PCD_EP_ISR_Handler+0x21e>
    else
    {
      /* Decode and service non control endpoints interrupt  */

      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8001ede:	f830 3024 	ldrh.w	r3, [r0, r4, lsl #2]
 8001ee2:	b29f      	uxth	r7, r3
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001ee4:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8001ee8:	f040 80a2 	bne.w	8002030 <PCD_EP_ISR_Handler+0x23c>
          (void)HAL_PCD_EP_Receive(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
        }

      } /* if((wEPVal & EP_CTR_RX) */

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8001eec:	f017 0f80 	tst.w	r7, #128	; 0x80
 8001ef0:	d02e      	beq.n	8001f50 <PCD_EP_ISR_Handler+0x15c>
      {
        ep = &hpcd->IN_ep[epindex];

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8001ef2:	682a      	ldr	r2, [r5, #0]
 8001ef4:	f832 3024 	ldrh.w	r3, [r2, r4, lsl #2]
 8001ef8:	b29b      	uxth	r3, r3
 8001efa:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8001efe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001f02:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001f06:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001f0a:	b29b      	uxth	r3, r3
 8001f0c:	f822 3024 	strh.w	r3, [r2, r4, lsl #2]

        /*multi-packet on the NON control IN endpoint*/
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001f10:	682a      	ldr	r2, [r5, #0]
 8001f12:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 8001f16:	b29b      	uxth	r3, r3
 8001f18:	eb05 1044 	add.w	r0, r5, r4, lsl #5
 8001f1c:	f890 1028 	ldrb.w	r1, [r0, #40]	; 0x28
 8001f20:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8001f24:	3302      	adds	r3, #2
 8001f26:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8001f2a:	f8b3 2400 	ldrh.w	r2, [r3, #1024]	; 0x400
 8001f2e:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8001f32:	3402      	adds	r4, #2
 8001f34:	0166      	lsls	r6, r4, #5
 8001f36:	eb05 1444 	add.w	r4, r5, r4, lsl #5
 8001f3a:	6062      	str	r2, [r4, #4]
        ep->xfer_buff += ep->xfer_count;
 8001f3c:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8001f3e:	441a      	add	r2, r3
 8001f40:	63c2      	str	r2, [r0, #60]	; 0x3c

        /* Zero Length Packet? */
        if (ep->xfer_len == 0U)
 8001f42:	59ab      	ldr	r3, [r5, r6]
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	f040 8110 	bne.w	800216a <PCD_EP_ISR_Handler+0x376>
        {
          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001f4a:	4628      	mov	r0, r5
 8001f4c:	f002 fcd0 	bl	80048f0 <HAL_PCD_DataInStageCallback>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001f50:	6828      	ldr	r0, [r5, #0]
 8001f52:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
 8001f56:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8001f5a:	f000 810a 	beq.w	8002172 <PCD_EP_ISR_Handler+0x37e>
    wIstr = hpcd->Instance->ISTR;
 8001f5e:	f8b0 4044 	ldrh.w	r4, [r0, #68]	; 0x44
 8001f62:	b2a3      	uxth	r3, r4
    if (epindex == 0U)
 8001f64:	f014 040f 	ands.w	r4, r4, #15
 8001f68:	d1b9      	bne.n	8001ede <PCD_EP_ISR_Handler+0xea>
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8001f6a:	f013 0f10 	tst.w	r3, #16
 8001f6e:	f43f af44 	beq.w	8001dfa <PCD_EP_ISR_Handler+0x6>
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001f72:	8803      	ldrh	r3, [r0, #0]
 8001f74:	b29a      	uxth	r2, r3
        if ((wEPVal & USB_EP_SETUP) != 0U)
 8001f76:	f413 6f00 	tst.w	r3, #2048	; 0x800
 8001f7a:	f47f af74 	bne.w	8001e66 <PCD_EP_ISR_Handler+0x72>
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001f7e:	f412 4f00 	tst.w	r2, #32768	; 0x8000
 8001f82:	d0e5      	beq.n	8001f50 <PCD_EP_ISR_Handler+0x15c>
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001f84:	8803      	ldrh	r3, [r0, #0]
 8001f86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001f8a:	051b      	lsls	r3, r3, #20
 8001f8c:	0d1b      	lsrs	r3, r3, #20
 8001f8e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001f92:	8003      	strh	r3, [r0, #0]
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001f94:	6828      	ldr	r0, [r5, #0]
 8001f96:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8001f9a:	b29b      	uxth	r3, r3
 8001f9c:	f895 2128 	ldrb.w	r2, [r5, #296]	; 0x128
 8001fa0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8001fa4:	3306      	adds	r3, #6
 8001fa6:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8001faa:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	; 0x400
 8001fae:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001fb2:	f8c5 3144 	str.w	r3, [r5, #324]	; 0x144
          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8001fb6:	b18b      	cbz	r3, 8001fdc <PCD_EP_ISR_Handler+0x1e8>
 8001fb8:	f8d5 113c 	ldr.w	r1, [r5, #316]	; 0x13c
 8001fbc:	b171      	cbz	r1, 8001fdc <PCD_EP_ISR_Handler+0x1e8>
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001fbe:	f8b5 212e 	ldrh.w	r2, [r5, #302]	; 0x12e
 8001fc2:	f001 fd0d 	bl	80039e0 <USB_ReadPMA>
            ep->xfer_buff += ep->xfer_count;
 8001fc6:	f8d5 2144 	ldr.w	r2, [r5, #324]	; 0x144
 8001fca:	f8d5 313c 	ldr.w	r3, [r5, #316]	; 0x13c
 8001fce:	4413      	add	r3, r2
 8001fd0:	f8c5 313c 	str.w	r3, [r5, #316]	; 0x13c
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8001fd4:	2100      	movs	r1, #0
 8001fd6:	4628      	mov	r0, r5
 8001fd8:	f002 fc80 	bl	80048dc <HAL_PCD_DataOutStageCallback>
          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8001fdc:	682a      	ldr	r2, [r5, #0]
 8001fde:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 8001fe2:	b29b      	uxth	r3, r3
 8001fe4:	4413      	add	r3, r2
 8001fe6:	f8d5 2138 	ldr.w	r2, [r5, #312]	; 0x138
 8001fea:	2a00      	cmp	r2, #0
 8001fec:	f47f af5e 	bne.w	8001eac <PCD_EP_ISR_Handler+0xb8>
 8001ff0:	f8b3 240c 	ldrh.w	r2, [r3, #1036]	; 0x40c
 8001ff4:	b292      	uxth	r2, r2
 8001ff6:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 8001ffa:	b292      	uxth	r2, r2
 8001ffc:	f8a3 240c 	strh.w	r2, [r3, #1036]	; 0x40c
 8002000:	f8b3 240c 	ldrh.w	r2, [r3, #1036]	; 0x40c
 8002004:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 8002008:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 800200c:	b292      	uxth	r2, r2
 800200e:	f8a3 240c 	strh.w	r2, [r3, #1036]	; 0x40c
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8002012:	682a      	ldr	r2, [r5, #0]
 8002014:	8813      	ldrh	r3, [r2, #0]
 8002016:	b29b      	uxth	r3, r3
 8002018:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800201c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002020:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8002024:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002028:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800202c:	8013      	strh	r3, [r2, #0]
 800202e:	e78f      	b.n	8001f50 <PCD_EP_ISR_Handler+0x15c>
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8002030:	f830 3024 	ldrh.w	r3, [r0, r4, lsl #2]
 8002034:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002038:	051b      	lsls	r3, r3, #20
 800203a:	0d1b      	lsrs	r3, r3, #20
 800203c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002040:	f820 3024 	strh.w	r3, [r0, r4, lsl #2]
        if (ep->doublebuffer == 0U)
 8002044:	eb05 1344 	add.w	r3, r5, r4, lsl #5
 8002048:	f893 3134 	ldrb.w	r3, [r3, #308]	; 0x134
 800204c:	b9db      	cbnz	r3, 8002086 <PCD_EP_ISR_Handler+0x292>
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800204e:	6828      	ldr	r0, [r5, #0]
 8002050:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8002054:	b29b      	uxth	r3, r3
 8002056:	eb05 1244 	add.w	r2, r5, r4, lsl #5
 800205a:	f892 2128 	ldrb.w	r2, [r2, #296]	; 0x128
 800205e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8002062:	3306      	adds	r3, #6
 8002064:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8002068:	f8b3 6400 	ldrh.w	r6, [r3, #1024]	; 0x400
 800206c:	f3c6 0609 	ubfx	r6, r6, #0, #10
          if (count != 0U)
 8002070:	b396      	cbz	r6, 80020d8 <PCD_EP_ISR_Handler+0x2e4>
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8002072:	eb05 1144 	add.w	r1, r5, r4, lsl #5
 8002076:	4633      	mov	r3, r6
 8002078:	f8b1 212e 	ldrh.w	r2, [r1, #302]	; 0x12e
 800207c:	f8d1 113c 	ldr.w	r1, [r1, #316]	; 0x13c
 8002080:	f001 fcae 	bl	80039e0 <USB_ReadPMA>
 8002084:	e028      	b.n	80020d8 <PCD_EP_ISR_Handler+0x2e4>
          if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8002086:	6828      	ldr	r0, [r5, #0]
 8002088:	eb05 1344 	add.w	r3, r5, r4, lsl #5
 800208c:	f893 2128 	ldrb.w	r2, [r3, #296]	; 0x128
 8002090:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002094:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8002098:	d047      	beq.n	800212a <PCD_EP_ISR_Handler+0x336>
            count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800209a:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 800209e:	b29b      	uxth	r3, r3
 80020a0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80020a4:	3302      	adds	r3, #2
 80020a6:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 80020aa:	f8b3 6400 	ldrh.w	r6, [r3, #1024]	; 0x400
 80020ae:	f3c6 0609 	ubfx	r6, r6, #0, #10
            if (count != 0U)
 80020b2:	bb86      	cbnz	r6, 8002116 <PCD_EP_ISR_Handler+0x322>
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80020b4:	682a      	ldr	r2, [r5, #0]
 80020b6:	eb05 1344 	add.w	r3, r5, r4, lsl #5
 80020ba:	f893 1128 	ldrb.w	r1, [r3, #296]	; 0x128
 80020be:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 80020c2:	b29b      	uxth	r3, r3
 80020c4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80020c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80020cc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80020d0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80020d4:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
        ep->xfer_count += count;
 80020d8:	f104 030a 	add.w	r3, r4, #10
 80020dc:	0159      	lsls	r1, r3, #5
 80020de:	eb05 1343 	add.w	r3, r5, r3, lsl #5
 80020e2:	685a      	ldr	r2, [r3, #4]
 80020e4:	4432      	add	r2, r6
 80020e6:	605a      	str	r2, [r3, #4]
        ep->xfer_buff += count;
 80020e8:	eb05 1344 	add.w	r3, r5, r4, lsl #5
 80020ec:	f8d3 213c 	ldr.w	r2, [r3, #316]	; 0x13c
 80020f0:	4432      	add	r2, r6
 80020f2:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80020f6:	586b      	ldr	r3, [r5, r1]
 80020f8:	b12b      	cbz	r3, 8002106 <PCD_EP_ISR_Handler+0x312>
 80020fa:	eb05 1144 	add.w	r1, r5, r4, lsl #5
 80020fe:	f8d1 1138 	ldr.w	r1, [r1, #312]	; 0x138
 8002102:	428e      	cmp	r6, r1
 8002104:	d229      	bcs.n	800215a <PCD_EP_ISR_Handler+0x366>
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8002106:	eb05 1344 	add.w	r3, r5, r4, lsl #5
 800210a:	f893 1128 	ldrb.w	r1, [r3, #296]	; 0x128
 800210e:	4628      	mov	r0, r5
 8002110:	f002 fbe4 	bl	80048dc <HAL_PCD_DataOutStageCallback>
 8002114:	e6ea      	b.n	8001eec <PCD_EP_ISR_Handler+0xf8>
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002116:	eb05 1144 	add.w	r1, r5, r4, lsl #5
 800211a:	4633      	mov	r3, r6
 800211c:	f8b1 2130 	ldrh.w	r2, [r1, #304]	; 0x130
 8002120:	f8d1 113c 	ldr.w	r1, [r1, #316]	; 0x13c
 8002124:	f001 fc5c 	bl	80039e0 <USB_ReadPMA>
 8002128:	e7c4      	b.n	80020b4 <PCD_EP_ISR_Handler+0x2c0>
            count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800212a:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 800212e:	b29b      	uxth	r3, r3
 8002130:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8002134:	3306      	adds	r3, #6
 8002136:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 800213a:	f8b3 6400 	ldrh.w	r6, [r3, #1024]	; 0x400
 800213e:	f3c6 0609 	ubfx	r6, r6, #0, #10
            if (count != 0U)
 8002142:	2e00      	cmp	r6, #0
 8002144:	d0b6      	beq.n	80020b4 <PCD_EP_ISR_Handler+0x2c0>
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002146:	eb05 1144 	add.w	r1, r5, r4, lsl #5
 800214a:	4633      	mov	r3, r6
 800214c:	f8b1 2132 	ldrh.w	r2, [r1, #306]	; 0x132
 8002150:	f8d1 113c 	ldr.w	r1, [r1, #316]	; 0x13c
 8002154:	f001 fc44 	bl	80039e0 <USB_ReadPMA>
 8002158:	e7ac      	b.n	80020b4 <PCD_EP_ISR_Handler+0x2c0>
          (void)HAL_PCD_EP_Receive(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 800215a:	eb05 1144 	add.w	r1, r5, r4, lsl #5
 800215e:	f891 1128 	ldrb.w	r1, [r1, #296]	; 0x128
 8002162:	4628      	mov	r0, r5
 8002164:	f7ff fdf9 	bl	8001d5a <HAL_PCD_EP_Receive>
 8002168:	e6c0      	b.n	8001eec <PCD_EP_ISR_Handler+0xf8>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)HAL_PCD_EP_Transmit(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 800216a:	4628      	mov	r0, r5
 800216c:	f7ff fe1f 	bl	8001dae <HAL_PCD_EP_Transmit>
 8002170:	e6ee      	b.n	8001f50 <PCD_EP_ISR_Handler+0x15c>
        }
      }
    }
  }
  return HAL_OK;
}
 8002172:	2000      	movs	r0, #0
 8002174:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08002176 <HAL_PCD_IRQHandler>:
{
 8002176:	b510      	push	{r4, lr}
 8002178:	4604      	mov	r4, r0
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 800217a:	6800      	ldr	r0, [r0, #0]
 800217c:	f001 fa6d 	bl	800365a <USB_ReadInterrupts>
 8002180:	f410 4f00 	tst.w	r0, #32768	; 0x8000
 8002184:	d145      	bne.n	8002212 <HAL_PCD_IRQHandler+0x9c>
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8002186:	6820      	ldr	r0, [r4, #0]
 8002188:	f001 fa67 	bl	800365a <USB_ReadInterrupts>
 800218c:	f410 6f80 	tst.w	r0, #1024	; 0x400
 8002190:	d143      	bne.n	800221a <HAL_PCD_IRQHandler+0xa4>
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8002192:	6820      	ldr	r0, [r4, #0]
 8002194:	f001 fa61 	bl	800365a <USB_ReadInterrupts>
 8002198:	f410 4f80 	tst.w	r0, #16384	; 0x4000
 800219c:	d008      	beq.n	80021b0 <HAL_PCD_IRQHandler+0x3a>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 800219e:	6822      	ldr	r2, [r4, #0]
 80021a0:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 80021a4:	b29b      	uxth	r3, r3
 80021a6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80021aa:	b29b      	uxth	r3, r3
 80021ac:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 80021b0:	6820      	ldr	r0, [r4, #0]
 80021b2:	f001 fa52 	bl	800365a <USB_ReadInterrupts>
 80021b6:	f410 5f00 	tst.w	r0, #8192	; 0x2000
 80021ba:	d008      	beq.n	80021ce <HAL_PCD_IRQHandler+0x58>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80021bc:	6822      	ldr	r2, [r4, #0]
 80021be:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 80021c2:	b29b      	uxth	r3, r3
 80021c4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80021c8:	b29b      	uxth	r3, r3
 80021ca:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 80021ce:	6820      	ldr	r0, [r4, #0]
 80021d0:	f001 fa43 	bl	800365a <USB_ReadInterrupts>
 80021d4:	f410 5f80 	tst.w	r0, #4096	; 0x1000
 80021d8:	d130      	bne.n	800223c <HAL_PCD_IRQHandler+0xc6>
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 80021da:	6820      	ldr	r0, [r4, #0]
 80021dc:	f001 fa3d 	bl	800365a <USB_ReadInterrupts>
 80021e0:	f410 6f00 	tst.w	r0, #2048	; 0x800
 80021e4:	d149      	bne.n	800227a <HAL_PCD_IRQHandler+0x104>
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 80021e6:	6820      	ldr	r0, [r4, #0]
 80021e8:	f001 fa37 	bl	800365a <USB_ReadInterrupts>
 80021ec:	f410 7f00 	tst.w	r0, #512	; 0x200
 80021f0:	d16f      	bne.n	80022d2 <HAL_PCD_IRQHandler+0x15c>
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 80021f2:	6820      	ldr	r0, [r4, #0]
 80021f4:	f001 fa31 	bl	800365a <USB_ReadInterrupts>
 80021f8:	f410 7f80 	tst.w	r0, #256	; 0x100
 80021fc:	d008      	beq.n	8002210 <HAL_PCD_IRQHandler+0x9a>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80021fe:	6822      	ldr	r2, [r4, #0]
 8002200:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8002204:	b29b      	uxth	r3, r3
 8002206:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800220a:	b29b      	uxth	r3, r3
 800220c:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
}
 8002210:	bd10      	pop	{r4, pc}
    (void)PCD_EP_ISR_Handler(hpcd);
 8002212:	4620      	mov	r0, r4
 8002214:	f7ff fdee 	bl	8001df4 <PCD_EP_ISR_Handler>
 8002218:	e7b5      	b.n	8002186 <HAL_PCD_IRQHandler+0x10>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800221a:	6822      	ldr	r2, [r4, #0]
 800221c:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8002220:	b29b      	uxth	r3, r3
 8002222:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002226:	b29b      	uxth	r3, r3
 8002228:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    HAL_PCD_ResetCallback(hpcd);
 800222c:	4620      	mov	r0, r4
 800222e:	f002 fb6e 	bl	800490e <HAL_PCD_ResetCallback>
    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8002232:	2100      	movs	r1, #0
 8002234:	4620      	mov	r0, r4
 8002236:	f7ff fd12 	bl	8001c5e <HAL_PCD_SetAddress>
 800223a:	e7aa      	b.n	8002192 <HAL_PCD_IRQHandler+0x1c>
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 800223c:	6822      	ldr	r2, [r4, #0]
 800223e:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 8002242:	b29b      	uxth	r3, r3
 8002244:	f023 0304 	bic.w	r3, r3, #4
 8002248:	b29b      	uxth	r3, r3
 800224a:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 800224e:	6822      	ldr	r2, [r4, #0]
 8002250:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 8002254:	b29b      	uxth	r3, r3
 8002256:	f023 0308 	bic.w	r3, r3, #8
 800225a:	b29b      	uxth	r3, r3
 800225c:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    HAL_PCD_ResumeCallback(hpcd);
 8002260:	4620      	mov	r0, r4
 8002262:	f002 fb77 	bl	8004954 <HAL_PCD_ResumeCallback>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8002266:	6822      	ldr	r2, [r4, #0]
 8002268:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 800226c:	b29b      	uxth	r3, r3
 800226e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002272:	b29b      	uxth	r3, r3
 8002274:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
 8002278:	e7af      	b.n	80021da <HAL_PCD_IRQHandler+0x64>
    hpcd->Instance->CNTR |= USB_CNTR_FSUSP;
 800227a:	6822      	ldr	r2, [r4, #0]
 800227c:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 8002280:	b29b      	uxth	r3, r3
 8002282:	f043 0308 	orr.w	r3, r3, #8
 8002286:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 800228a:	6822      	ldr	r2, [r4, #0]
 800228c:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8002290:	b29b      	uxth	r3, r3
 8002292:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002296:	b29b      	uxth	r3, r3
 8002298:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    hpcd->Instance->CNTR |= USB_CNTR_LP_MODE;
 800229c:	6822      	ldr	r2, [r4, #0]
 800229e:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 80022a2:	b29b      	uxth	r3, r3
 80022a4:	f043 0304 	orr.w	r3, r3, #4
 80022a8:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 80022ac:	6820      	ldr	r0, [r4, #0]
 80022ae:	f001 f9d4 	bl	800365a <USB_ReadInterrupts>
 80022b2:	f410 5f80 	tst.w	r0, #4096	; 0x1000
 80022b6:	d008      	beq.n	80022ca <HAL_PCD_IRQHandler+0x154>
       __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80022b8:	6822      	ldr	r2, [r4, #0]
 80022ba:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 80022be:	b29b      	uxth	r3, r3
 80022c0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80022c4:	b29b      	uxth	r3, r3
 80022c6:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    HAL_PCD_SuspendCallback(hpcd);
 80022ca:	4620      	mov	r0, r4
 80022cc:	f002 fb32 	bl	8004934 <HAL_PCD_SuspendCallback>
 80022d0:	e789      	b.n	80021e6 <HAL_PCD_IRQHandler+0x70>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80022d2:	6822      	ldr	r2, [r4, #0]
 80022d4:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 80022d8:	b29b      	uxth	r3, r3
 80022da:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80022de:	b29b      	uxth	r3, r3
 80022e0:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    HAL_PCD_SOFCallback(hpcd);
 80022e4:	4620      	mov	r0, r4
 80022e6:	f002 fb0c 	bl	8004902 <HAL_PCD_SOFCallback>
 80022ea:	e782      	b.n	80021f2 <HAL_PCD_IRQHandler+0x7c>

080022ec <HAL_PCD_EP_SetStall>:
{
 80022ec:	b538      	push	{r3, r4, r5, lr}
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80022ee:	f001 0507 	and.w	r5, r1, #7
 80022f2:	6843      	ldr	r3, [r0, #4]
 80022f4:	429d      	cmp	r5, r3
 80022f6:	d82c      	bhi.n	8002352 <HAL_PCD_EP_SetStall+0x66>
 80022f8:	4604      	mov	r4, r0
  if ((0x80U & ep_addr) == 0x80U)
 80022fa:	f011 0f80 	tst.w	r1, #128	; 0x80
 80022fe:	d119      	bne.n	8002334 <HAL_PCD_EP_SetStall+0x48>
    ep = &hpcd->OUT_ep[ep_addr];
 8002300:	014b      	lsls	r3, r1, #5
 8002302:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8002306:	4401      	add	r1, r0
    ep->is_in = 0U;
 8002308:	4403      	add	r3, r0
 800230a:	2200      	movs	r2, #0
 800230c:	f883 2129 	strb.w	r2, [r3, #297]	; 0x129
  ep->is_stall = 1U;
 8002310:	2301      	movs	r3, #1
 8002312:	708b      	strb	r3, [r1, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002314:	700d      	strb	r5, [r1, #0]
  __HAL_LOCK(hpcd);
 8002316:	f894 3228 	ldrb.w	r3, [r4, #552]	; 0x228
 800231a:	2b01      	cmp	r3, #1
 800231c:	d01b      	beq.n	8002356 <HAL_PCD_EP_SetStall+0x6a>
 800231e:	2301      	movs	r3, #1
 8002320:	f884 3228 	strb.w	r3, [r4, #552]	; 0x228
  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002324:	6820      	ldr	r0, [r4, #0]
 8002326:	f001 f918 	bl	800355a <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800232a:	b165      	cbz	r5, 8002346 <HAL_PCD_EP_SetStall+0x5a>
  __HAL_UNLOCK(hpcd);
 800232c:	2000      	movs	r0, #0
 800232e:	f884 0228 	strb.w	r0, [r4, #552]	; 0x228
}
 8002332:	bd38      	pop	{r3, r4, r5, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002334:	016b      	lsls	r3, r5, #5
 8002336:	f103 0128 	add.w	r1, r3, #40	; 0x28
 800233a:	4401      	add	r1, r0
    ep->is_in = 1U;
 800233c:	4403      	add	r3, r0
 800233e:	2201      	movs	r2, #1
 8002340:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
 8002344:	e7e4      	b.n	8002310 <HAL_PCD_EP_SetStall+0x24>
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8002346:	f504 710c 	add.w	r1, r4, #560	; 0x230
 800234a:	6820      	ldr	r0, [r4, #0]
 800234c:	f001 f989 	bl	8003662 <USB_EP0_OutStart>
 8002350:	e7ec      	b.n	800232c <HAL_PCD_EP_SetStall+0x40>
    return HAL_ERROR;
 8002352:	2001      	movs	r0, #1
 8002354:	e7ed      	b.n	8002332 <HAL_PCD_EP_SetStall+0x46>
  __HAL_LOCK(hpcd);
 8002356:	2002      	movs	r0, #2
 8002358:	e7eb      	b.n	8002332 <HAL_PCD_EP_SetStall+0x46>

0800235a <HAL_PCD_EP_ClrStall>:
{
 800235a:	460b      	mov	r3, r1
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800235c:	f001 010f 	and.w	r1, r1, #15
 8002360:	6842      	ldr	r2, [r0, #4]
 8002362:	4291      	cmp	r1, r2
 8002364:	d82c      	bhi.n	80023c0 <HAL_PCD_EP_ClrStall+0x66>
{
 8002366:	b510      	push	{r4, lr}
 8002368:	4604      	mov	r4, r0
  if ((0x80U & ep_addr) == 0x80U)
 800236a:	f013 0f80 	tst.w	r3, #128	; 0x80
 800236e:	d11c      	bne.n	80023aa <HAL_PCD_EP_ClrStall+0x50>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002370:	f003 0207 	and.w	r2, r3, #7
 8002374:	0152      	lsls	r2, r2, #5
 8002376:	f502 7194 	add.w	r1, r2, #296	; 0x128
 800237a:	4401      	add	r1, r0
    ep->is_in = 0U;
 800237c:	4402      	add	r2, r0
 800237e:	2000      	movs	r0, #0
 8002380:	f882 0129 	strb.w	r0, [r2, #297]	; 0x129
  ep->is_stall = 0U;
 8002384:	2200      	movs	r2, #0
 8002386:	708a      	strb	r2, [r1, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002388:	f003 0307 	and.w	r3, r3, #7
 800238c:	700b      	strb	r3, [r1, #0]
  __HAL_LOCK(hpcd);
 800238e:	f894 3228 	ldrb.w	r3, [r4, #552]	; 0x228
 8002392:	2b01      	cmp	r3, #1
 8002394:	d016      	beq.n	80023c4 <HAL_PCD_EP_ClrStall+0x6a>
 8002396:	2301      	movs	r3, #1
 8002398:	f884 3228 	strb.w	r3, [r4, #552]	; 0x228
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800239c:	6820      	ldr	r0, [r4, #0]
 800239e:	f001 f901 	bl	80035a4 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80023a2:	2000      	movs	r0, #0
 80023a4:	f884 0228 	strb.w	r0, [r4, #552]	; 0x228
}
 80023a8:	bd10      	pop	{r4, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80023aa:	f003 0207 	and.w	r2, r3, #7
 80023ae:	0152      	lsls	r2, r2, #5
 80023b0:	f102 0128 	add.w	r1, r2, #40	; 0x28
 80023b4:	4401      	add	r1, r0
    ep->is_in = 1U;
 80023b6:	4402      	add	r2, r0
 80023b8:	2001      	movs	r0, #1
 80023ba:	f882 0029 	strb.w	r0, [r2, #41]	; 0x29
 80023be:	e7e1      	b.n	8002384 <HAL_PCD_EP_ClrStall+0x2a>
    return HAL_ERROR;
 80023c0:	2001      	movs	r0, #1
}
 80023c2:	4770      	bx	lr
  __HAL_LOCK(hpcd);
 80023c4:	2002      	movs	r0, #2
 80023c6:	e7ef      	b.n	80023a8 <HAL_PCD_EP_ClrStall+0x4e>

080023c8 <HAL_PCDEx_PMAConfig>:
                                       uint32_t pmaadress)
{
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80023c8:	f011 0f80 	tst.w	r1, #128	; 0x80
 80023cc:	d009      	beq.n	80023e2 <HAL_PCDEx_PMAConfig+0x1a>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80023ce:	f001 0107 	and.w	r1, r1, #7
 80023d2:	0149      	lsls	r1, r1, #5
 80023d4:	3128      	adds	r1, #40	; 0x28
 80023d6:	4401      	add	r1, r0
  {
    ep = &hpcd->OUT_ep[ep_addr];
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80023d8:	b942      	cbnz	r2, 80023ec <HAL_PCDEx_PMAConfig+0x24>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80023da:	730a      	strb	r2, [r1, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80023dc:	80cb      	strh	r3, [r1, #6]
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
  }

  return HAL_OK;
}
 80023de:	2000      	movs	r0, #0
 80023e0:	4770      	bx	lr
    ep = &hpcd->OUT_ep[ep_addr];
 80023e2:	0149      	lsls	r1, r1, #5
 80023e4:	f501 7194 	add.w	r1, r1, #296	; 0x128
 80023e8:	4401      	add	r1, r0
 80023ea:	e7f5      	b.n	80023d8 <HAL_PCDEx_PMAConfig+0x10>
    ep->doublebuffer = 1U;
 80023ec:	2201      	movs	r2, #1
 80023ee:	730a      	strb	r2, [r1, #12]
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80023f0:	810b      	strh	r3, [r1, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80023f2:	0c1b      	lsrs	r3, r3, #16
 80023f4:	814b      	strh	r3, [r1, #10]
 80023f6:	e7f2      	b.n	80023de <HAL_PCDEx_PMAConfig+0x16>

080023f8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80023f8:	b082      	sub	sp, #8
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80023fa:	4b08      	ldr	r3, [pc, #32]	; (800241c <RCC_Delay+0x24>)
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	4a08      	ldr	r2, [pc, #32]	; (8002420 <RCC_Delay+0x28>)
 8002400:	fba2 2303 	umull	r2, r3, r2, r3
 8002404:	0a5b      	lsrs	r3, r3, #9
 8002406:	fb00 f303 	mul.w	r3, r0, r3
 800240a:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 800240c:	bf00      	nop
  }
  while (Delay --);
 800240e:	9b01      	ldr	r3, [sp, #4]
 8002410:	1e5a      	subs	r2, r3, #1
 8002412:	9201      	str	r2, [sp, #4]
 8002414:	2b00      	cmp	r3, #0
 8002416:	d1f9      	bne.n	800240c <RCC_Delay+0x14>
}
 8002418:	b002      	add	sp, #8
 800241a:	4770      	bx	lr
 800241c:	20000000 	.word	0x20000000
 8002420:	10624dd3 	.word	0x10624dd3

08002424 <HAL_RCC_OscConfig>:
  if (RCC_OscInitStruct == NULL)
 8002424:	2800      	cmp	r0, #0
 8002426:	f000 81f1 	beq.w	800280c <HAL_RCC_OscConfig+0x3e8>
{
 800242a:	b570      	push	{r4, r5, r6, lr}
 800242c:	b082      	sub	sp, #8
 800242e:	4604      	mov	r4, r0
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002430:	6803      	ldr	r3, [r0, #0]
 8002432:	f013 0f01 	tst.w	r3, #1
 8002436:	d02c      	beq.n	8002492 <HAL_RCC_OscConfig+0x6e>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002438:	4b99      	ldr	r3, [pc, #612]	; (80026a0 <HAL_RCC_OscConfig+0x27c>)
 800243a:	685b      	ldr	r3, [r3, #4]
 800243c:	f003 030c 	and.w	r3, r3, #12
 8002440:	2b04      	cmp	r3, #4
 8002442:	d01d      	beq.n	8002480 <HAL_RCC_OscConfig+0x5c>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002444:	4b96      	ldr	r3, [pc, #600]	; (80026a0 <HAL_RCC_OscConfig+0x27c>)
 8002446:	685b      	ldr	r3, [r3, #4]
 8002448:	f003 030c 	and.w	r3, r3, #12
 800244c:	2b08      	cmp	r3, #8
 800244e:	d012      	beq.n	8002476 <HAL_RCC_OscConfig+0x52>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002450:	6863      	ldr	r3, [r4, #4]
 8002452:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002456:	d041      	beq.n	80024dc <HAL_RCC_OscConfig+0xb8>
 8002458:	2b00      	cmp	r3, #0
 800245a:	d155      	bne.n	8002508 <HAL_RCC_OscConfig+0xe4>
 800245c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002460:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8002464:	681a      	ldr	r2, [r3, #0]
 8002466:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800246a:	601a      	str	r2, [r3, #0]
 800246c:	681a      	ldr	r2, [r3, #0]
 800246e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002472:	601a      	str	r2, [r3, #0]
 8002474:	e037      	b.n	80024e6 <HAL_RCC_OscConfig+0xc2>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002476:	4b8a      	ldr	r3, [pc, #552]	; (80026a0 <HAL_RCC_OscConfig+0x27c>)
 8002478:	685b      	ldr	r3, [r3, #4]
 800247a:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 800247e:	d0e7      	beq.n	8002450 <HAL_RCC_OscConfig+0x2c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002480:	4b87      	ldr	r3, [pc, #540]	; (80026a0 <HAL_RCC_OscConfig+0x27c>)
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8002488:	d003      	beq.n	8002492 <HAL_RCC_OscConfig+0x6e>
 800248a:	6863      	ldr	r3, [r4, #4]
 800248c:	2b00      	cmp	r3, #0
 800248e:	f000 81bf 	beq.w	8002810 <HAL_RCC_OscConfig+0x3ec>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002492:	6823      	ldr	r3, [r4, #0]
 8002494:	f013 0f02 	tst.w	r3, #2
 8002498:	d075      	beq.n	8002586 <HAL_RCC_OscConfig+0x162>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800249a:	4b81      	ldr	r3, [pc, #516]	; (80026a0 <HAL_RCC_OscConfig+0x27c>)
 800249c:	685b      	ldr	r3, [r3, #4]
 800249e:	f013 0f0c 	tst.w	r3, #12
 80024a2:	d05f      	beq.n	8002564 <HAL_RCC_OscConfig+0x140>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80024a4:	4b7e      	ldr	r3, [pc, #504]	; (80026a0 <HAL_RCC_OscConfig+0x27c>)
 80024a6:	685b      	ldr	r3, [r3, #4]
 80024a8:	f003 030c 	and.w	r3, r3, #12
 80024ac:	2b08      	cmp	r3, #8
 80024ae:	d054      	beq.n	800255a <HAL_RCC_OscConfig+0x136>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80024b0:	6923      	ldr	r3, [r4, #16]
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	f000 808a 	beq.w	80025cc <HAL_RCC_OscConfig+0x1a8>
        __HAL_RCC_HSI_ENABLE();
 80024b8:	4b7a      	ldr	r3, [pc, #488]	; (80026a4 <HAL_RCC_OscConfig+0x280>)
 80024ba:	2201      	movs	r2, #1
 80024bc:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80024be:	f7ff f963 	bl	8001788 <HAL_GetTick>
 80024c2:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024c4:	4b76      	ldr	r3, [pc, #472]	; (80026a0 <HAL_RCC_OscConfig+0x27c>)
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	f013 0f02 	tst.w	r3, #2
 80024cc:	d175      	bne.n	80025ba <HAL_RCC_OscConfig+0x196>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80024ce:	f7ff f95b 	bl	8001788 <HAL_GetTick>
 80024d2:	1b40      	subs	r0, r0, r5
 80024d4:	2802      	cmp	r0, #2
 80024d6:	d9f5      	bls.n	80024c4 <HAL_RCC_OscConfig+0xa0>
            return HAL_TIMEOUT;
 80024d8:	2003      	movs	r0, #3
 80024da:	e19e      	b.n	800281a <HAL_RCC_OscConfig+0x3f6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80024dc:	4a70      	ldr	r2, [pc, #448]	; (80026a0 <HAL_RCC_OscConfig+0x27c>)
 80024de:	6813      	ldr	r3, [r2, #0]
 80024e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024e4:	6013      	str	r3, [r2, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80024e6:	6863      	ldr	r3, [r4, #4]
 80024e8:	b343      	cbz	r3, 800253c <HAL_RCC_OscConfig+0x118>
        tickstart = HAL_GetTick();
 80024ea:	f7ff f94d 	bl	8001788 <HAL_GetTick>
 80024ee:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024f0:	4b6b      	ldr	r3, [pc, #428]	; (80026a0 <HAL_RCC_OscConfig+0x27c>)
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80024f8:	d1cb      	bne.n	8002492 <HAL_RCC_OscConfig+0x6e>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80024fa:	f7ff f945 	bl	8001788 <HAL_GetTick>
 80024fe:	1b40      	subs	r0, r0, r5
 8002500:	2864      	cmp	r0, #100	; 0x64
 8002502:	d9f5      	bls.n	80024f0 <HAL_RCC_OscConfig+0xcc>
            return HAL_TIMEOUT;
 8002504:	2003      	movs	r0, #3
 8002506:	e188      	b.n	800281a <HAL_RCC_OscConfig+0x3f6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002508:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800250c:	d009      	beq.n	8002522 <HAL_RCC_OscConfig+0xfe>
 800250e:	4b64      	ldr	r3, [pc, #400]	; (80026a0 <HAL_RCC_OscConfig+0x27c>)
 8002510:	681a      	ldr	r2, [r3, #0]
 8002512:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002516:	601a      	str	r2, [r3, #0]
 8002518:	681a      	ldr	r2, [r3, #0]
 800251a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800251e:	601a      	str	r2, [r3, #0]
 8002520:	e7e1      	b.n	80024e6 <HAL_RCC_OscConfig+0xc2>
 8002522:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002526:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 800252a:	681a      	ldr	r2, [r3, #0]
 800252c:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8002530:	601a      	str	r2, [r3, #0]
 8002532:	681a      	ldr	r2, [r3, #0]
 8002534:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002538:	601a      	str	r2, [r3, #0]
 800253a:	e7d4      	b.n	80024e6 <HAL_RCC_OscConfig+0xc2>
        tickstart = HAL_GetTick();
 800253c:	f7ff f924 	bl	8001788 <HAL_GetTick>
 8002540:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002542:	4b57      	ldr	r3, [pc, #348]	; (80026a0 <HAL_RCC_OscConfig+0x27c>)
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800254a:	d0a2      	beq.n	8002492 <HAL_RCC_OscConfig+0x6e>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800254c:	f7ff f91c 	bl	8001788 <HAL_GetTick>
 8002550:	1b40      	subs	r0, r0, r5
 8002552:	2864      	cmp	r0, #100	; 0x64
 8002554:	d9f5      	bls.n	8002542 <HAL_RCC_OscConfig+0x11e>
            return HAL_TIMEOUT;
 8002556:	2003      	movs	r0, #3
 8002558:	e15f      	b.n	800281a <HAL_RCC_OscConfig+0x3f6>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800255a:	4b51      	ldr	r3, [pc, #324]	; (80026a0 <HAL_RCC_OscConfig+0x27c>)
 800255c:	685b      	ldr	r3, [r3, #4]
 800255e:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8002562:	d1a5      	bne.n	80024b0 <HAL_RCC_OscConfig+0x8c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002564:	4b4e      	ldr	r3, [pc, #312]	; (80026a0 <HAL_RCC_OscConfig+0x27c>)
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f013 0f02 	tst.w	r3, #2
 800256c:	d003      	beq.n	8002576 <HAL_RCC_OscConfig+0x152>
 800256e:	6923      	ldr	r3, [r4, #16]
 8002570:	2b01      	cmp	r3, #1
 8002572:	f040 814f 	bne.w	8002814 <HAL_RCC_OscConfig+0x3f0>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002576:	4a4a      	ldr	r2, [pc, #296]	; (80026a0 <HAL_RCC_OscConfig+0x27c>)
 8002578:	6813      	ldr	r3, [r2, #0]
 800257a:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800257e:	6961      	ldr	r1, [r4, #20]
 8002580:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8002584:	6013      	str	r3, [r2, #0]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002586:	6823      	ldr	r3, [r4, #0]
 8002588:	f013 0f08 	tst.w	r3, #8
 800258c:	d033      	beq.n	80025f6 <HAL_RCC_OscConfig+0x1d2>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800258e:	69a3      	ldr	r3, [r4, #24]
 8002590:	2b00      	cmp	r3, #0
 8002592:	d05c      	beq.n	800264e <HAL_RCC_OscConfig+0x22a>
      __HAL_RCC_LSI_ENABLE();
 8002594:	4b43      	ldr	r3, [pc, #268]	; (80026a4 <HAL_RCC_OscConfig+0x280>)
 8002596:	2201      	movs	r2, #1
 8002598:	f8c3 2480 	str.w	r2, [r3, #1152]	; 0x480
      tickstart = HAL_GetTick();
 800259c:	f7ff f8f4 	bl	8001788 <HAL_GetTick>
 80025a0:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80025a2:	4b3f      	ldr	r3, [pc, #252]	; (80026a0 <HAL_RCC_OscConfig+0x27c>)
 80025a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025a6:	f013 0f02 	tst.w	r3, #2
 80025aa:	d121      	bne.n	80025f0 <HAL_RCC_OscConfig+0x1cc>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80025ac:	f7ff f8ec 	bl	8001788 <HAL_GetTick>
 80025b0:	1b40      	subs	r0, r0, r5
 80025b2:	2802      	cmp	r0, #2
 80025b4:	d9f5      	bls.n	80025a2 <HAL_RCC_OscConfig+0x17e>
          return HAL_TIMEOUT;
 80025b6:	2003      	movs	r0, #3
 80025b8:	e12f      	b.n	800281a <HAL_RCC_OscConfig+0x3f6>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025ba:	4a39      	ldr	r2, [pc, #228]	; (80026a0 <HAL_RCC_OscConfig+0x27c>)
 80025bc:	6813      	ldr	r3, [r2, #0]
 80025be:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80025c2:	6961      	ldr	r1, [r4, #20]
 80025c4:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80025c8:	6013      	str	r3, [r2, #0]
 80025ca:	e7dc      	b.n	8002586 <HAL_RCC_OscConfig+0x162>
        __HAL_RCC_HSI_DISABLE();
 80025cc:	4b35      	ldr	r3, [pc, #212]	; (80026a4 <HAL_RCC_OscConfig+0x280>)
 80025ce:	2200      	movs	r2, #0
 80025d0:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80025d2:	f7ff f8d9 	bl	8001788 <HAL_GetTick>
 80025d6:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025d8:	4b31      	ldr	r3, [pc, #196]	; (80026a0 <HAL_RCC_OscConfig+0x27c>)
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f013 0f02 	tst.w	r3, #2
 80025e0:	d0d1      	beq.n	8002586 <HAL_RCC_OscConfig+0x162>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80025e2:	f7ff f8d1 	bl	8001788 <HAL_GetTick>
 80025e6:	1b40      	subs	r0, r0, r5
 80025e8:	2802      	cmp	r0, #2
 80025ea:	d9f5      	bls.n	80025d8 <HAL_RCC_OscConfig+0x1b4>
            return HAL_TIMEOUT;
 80025ec:	2003      	movs	r0, #3
 80025ee:	e114      	b.n	800281a <HAL_RCC_OscConfig+0x3f6>
      RCC_Delay(1);
 80025f0:	2001      	movs	r0, #1
 80025f2:	f7ff ff01 	bl	80023f8 <RCC_Delay>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80025f6:	6823      	ldr	r3, [r4, #0]
 80025f8:	f013 0f04 	tst.w	r3, #4
 80025fc:	f000 8096 	beq.w	800272c <HAL_RCC_OscConfig+0x308>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002600:	4b27      	ldr	r3, [pc, #156]	; (80026a0 <HAL_RCC_OscConfig+0x27c>)
 8002602:	69db      	ldr	r3, [r3, #28]
 8002604:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8002608:	d134      	bne.n	8002674 <HAL_RCC_OscConfig+0x250>
      __HAL_RCC_PWR_CLK_ENABLE();
 800260a:	4b25      	ldr	r3, [pc, #148]	; (80026a0 <HAL_RCC_OscConfig+0x27c>)
 800260c:	69da      	ldr	r2, [r3, #28]
 800260e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002612:	61da      	str	r2, [r3, #28]
 8002614:	69db      	ldr	r3, [r3, #28]
 8002616:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800261a:	9301      	str	r3, [sp, #4]
 800261c:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 800261e:	2501      	movs	r5, #1
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002620:	4b21      	ldr	r3, [pc, #132]	; (80026a8 <HAL_RCC_OscConfig+0x284>)
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f413 7f80 	tst.w	r3, #256	; 0x100
 8002628:	d026      	beq.n	8002678 <HAL_RCC_OscConfig+0x254>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800262a:	68e3      	ldr	r3, [r4, #12]
 800262c:	2b01      	cmp	r3, #1
 800262e:	d03d      	beq.n	80026ac <HAL_RCC_OscConfig+0x288>
 8002630:	2b00      	cmp	r3, #0
 8002632:	d153      	bne.n	80026dc <HAL_RCC_OscConfig+0x2b8>
 8002634:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002638:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 800263c:	6a1a      	ldr	r2, [r3, #32]
 800263e:	f022 0201 	bic.w	r2, r2, #1
 8002642:	621a      	str	r2, [r3, #32]
 8002644:	6a1a      	ldr	r2, [r3, #32]
 8002646:	f022 0204 	bic.w	r2, r2, #4
 800264a:	621a      	str	r2, [r3, #32]
 800264c:	e033      	b.n	80026b6 <HAL_RCC_OscConfig+0x292>
      __HAL_RCC_LSI_DISABLE();
 800264e:	4b15      	ldr	r3, [pc, #84]	; (80026a4 <HAL_RCC_OscConfig+0x280>)
 8002650:	2200      	movs	r2, #0
 8002652:	f8c3 2480 	str.w	r2, [r3, #1152]	; 0x480
      tickstart = HAL_GetTick();
 8002656:	f7ff f897 	bl	8001788 <HAL_GetTick>
 800265a:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800265c:	4b10      	ldr	r3, [pc, #64]	; (80026a0 <HAL_RCC_OscConfig+0x27c>)
 800265e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002660:	f013 0f02 	tst.w	r3, #2
 8002664:	d0c7      	beq.n	80025f6 <HAL_RCC_OscConfig+0x1d2>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002666:	f7ff f88f 	bl	8001788 <HAL_GetTick>
 800266a:	1b40      	subs	r0, r0, r5
 800266c:	2802      	cmp	r0, #2
 800266e:	d9f5      	bls.n	800265c <HAL_RCC_OscConfig+0x238>
          return HAL_TIMEOUT;
 8002670:	2003      	movs	r0, #3
 8002672:	e0d2      	b.n	800281a <HAL_RCC_OscConfig+0x3f6>
    FlagStatus       pwrclkchanged = RESET;
 8002674:	2500      	movs	r5, #0
 8002676:	e7d3      	b.n	8002620 <HAL_RCC_OscConfig+0x1fc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002678:	4a0b      	ldr	r2, [pc, #44]	; (80026a8 <HAL_RCC_OscConfig+0x284>)
 800267a:	6813      	ldr	r3, [r2, #0]
 800267c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002680:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8002682:	f7ff f881 	bl	8001788 <HAL_GetTick>
 8002686:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002688:	4b07      	ldr	r3, [pc, #28]	; (80026a8 <HAL_RCC_OscConfig+0x284>)
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f413 7f80 	tst.w	r3, #256	; 0x100
 8002690:	d1cb      	bne.n	800262a <HAL_RCC_OscConfig+0x206>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002692:	f7ff f879 	bl	8001788 <HAL_GetTick>
 8002696:	1b80      	subs	r0, r0, r6
 8002698:	2864      	cmp	r0, #100	; 0x64
 800269a:	d9f5      	bls.n	8002688 <HAL_RCC_OscConfig+0x264>
          return HAL_TIMEOUT;
 800269c:	2003      	movs	r0, #3
 800269e:	e0bc      	b.n	800281a <HAL_RCC_OscConfig+0x3f6>
 80026a0:	40021000 	.word	0x40021000
 80026a4:	42420000 	.word	0x42420000
 80026a8:	40007000 	.word	0x40007000
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80026ac:	4a5f      	ldr	r2, [pc, #380]	; (800282c <HAL_RCC_OscConfig+0x408>)
 80026ae:	6a13      	ldr	r3, [r2, #32]
 80026b0:	f043 0301 	orr.w	r3, r3, #1
 80026b4:	6213      	str	r3, [r2, #32]
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80026b6:	68e3      	ldr	r3, [r4, #12]
 80026b8:	b333      	cbz	r3, 8002708 <HAL_RCC_OscConfig+0x2e4>
      tickstart = HAL_GetTick();
 80026ba:	f7ff f865 	bl	8001788 <HAL_GetTick>
 80026be:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026c0:	4b5a      	ldr	r3, [pc, #360]	; (800282c <HAL_RCC_OscConfig+0x408>)
 80026c2:	6a1b      	ldr	r3, [r3, #32]
 80026c4:	f013 0f02 	tst.w	r3, #2
 80026c8:	d12f      	bne.n	800272a <HAL_RCC_OscConfig+0x306>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026ca:	f7ff f85d 	bl	8001788 <HAL_GetTick>
 80026ce:	1b80      	subs	r0, r0, r6
 80026d0:	f241 3388 	movw	r3, #5000	; 0x1388
 80026d4:	4298      	cmp	r0, r3
 80026d6:	d9f3      	bls.n	80026c0 <HAL_RCC_OscConfig+0x29c>
          return HAL_TIMEOUT;
 80026d8:	2003      	movs	r0, #3
 80026da:	e09e      	b.n	800281a <HAL_RCC_OscConfig+0x3f6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80026dc:	2b05      	cmp	r3, #5
 80026de:	d009      	beq.n	80026f4 <HAL_RCC_OscConfig+0x2d0>
 80026e0:	4b52      	ldr	r3, [pc, #328]	; (800282c <HAL_RCC_OscConfig+0x408>)
 80026e2:	6a1a      	ldr	r2, [r3, #32]
 80026e4:	f022 0201 	bic.w	r2, r2, #1
 80026e8:	621a      	str	r2, [r3, #32]
 80026ea:	6a1a      	ldr	r2, [r3, #32]
 80026ec:	f022 0204 	bic.w	r2, r2, #4
 80026f0:	621a      	str	r2, [r3, #32]
 80026f2:	e7e0      	b.n	80026b6 <HAL_RCC_OscConfig+0x292>
 80026f4:	4b4d      	ldr	r3, [pc, #308]	; (800282c <HAL_RCC_OscConfig+0x408>)
 80026f6:	6a1a      	ldr	r2, [r3, #32]
 80026f8:	f042 0204 	orr.w	r2, r2, #4
 80026fc:	621a      	str	r2, [r3, #32]
 80026fe:	6a1a      	ldr	r2, [r3, #32]
 8002700:	f042 0201 	orr.w	r2, r2, #1
 8002704:	621a      	str	r2, [r3, #32]
 8002706:	e7d6      	b.n	80026b6 <HAL_RCC_OscConfig+0x292>
      tickstart = HAL_GetTick();
 8002708:	f7ff f83e 	bl	8001788 <HAL_GetTick>
 800270c:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800270e:	4b47      	ldr	r3, [pc, #284]	; (800282c <HAL_RCC_OscConfig+0x408>)
 8002710:	6a1b      	ldr	r3, [r3, #32]
 8002712:	f013 0f02 	tst.w	r3, #2
 8002716:	d008      	beq.n	800272a <HAL_RCC_OscConfig+0x306>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002718:	f7ff f836 	bl	8001788 <HAL_GetTick>
 800271c:	1b80      	subs	r0, r0, r6
 800271e:	f241 3388 	movw	r3, #5000	; 0x1388
 8002722:	4298      	cmp	r0, r3
 8002724:	d9f3      	bls.n	800270e <HAL_RCC_OscConfig+0x2ea>
          return HAL_TIMEOUT;
 8002726:	2003      	movs	r0, #3
 8002728:	e077      	b.n	800281a <HAL_RCC_OscConfig+0x3f6>
    if (pwrclkchanged == SET)
 800272a:	b9e5      	cbnz	r5, 8002766 <HAL_RCC_OscConfig+0x342>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800272c:	69e3      	ldr	r3, [r4, #28]
 800272e:	2b00      	cmp	r3, #0
 8002730:	d072      	beq.n	8002818 <HAL_RCC_OscConfig+0x3f4>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002732:	4a3e      	ldr	r2, [pc, #248]	; (800282c <HAL_RCC_OscConfig+0x408>)
 8002734:	6852      	ldr	r2, [r2, #4]
 8002736:	f002 020c 	and.w	r2, r2, #12
 800273a:	2a08      	cmp	r2, #8
 800273c:	d056      	beq.n	80027ec <HAL_RCC_OscConfig+0x3c8>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800273e:	2b02      	cmp	r3, #2
 8002740:	d017      	beq.n	8002772 <HAL_RCC_OscConfig+0x34e>
        __HAL_RCC_PLL_DISABLE();
 8002742:	4b3b      	ldr	r3, [pc, #236]	; (8002830 <HAL_RCC_OscConfig+0x40c>)
 8002744:	2200      	movs	r2, #0
 8002746:	661a      	str	r2, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
 8002748:	f7ff f81e 	bl	8001788 <HAL_GetTick>
 800274c:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800274e:	4b37      	ldr	r3, [pc, #220]	; (800282c <HAL_RCC_OscConfig+0x408>)
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8002756:	d047      	beq.n	80027e8 <HAL_RCC_OscConfig+0x3c4>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002758:	f7ff f816 	bl	8001788 <HAL_GetTick>
 800275c:	1b00      	subs	r0, r0, r4
 800275e:	2802      	cmp	r0, #2
 8002760:	d9f5      	bls.n	800274e <HAL_RCC_OscConfig+0x32a>
            return HAL_TIMEOUT;
 8002762:	2003      	movs	r0, #3
 8002764:	e059      	b.n	800281a <HAL_RCC_OscConfig+0x3f6>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002766:	4a31      	ldr	r2, [pc, #196]	; (800282c <HAL_RCC_OscConfig+0x408>)
 8002768:	69d3      	ldr	r3, [r2, #28]
 800276a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800276e:	61d3      	str	r3, [r2, #28]
 8002770:	e7dc      	b.n	800272c <HAL_RCC_OscConfig+0x308>
        __HAL_RCC_PLL_DISABLE();
 8002772:	4b2f      	ldr	r3, [pc, #188]	; (8002830 <HAL_RCC_OscConfig+0x40c>)
 8002774:	2200      	movs	r2, #0
 8002776:	661a      	str	r2, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
 8002778:	f7ff f806 	bl	8001788 <HAL_GetTick>
 800277c:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800277e:	4b2b      	ldr	r3, [pc, #172]	; (800282c <HAL_RCC_OscConfig+0x408>)
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8002786:	d006      	beq.n	8002796 <HAL_RCC_OscConfig+0x372>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002788:	f7fe fffe 	bl	8001788 <HAL_GetTick>
 800278c:	1b40      	subs	r0, r0, r5
 800278e:	2802      	cmp	r0, #2
 8002790:	d9f5      	bls.n	800277e <HAL_RCC_OscConfig+0x35a>
            return HAL_TIMEOUT;
 8002792:	2003      	movs	r0, #3
 8002794:	e041      	b.n	800281a <HAL_RCC_OscConfig+0x3f6>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002796:	6a23      	ldr	r3, [r4, #32]
 8002798:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800279c:	d01a      	beq.n	80027d4 <HAL_RCC_OscConfig+0x3b0>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800279e:	4923      	ldr	r1, [pc, #140]	; (800282c <HAL_RCC_OscConfig+0x408>)
 80027a0:	684b      	ldr	r3, [r1, #4]
 80027a2:	f423 1374 	bic.w	r3, r3, #3997696	; 0x3d0000
 80027a6:	6a22      	ldr	r2, [r4, #32]
 80027a8:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80027aa:	4302      	orrs	r2, r0
 80027ac:	4313      	orrs	r3, r2
 80027ae:	604b      	str	r3, [r1, #4]
        __HAL_RCC_PLL_ENABLE();
 80027b0:	4b1f      	ldr	r3, [pc, #124]	; (8002830 <HAL_RCC_OscConfig+0x40c>)
 80027b2:	2201      	movs	r2, #1
 80027b4:	661a      	str	r2, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
 80027b6:	f7fe ffe7 	bl	8001788 <HAL_GetTick>
 80027ba:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80027bc:	4b1b      	ldr	r3, [pc, #108]	; (800282c <HAL_RCC_OscConfig+0x408>)
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80027c4:	d10e      	bne.n	80027e4 <HAL_RCC_OscConfig+0x3c0>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027c6:	f7fe ffdf 	bl	8001788 <HAL_GetTick>
 80027ca:	1b00      	subs	r0, r0, r4
 80027cc:	2802      	cmp	r0, #2
 80027ce:	d9f5      	bls.n	80027bc <HAL_RCC_OscConfig+0x398>
            return HAL_TIMEOUT;
 80027d0:	2003      	movs	r0, #3
 80027d2:	e022      	b.n	800281a <HAL_RCC_OscConfig+0x3f6>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80027d4:	4a15      	ldr	r2, [pc, #84]	; (800282c <HAL_RCC_OscConfig+0x408>)
 80027d6:	6853      	ldr	r3, [r2, #4]
 80027d8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80027dc:	68a1      	ldr	r1, [r4, #8]
 80027de:	430b      	orrs	r3, r1
 80027e0:	6053      	str	r3, [r2, #4]
 80027e2:	e7dc      	b.n	800279e <HAL_RCC_OscConfig+0x37a>
  return HAL_OK;
 80027e4:	2000      	movs	r0, #0
 80027e6:	e018      	b.n	800281a <HAL_RCC_OscConfig+0x3f6>
 80027e8:	2000      	movs	r0, #0
 80027ea:	e016      	b.n	800281a <HAL_RCC_OscConfig+0x3f6>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80027ec:	2b01      	cmp	r3, #1
 80027ee:	d016      	beq.n	800281e <HAL_RCC_OscConfig+0x3fa>
        pll_config = RCC->CFGR;
 80027f0:	4b0e      	ldr	r3, [pc, #56]	; (800282c <HAL_RCC_OscConfig+0x408>)
 80027f2:	685b      	ldr	r3, [r3, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80027f4:	f403 3180 	and.w	r1, r3, #65536	; 0x10000
 80027f8:	6a22      	ldr	r2, [r4, #32]
 80027fa:	4291      	cmp	r1, r2
 80027fc:	d111      	bne.n	8002822 <HAL_RCC_OscConfig+0x3fe>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80027fe:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002802:	6a62      	ldr	r2, [r4, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002804:	4293      	cmp	r3, r2
 8002806:	d10e      	bne.n	8002826 <HAL_RCC_OscConfig+0x402>
  return HAL_OK;
 8002808:	2000      	movs	r0, #0
 800280a:	e006      	b.n	800281a <HAL_RCC_OscConfig+0x3f6>
    return HAL_ERROR;
 800280c:	2001      	movs	r0, #1
}
 800280e:	4770      	bx	lr
        return HAL_ERROR;
 8002810:	2001      	movs	r0, #1
 8002812:	e002      	b.n	800281a <HAL_RCC_OscConfig+0x3f6>
        return HAL_ERROR;
 8002814:	2001      	movs	r0, #1
 8002816:	e000      	b.n	800281a <HAL_RCC_OscConfig+0x3f6>
  return HAL_OK;
 8002818:	2000      	movs	r0, #0
}
 800281a:	b002      	add	sp, #8
 800281c:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 800281e:	2001      	movs	r0, #1
 8002820:	e7fb      	b.n	800281a <HAL_RCC_OscConfig+0x3f6>
          return HAL_ERROR;
 8002822:	2001      	movs	r0, #1
 8002824:	e7f9      	b.n	800281a <HAL_RCC_OscConfig+0x3f6>
 8002826:	2001      	movs	r0, #1
 8002828:	e7f7      	b.n	800281a <HAL_RCC_OscConfig+0x3f6>
 800282a:	bf00      	nop
 800282c:	40021000 	.word	0x40021000
 8002830:	42420000 	.word	0x42420000

08002834 <HAL_RCC_GetSysClockFreq>:
{
 8002834:	b086      	sub	sp, #24
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002836:	4b17      	ldr	r3, [pc, #92]	; (8002894 <HAL_RCC_GetSysClockFreq+0x60>)
 8002838:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800283a:	f10d 0c18 	add.w	ip, sp, #24
 800283e:	e90c 000f 	stmdb	ip, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002842:	f240 2301 	movw	r3, #513	; 0x201
 8002846:	f8ad 3004 	strh.w	r3, [sp, #4]
  tmpreg = RCC->CFGR;
 800284a:	4b13      	ldr	r3, [pc, #76]	; (8002898 <HAL_RCC_GetSysClockFreq+0x64>)
 800284c:	685b      	ldr	r3, [r3, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 800284e:	f003 020c 	and.w	r2, r3, #12
 8002852:	2a08      	cmp	r2, #8
 8002854:	d002      	beq.n	800285c <HAL_RCC_GetSysClockFreq+0x28>
      sysclockfreq = HSE_VALUE;
 8002856:	4811      	ldr	r0, [pc, #68]	; (800289c <HAL_RCC_GetSysClockFreq+0x68>)
}
 8002858:	b006      	add	sp, #24
 800285a:	4770      	bx	lr
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800285c:	f3c3 4283 	ubfx	r2, r3, #18, #4
 8002860:	3218      	adds	r2, #24
 8002862:	446a      	add	r2, sp
 8002864:	f812 0c10 	ldrb.w	r0, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002868:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 800286c:	d00d      	beq.n	800288a <HAL_RCC_GetSysClockFreq+0x56>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800286e:	4b0a      	ldr	r3, [pc, #40]	; (8002898 <HAL_RCC_GetSysClockFreq+0x64>)
 8002870:	685b      	ldr	r3, [r3, #4]
 8002872:	f3c3 4340 	ubfx	r3, r3, #17, #1
 8002876:	3318      	adds	r3, #24
 8002878:	446b      	add	r3, sp
 800287a:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800287e:	4a07      	ldr	r2, [pc, #28]	; (800289c <HAL_RCC_GetSysClockFreq+0x68>)
 8002880:	fb02 f000 	mul.w	r0, r2, r0
 8002884:	fbb0 f0f3 	udiv	r0, r0, r3
 8002888:	e7e6      	b.n	8002858 <HAL_RCC_GetSysClockFreq+0x24>
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800288a:	4b05      	ldr	r3, [pc, #20]	; (80028a0 <HAL_RCC_GetSysClockFreq+0x6c>)
 800288c:	fb03 f000 	mul.w	r0, r3, r0
 8002890:	e7e2      	b.n	8002858 <HAL_RCC_GetSysClockFreq+0x24>
 8002892:	bf00      	nop
 8002894:	08009cb8 	.word	0x08009cb8
 8002898:	40021000 	.word	0x40021000
 800289c:	007a1200 	.word	0x007a1200
 80028a0:	003d0900 	.word	0x003d0900

080028a4 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 80028a4:	2800      	cmp	r0, #0
 80028a6:	f000 80a0 	beq.w	80029ea <HAL_RCC_ClockConfig+0x146>
{
 80028aa:	b570      	push	{r4, r5, r6, lr}
 80028ac:	460d      	mov	r5, r1
 80028ae:	4604      	mov	r4, r0
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80028b0:	4b52      	ldr	r3, [pc, #328]	; (80029fc <HAL_RCC_ClockConfig+0x158>)
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f003 0307 	and.w	r3, r3, #7
 80028b8:	428b      	cmp	r3, r1
 80028ba:	d20b      	bcs.n	80028d4 <HAL_RCC_ClockConfig+0x30>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028bc:	4a4f      	ldr	r2, [pc, #316]	; (80029fc <HAL_RCC_ClockConfig+0x158>)
 80028be:	6813      	ldr	r3, [r2, #0]
 80028c0:	f023 0307 	bic.w	r3, r3, #7
 80028c4:	430b      	orrs	r3, r1
 80028c6:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80028c8:	6813      	ldr	r3, [r2, #0]
 80028ca:	f003 0307 	and.w	r3, r3, #7
 80028ce:	428b      	cmp	r3, r1
 80028d0:	f040 808d 	bne.w	80029ee <HAL_RCC_ClockConfig+0x14a>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80028d4:	6823      	ldr	r3, [r4, #0]
 80028d6:	f013 0f02 	tst.w	r3, #2
 80028da:	d017      	beq.n	800290c <HAL_RCC_ClockConfig+0x68>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028dc:	f013 0f04 	tst.w	r3, #4
 80028e0:	d004      	beq.n	80028ec <HAL_RCC_ClockConfig+0x48>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80028e2:	4a47      	ldr	r2, [pc, #284]	; (8002a00 <HAL_RCC_ClockConfig+0x15c>)
 80028e4:	6853      	ldr	r3, [r2, #4]
 80028e6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80028ea:	6053      	str	r3, [r2, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028ec:	6823      	ldr	r3, [r4, #0]
 80028ee:	f013 0f08 	tst.w	r3, #8
 80028f2:	d004      	beq.n	80028fe <HAL_RCC_ClockConfig+0x5a>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80028f4:	4a42      	ldr	r2, [pc, #264]	; (8002a00 <HAL_RCC_ClockConfig+0x15c>)
 80028f6:	6853      	ldr	r3, [r2, #4]
 80028f8:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80028fc:	6053      	str	r3, [r2, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80028fe:	4a40      	ldr	r2, [pc, #256]	; (8002a00 <HAL_RCC_ClockConfig+0x15c>)
 8002900:	6853      	ldr	r3, [r2, #4]
 8002902:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002906:	68a1      	ldr	r1, [r4, #8]
 8002908:	430b      	orrs	r3, r1
 800290a:	6053      	str	r3, [r2, #4]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800290c:	6823      	ldr	r3, [r4, #0]
 800290e:	f013 0f01 	tst.w	r3, #1
 8002912:	d031      	beq.n	8002978 <HAL_RCC_ClockConfig+0xd4>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002914:	6863      	ldr	r3, [r4, #4]
 8002916:	2b01      	cmp	r3, #1
 8002918:	d020      	beq.n	800295c <HAL_RCC_ClockConfig+0xb8>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800291a:	2b02      	cmp	r3, #2
 800291c:	d025      	beq.n	800296a <HAL_RCC_ClockConfig+0xc6>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800291e:	4a38      	ldr	r2, [pc, #224]	; (8002a00 <HAL_RCC_ClockConfig+0x15c>)
 8002920:	6812      	ldr	r2, [r2, #0]
 8002922:	f012 0f02 	tst.w	r2, #2
 8002926:	d064      	beq.n	80029f2 <HAL_RCC_ClockConfig+0x14e>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002928:	4935      	ldr	r1, [pc, #212]	; (8002a00 <HAL_RCC_ClockConfig+0x15c>)
 800292a:	684a      	ldr	r2, [r1, #4]
 800292c:	f022 0203 	bic.w	r2, r2, #3
 8002930:	4313      	orrs	r3, r2
 8002932:	604b      	str	r3, [r1, #4]
    tickstart = HAL_GetTick();
 8002934:	f7fe ff28 	bl	8001788 <HAL_GetTick>
 8002938:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800293a:	4b31      	ldr	r3, [pc, #196]	; (8002a00 <HAL_RCC_ClockConfig+0x15c>)
 800293c:	685b      	ldr	r3, [r3, #4]
 800293e:	f003 030c 	and.w	r3, r3, #12
 8002942:	6862      	ldr	r2, [r4, #4]
 8002944:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8002948:	d016      	beq.n	8002978 <HAL_RCC_ClockConfig+0xd4>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800294a:	f7fe ff1d 	bl	8001788 <HAL_GetTick>
 800294e:	1b80      	subs	r0, r0, r6
 8002950:	f241 3388 	movw	r3, #5000	; 0x1388
 8002954:	4298      	cmp	r0, r3
 8002956:	d9f0      	bls.n	800293a <HAL_RCC_ClockConfig+0x96>
        return HAL_TIMEOUT;
 8002958:	2003      	movs	r0, #3
 800295a:	e045      	b.n	80029e8 <HAL_RCC_ClockConfig+0x144>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800295c:	4a28      	ldr	r2, [pc, #160]	; (8002a00 <HAL_RCC_ClockConfig+0x15c>)
 800295e:	6812      	ldr	r2, [r2, #0]
 8002960:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8002964:	d1e0      	bne.n	8002928 <HAL_RCC_ClockConfig+0x84>
        return HAL_ERROR;
 8002966:	2001      	movs	r0, #1
 8002968:	e03e      	b.n	80029e8 <HAL_RCC_ClockConfig+0x144>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800296a:	4a25      	ldr	r2, [pc, #148]	; (8002a00 <HAL_RCC_ClockConfig+0x15c>)
 800296c:	6812      	ldr	r2, [r2, #0]
 800296e:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8002972:	d1d9      	bne.n	8002928 <HAL_RCC_ClockConfig+0x84>
        return HAL_ERROR;
 8002974:	2001      	movs	r0, #1
 8002976:	e037      	b.n	80029e8 <HAL_RCC_ClockConfig+0x144>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002978:	4b20      	ldr	r3, [pc, #128]	; (80029fc <HAL_RCC_ClockConfig+0x158>)
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f003 0307 	and.w	r3, r3, #7
 8002980:	42ab      	cmp	r3, r5
 8002982:	d90a      	bls.n	800299a <HAL_RCC_ClockConfig+0xf6>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002984:	4a1d      	ldr	r2, [pc, #116]	; (80029fc <HAL_RCC_ClockConfig+0x158>)
 8002986:	6813      	ldr	r3, [r2, #0]
 8002988:	f023 0307 	bic.w	r3, r3, #7
 800298c:	432b      	orrs	r3, r5
 800298e:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002990:	6813      	ldr	r3, [r2, #0]
 8002992:	f003 0307 	and.w	r3, r3, #7
 8002996:	42ab      	cmp	r3, r5
 8002998:	d12d      	bne.n	80029f6 <HAL_RCC_ClockConfig+0x152>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800299a:	6823      	ldr	r3, [r4, #0]
 800299c:	f013 0f04 	tst.w	r3, #4
 80029a0:	d006      	beq.n	80029b0 <HAL_RCC_ClockConfig+0x10c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80029a2:	4a17      	ldr	r2, [pc, #92]	; (8002a00 <HAL_RCC_ClockConfig+0x15c>)
 80029a4:	6853      	ldr	r3, [r2, #4]
 80029a6:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80029aa:	68e1      	ldr	r1, [r4, #12]
 80029ac:	430b      	orrs	r3, r1
 80029ae:	6053      	str	r3, [r2, #4]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029b0:	6823      	ldr	r3, [r4, #0]
 80029b2:	f013 0f08 	tst.w	r3, #8
 80029b6:	d007      	beq.n	80029c8 <HAL_RCC_ClockConfig+0x124>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80029b8:	4a11      	ldr	r2, [pc, #68]	; (8002a00 <HAL_RCC_ClockConfig+0x15c>)
 80029ba:	6853      	ldr	r3, [r2, #4]
 80029bc:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 80029c0:	6921      	ldr	r1, [r4, #16]
 80029c2:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80029c6:	6053      	str	r3, [r2, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80029c8:	f7ff ff34 	bl	8002834 <HAL_RCC_GetSysClockFreq>
 80029cc:	4b0c      	ldr	r3, [pc, #48]	; (8002a00 <HAL_RCC_ClockConfig+0x15c>)
 80029ce:	685b      	ldr	r3, [r3, #4]
 80029d0:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80029d4:	4a0b      	ldr	r2, [pc, #44]	; (8002a04 <HAL_RCC_ClockConfig+0x160>)
 80029d6:	5cd3      	ldrb	r3, [r2, r3]
 80029d8:	40d8      	lsrs	r0, r3
 80029da:	4b0b      	ldr	r3, [pc, #44]	; (8002a08 <HAL_RCC_ClockConfig+0x164>)
 80029dc:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 80029de:	4b0b      	ldr	r3, [pc, #44]	; (8002a0c <HAL_RCC_ClockConfig+0x168>)
 80029e0:	6818      	ldr	r0, [r3, #0]
 80029e2:	f7fe fe8d 	bl	8001700 <HAL_InitTick>
  return HAL_OK;
 80029e6:	2000      	movs	r0, #0
}
 80029e8:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 80029ea:	2001      	movs	r0, #1
}
 80029ec:	4770      	bx	lr
    return HAL_ERROR;
 80029ee:	2001      	movs	r0, #1
 80029f0:	e7fa      	b.n	80029e8 <HAL_RCC_ClockConfig+0x144>
        return HAL_ERROR;
 80029f2:	2001      	movs	r0, #1
 80029f4:	e7f8      	b.n	80029e8 <HAL_RCC_ClockConfig+0x144>
    return HAL_ERROR;
 80029f6:	2001      	movs	r0, #1
 80029f8:	e7f6      	b.n	80029e8 <HAL_RCC_ClockConfig+0x144>
 80029fa:	bf00      	nop
 80029fc:	40022000 	.word	0x40022000
 8002a00:	40021000 	.word	0x40021000
 8002a04:	08009ca0 	.word	0x08009ca0
 8002a08:	20000000 	.word	0x20000000
 8002a0c:	20000008 	.word	0x20000008

08002a10 <HAL_RCC_GetHCLKFreq>:
}
 8002a10:	4b01      	ldr	r3, [pc, #4]	; (8002a18 <HAL_RCC_GetHCLKFreq+0x8>)
 8002a12:	6818      	ldr	r0, [r3, #0]
 8002a14:	4770      	bx	lr
 8002a16:	bf00      	nop
 8002a18:	20000000 	.word	0x20000000

08002a1c <HAL_RCC_GetPCLK1Freq>:
{
 8002a1c:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002a1e:	f7ff fff7 	bl	8002a10 <HAL_RCC_GetHCLKFreq>
 8002a22:	4b04      	ldr	r3, [pc, #16]	; (8002a34 <HAL_RCC_GetPCLK1Freq+0x18>)
 8002a24:	685b      	ldr	r3, [r3, #4]
 8002a26:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8002a2a:	4a03      	ldr	r2, [pc, #12]	; (8002a38 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8002a2c:	5cd3      	ldrb	r3, [r2, r3]
}
 8002a2e:	40d8      	lsrs	r0, r3
 8002a30:	bd08      	pop	{r3, pc}
 8002a32:	bf00      	nop
 8002a34:	40021000 	.word	0x40021000
 8002a38:	08009cb0 	.word	0x08009cb0

08002a3c <HAL_RCC_GetPCLK2Freq>:
{
 8002a3c:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002a3e:	f7ff ffe7 	bl	8002a10 <HAL_RCC_GetHCLKFreq>
 8002a42:	4b04      	ldr	r3, [pc, #16]	; (8002a54 <HAL_RCC_GetPCLK2Freq+0x18>)
 8002a44:	685b      	ldr	r3, [r3, #4]
 8002a46:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8002a4a:	4a03      	ldr	r2, [pc, #12]	; (8002a58 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8002a4c:	5cd3      	ldrb	r3, [r2, r3]
}
 8002a4e:	40d8      	lsrs	r0, r3
 8002a50:	bd08      	pop	{r3, pc}
 8002a52:	bf00      	nop
 8002a54:	40021000 	.word	0x40021000
 8002a58:	08009cb0 	.word	0x08009cb0

08002a5c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002a5c:	b570      	push	{r4, r5, r6, lr}
 8002a5e:	b082      	sub	sp, #8
 8002a60:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002a62:	6803      	ldr	r3, [r0, #0]
 8002a64:	f013 0f01 	tst.w	r3, #1
 8002a68:	d036      	beq.n	8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a6a:	4b3f      	ldr	r3, [pc, #252]	; (8002b68 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 8002a6c:	69db      	ldr	r3, [r3, #28]
 8002a6e:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8002a72:	d149      	bne.n	8002b08 <HAL_RCCEx_PeriphCLKConfig+0xac>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a74:	4b3c      	ldr	r3, [pc, #240]	; (8002b68 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 8002a76:	69da      	ldr	r2, [r3, #28]
 8002a78:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002a7c:	61da      	str	r2, [r3, #28]
 8002a7e:	69db      	ldr	r3, [r3, #28]
 8002a80:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a84:	9301      	str	r3, [sp, #4]
 8002a86:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8002a88:	2501      	movs	r5, #1
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a8a:	4b38      	ldr	r3, [pc, #224]	; (8002b6c <HAL_RCCEx_PeriphCLKConfig+0x110>)
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f413 7f80 	tst.w	r3, #256	; 0x100
 8002a92:	d03b      	beq.n	8002b0c <HAL_RCCEx_PeriphCLKConfig+0xb0>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002a94:	4b34      	ldr	r3, [pc, #208]	; (8002b68 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 8002a96:	6a1b      	ldr	r3, [r3, #32]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002a98:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8002a9c:	d013      	beq.n	8002ac6 <HAL_RCCEx_PeriphCLKConfig+0x6a>
 8002a9e:	6862      	ldr	r2, [r4, #4]
 8002aa0:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8002aa4:	429a      	cmp	r2, r3
 8002aa6:	d00e      	beq.n	8002ac6 <HAL_RCCEx_PeriphCLKConfig+0x6a>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002aa8:	4a2f      	ldr	r2, [pc, #188]	; (8002b68 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 8002aaa:	6a13      	ldr	r3, [r2, #32]
 8002aac:	f423 7040 	bic.w	r0, r3, #768	; 0x300
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002ab0:	492f      	ldr	r1, [pc, #188]	; (8002b70 <HAL_RCCEx_PeriphCLKConfig+0x114>)
 8002ab2:	2601      	movs	r6, #1
 8002ab4:	f8c1 6440 	str.w	r6, [r1, #1088]	; 0x440
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002ab8:	2600      	movs	r6, #0
 8002aba:	f8c1 6440 	str.w	r6, [r1, #1088]	; 0x440
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002abe:	6210      	str	r0, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002ac0:	f013 0f01 	tst.w	r3, #1
 8002ac4:	d136      	bne.n	8002b34 <HAL_RCCEx_PeriphCLKConfig+0xd8>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002ac6:	4a28      	ldr	r2, [pc, #160]	; (8002b68 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 8002ac8:	6a13      	ldr	r3, [r2, #32]
 8002aca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ace:	6861      	ldr	r1, [r4, #4]
 8002ad0:	430b      	orrs	r3, r1
 8002ad2:	6213      	str	r3, [r2, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002ad4:	2d00      	cmp	r5, #0
 8002ad6:	d13e      	bne.n	8002b56 <HAL_RCCEx_PeriphCLKConfig+0xfa>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002ad8:	6823      	ldr	r3, [r4, #0]
 8002ada:	f013 0f02 	tst.w	r3, #2
 8002ade:	d006      	beq.n	8002aee <HAL_RCCEx_PeriphCLKConfig+0x92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002ae0:	4a21      	ldr	r2, [pc, #132]	; (8002b68 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 8002ae2:	6853      	ldr	r3, [r2, #4]
 8002ae4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8002ae8:	68a1      	ldr	r1, [r4, #8]
 8002aea:	430b      	orrs	r3, r1
 8002aec:	6053      	str	r3, [r2, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002aee:	6823      	ldr	r3, [r4, #0]
 8002af0:	f013 0f10 	tst.w	r3, #16
 8002af4:	d034      	beq.n	8002b60 <HAL_RCCEx_PeriphCLKConfig+0x104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002af6:	4a1c      	ldr	r2, [pc, #112]	; (8002b68 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 8002af8:	6853      	ldr	r3, [r2, #4]
 8002afa:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8002afe:	68e1      	ldr	r1, [r4, #12]
 8002b00:	430b      	orrs	r3, r1
 8002b02:	6053      	str	r3, [r2, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002b04:	2000      	movs	r0, #0
 8002b06:	e02c      	b.n	8002b62 <HAL_RCCEx_PeriphCLKConfig+0x106>
    FlagStatus       pwrclkchanged = RESET;
 8002b08:	2500      	movs	r5, #0
 8002b0a:	e7be      	b.n	8002a8a <HAL_RCCEx_PeriphCLKConfig+0x2e>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002b0c:	4a17      	ldr	r2, [pc, #92]	; (8002b6c <HAL_RCCEx_PeriphCLKConfig+0x110>)
 8002b0e:	6813      	ldr	r3, [r2, #0]
 8002b10:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b14:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8002b16:	f7fe fe37 	bl	8001788 <HAL_GetTick>
 8002b1a:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b1c:	4b13      	ldr	r3, [pc, #76]	; (8002b6c <HAL_RCCEx_PeriphCLKConfig+0x110>)
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f413 7f80 	tst.w	r3, #256	; 0x100
 8002b24:	d1b6      	bne.n	8002a94 <HAL_RCCEx_PeriphCLKConfig+0x38>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b26:	f7fe fe2f 	bl	8001788 <HAL_GetTick>
 8002b2a:	1b80      	subs	r0, r0, r6
 8002b2c:	2864      	cmp	r0, #100	; 0x64
 8002b2e:	d9f5      	bls.n	8002b1c <HAL_RCCEx_PeriphCLKConfig+0xc0>
          return HAL_TIMEOUT;
 8002b30:	2003      	movs	r0, #3
 8002b32:	e016      	b.n	8002b62 <HAL_RCCEx_PeriphCLKConfig+0x106>
        tickstart = HAL_GetTick();
 8002b34:	f7fe fe28 	bl	8001788 <HAL_GetTick>
 8002b38:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b3a:	4b0b      	ldr	r3, [pc, #44]	; (8002b68 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 8002b3c:	6a1b      	ldr	r3, [r3, #32]
 8002b3e:	f013 0f02 	tst.w	r3, #2
 8002b42:	d1c0      	bne.n	8002ac6 <HAL_RCCEx_PeriphCLKConfig+0x6a>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b44:	f7fe fe20 	bl	8001788 <HAL_GetTick>
 8002b48:	1b80      	subs	r0, r0, r6
 8002b4a:	f241 3388 	movw	r3, #5000	; 0x1388
 8002b4e:	4298      	cmp	r0, r3
 8002b50:	d9f3      	bls.n	8002b3a <HAL_RCCEx_PeriphCLKConfig+0xde>
            return HAL_TIMEOUT;
 8002b52:	2003      	movs	r0, #3
 8002b54:	e005      	b.n	8002b62 <HAL_RCCEx_PeriphCLKConfig+0x106>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b56:	69d3      	ldr	r3, [r2, #28]
 8002b58:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b5c:	61d3      	str	r3, [r2, #28]
 8002b5e:	e7bb      	b.n	8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
  return HAL_OK;
 8002b60:	2000      	movs	r0, #0
}
 8002b62:	b002      	add	sp, #8
 8002b64:	bd70      	pop	{r4, r5, r6, pc}
 8002b66:	bf00      	nop
 8002b68:	40021000 	.word	0x40021000
 8002b6c:	40007000 	.word	0x40007000
 8002b70:	42420000 	.word	0x42420000

08002b74 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002b74:	6802      	ldr	r2, [r0, #0]
 8002b76:	68d3      	ldr	r3, [r2, #12]
 8002b78:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002b7c:	60d3      	str	r3, [r2, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002b7e:	6802      	ldr	r2, [r0, #0]
 8002b80:	6953      	ldr	r3, [r2, #20]
 8002b82:	f023 0301 	bic.w	r3, r3, #1
 8002b86:	6153      	str	r3, [r2, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002b88:	2320      	movs	r3, #32
 8002b8a:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
}
 8002b8e:	4770      	bx	lr

08002b90 <UART_Transmit_IT>:
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002b90:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8002b94:	b2db      	uxtb	r3, r3
 8002b96:	2b21      	cmp	r3, #33	; 0x21
 8002b98:	d001      	beq.n	8002b9e <UART_Transmit_IT+0xe>
    }
    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8002b9a:	2002      	movs	r0, #2
  }
}
 8002b9c:	4770      	bx	lr
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002b9e:	6883      	ldr	r3, [r0, #8]
 8002ba0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ba4:	d017      	beq.n	8002bd6 <UART_Transmit_IT+0x46>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002ba6:	6a03      	ldr	r3, [r0, #32]
 8002ba8:	1c5a      	adds	r2, r3, #1
 8002baa:	6202      	str	r2, [r0, #32]
 8002bac:	781a      	ldrb	r2, [r3, #0]
 8002bae:	6803      	ldr	r3, [r0, #0]
 8002bb0:	605a      	str	r2, [r3, #4]
    if (--huart->TxXferCount == 0U)
 8002bb2:	8cc3      	ldrh	r3, [r0, #38]	; 0x26
 8002bb4:	b29b      	uxth	r3, r3
 8002bb6:	3b01      	subs	r3, #1
 8002bb8:	b29b      	uxth	r3, r3
 8002bba:	84c3      	strh	r3, [r0, #38]	; 0x26
 8002bbc:	b94b      	cbnz	r3, 8002bd2 <UART_Transmit_IT+0x42>
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002bbe:	6802      	ldr	r2, [r0, #0]
 8002bc0:	68d3      	ldr	r3, [r2, #12]
 8002bc2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002bc6:	60d3      	str	r3, [r2, #12]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002bc8:	6802      	ldr	r2, [r0, #0]
 8002bca:	68d3      	ldr	r3, [r2, #12]
 8002bcc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002bd0:	60d3      	str	r3, [r2, #12]
    return HAL_OK;
 8002bd2:	2000      	movs	r0, #0
 8002bd4:	4770      	bx	lr
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8002bd6:	6a03      	ldr	r3, [r0, #32]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002bd8:	881b      	ldrh	r3, [r3, #0]
 8002bda:	6802      	ldr	r2, [r0, #0]
 8002bdc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002be0:	6053      	str	r3, [r2, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8002be2:	6903      	ldr	r3, [r0, #16]
 8002be4:	b91b      	cbnz	r3, 8002bee <UART_Transmit_IT+0x5e>
        huart->pTxBuffPtr += 2U;
 8002be6:	6a03      	ldr	r3, [r0, #32]
 8002be8:	3302      	adds	r3, #2
 8002bea:	6203      	str	r3, [r0, #32]
 8002bec:	e7e1      	b.n	8002bb2 <UART_Transmit_IT+0x22>
        huart->pTxBuffPtr += 1U;
 8002bee:	6a03      	ldr	r3, [r0, #32]
 8002bf0:	3301      	adds	r3, #1
 8002bf2:	6203      	str	r3, [r0, #32]
 8002bf4:	e7dd      	b.n	8002bb2 <UART_Transmit_IT+0x22>
	...

08002bf8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002bf8:	b538      	push	{r3, r4, r5, lr}
 8002bfa:	4604      	mov	r4, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002bfc:	6802      	ldr	r2, [r0, #0]
 8002bfe:	6913      	ldr	r3, [r2, #16]
 8002c00:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002c04:	68c1      	ldr	r1, [r0, #12]
 8002c06:	430b      	orrs	r3, r1
 8002c08:	6113      	str	r3, [r2, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002c0a:	6883      	ldr	r3, [r0, #8]
 8002c0c:	6902      	ldr	r2, [r0, #16]
 8002c0e:	4313      	orrs	r3, r2
 8002c10:	6942      	ldr	r2, [r0, #20]
 8002c12:	431a      	orrs	r2, r3
  MODIFY_REG(huart->Instance->CR1,
 8002c14:	6801      	ldr	r1, [r0, #0]
 8002c16:	68cb      	ldr	r3, [r1, #12]
 8002c18:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002c1c:	f023 030c 	bic.w	r3, r3, #12
 8002c20:	4313      	orrs	r3, r2
 8002c22:	60cb      	str	r3, [r1, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002c24:	6802      	ldr	r2, [r0, #0]
 8002c26:	6953      	ldr	r3, [r2, #20]
 8002c28:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c2c:	6981      	ldr	r1, [r0, #24]
 8002c2e:	430b      	orrs	r3, r1
 8002c30:	6153      	str	r3, [r2, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8002c32:	6802      	ldr	r2, [r0, #0]
 8002c34:	4b21      	ldr	r3, [pc, #132]	; (8002cbc <UART_SetConfig+0xc4>)
 8002c36:	429a      	cmp	r2, r3
 8002c38:	d01f      	beq.n	8002c7a <UART_SetConfig+0x82>
    pclk = HAL_RCC_GetPCLK2Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002c3a:	f7ff feef 	bl	8002a1c <HAL_RCC_GetPCLK1Freq>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002c3e:	eb00 0280 	add.w	r2, r0, r0, lsl #2
 8002c42:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8002c46:	6863      	ldr	r3, [r4, #4]
 8002c48:	009b      	lsls	r3, r3, #2
 8002c4a:	fbb2 f2f3 	udiv	r2, r2, r3
 8002c4e:	481c      	ldr	r0, [pc, #112]	; (8002cc0 <UART_SetConfig+0xc8>)
 8002c50:	fba0 3102 	umull	r3, r1, r0, r2
 8002c54:	0949      	lsrs	r1, r1, #5
 8002c56:	2364      	movs	r3, #100	; 0x64
 8002c58:	fb03 2311 	mls	r3, r3, r1, r2
 8002c5c:	011b      	lsls	r3, r3, #4
 8002c5e:	3332      	adds	r3, #50	; 0x32
 8002c60:	fba0 2303 	umull	r2, r3, r0, r3
 8002c64:	095b      	lsrs	r3, r3, #5
 8002c66:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002c6a:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8002c6e:	f003 030f 	and.w	r3, r3, #15
 8002c72:	6821      	ldr	r1, [r4, #0]
 8002c74:	4413      	add	r3, r2
 8002c76:	608b      	str	r3, [r1, #8]
  }
#endif /* USART_CR1_OVER8 */
}
 8002c78:	bd38      	pop	{r3, r4, r5, pc}
    pclk = HAL_RCC_GetPCLK2Freq();
 8002c7a:	f7ff fedf 	bl	8002a3c <HAL_RCC_GetPCLK2Freq>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002c7e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002c82:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002c86:	6863      	ldr	r3, [r4, #4]
 8002c88:	009b      	lsls	r3, r3, #2
 8002c8a:	fbb0 f0f3 	udiv	r0, r0, r3
 8002c8e:	4d0c      	ldr	r5, [pc, #48]	; (8002cc0 <UART_SetConfig+0xc8>)
 8002c90:	fba5 3200 	umull	r3, r2, r5, r0
 8002c94:	0951      	lsrs	r1, r2, #5
 8002c96:	2364      	movs	r3, #100	; 0x64
 8002c98:	fb03 0311 	mls	r3, r3, r1, r0
 8002c9c:	011b      	lsls	r3, r3, #4
 8002c9e:	3332      	adds	r3, #50	; 0x32
 8002ca0:	fba5 2303 	umull	r2, r3, r5, r3
 8002ca4:	095b      	lsrs	r3, r3, #5
 8002ca6:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002caa:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8002cae:	f003 030f 	and.w	r3, r3, #15
 8002cb2:	6821      	ldr	r1, [r4, #0]
 8002cb4:	4413      	add	r3, r2
 8002cb6:	608b      	str	r3, [r1, #8]
 8002cb8:	e7de      	b.n	8002c78 <UART_SetConfig+0x80>
 8002cba:	bf00      	nop
 8002cbc:	40013800 	.word	0x40013800
 8002cc0:	51eb851f 	.word	0x51eb851f

08002cc4 <HAL_UART_Init>:
  if (huart == NULL)
 8002cc4:	b358      	cbz	r0, 8002d1e <HAL_UART_Init+0x5a>
{
 8002cc6:	b510      	push	{r4, lr}
 8002cc8:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 8002cca:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8002cce:	b30b      	cbz	r3, 8002d14 <HAL_UART_Init+0x50>
  huart->gState = HAL_UART_STATE_BUSY;
 8002cd0:	2324      	movs	r3, #36	; 0x24
 8002cd2:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8002cd6:	6822      	ldr	r2, [r4, #0]
 8002cd8:	68d3      	ldr	r3, [r2, #12]
 8002cda:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002cde:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8002ce0:	4620      	mov	r0, r4
 8002ce2:	f7ff ff89 	bl	8002bf8 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002ce6:	6822      	ldr	r2, [r4, #0]
 8002ce8:	6913      	ldr	r3, [r2, #16]
 8002cea:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8002cee:	6113      	str	r3, [r2, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002cf0:	6822      	ldr	r2, [r4, #0]
 8002cf2:	6953      	ldr	r3, [r2, #20]
 8002cf4:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 8002cf8:	6153      	str	r3, [r2, #20]
  __HAL_UART_ENABLE(huart);
 8002cfa:	6822      	ldr	r2, [r4, #0]
 8002cfc:	68d3      	ldr	r3, [r2, #12]
 8002cfe:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002d02:	60d3      	str	r3, [r2, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d04:	2000      	movs	r0, #0
 8002d06:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8002d08:	2320      	movs	r3, #32
 8002d0a:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8002d0e:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
}
 8002d12:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8002d14:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 8002d18:	f7fe fc88 	bl	800162c <HAL_UART_MspInit>
 8002d1c:	e7d8      	b.n	8002cd0 <HAL_UART_Init+0xc>
    return HAL_ERROR;
 8002d1e:	2001      	movs	r0, #1
}
 8002d20:	4770      	bx	lr

08002d22 <HAL_UART_Receive_IT>:
  if (huart->RxState == HAL_UART_STATE_READY)
 8002d22:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 8002d26:	b2db      	uxtb	r3, r3
 8002d28:	2b20      	cmp	r3, #32
 8002d2a:	d123      	bne.n	8002d74 <HAL_UART_Receive_IT+0x52>
    if ((pData == NULL) || (Size == 0U))
 8002d2c:	b321      	cbz	r1, 8002d78 <HAL_UART_Receive_IT+0x56>
 8002d2e:	b32a      	cbz	r2, 8002d7c <HAL_UART_Receive_IT+0x5a>
    __HAL_LOCK(huart);
 8002d30:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8002d34:	2b01      	cmp	r3, #1
 8002d36:	d023      	beq.n	8002d80 <HAL_UART_Receive_IT+0x5e>
 8002d38:	2301      	movs	r3, #1
 8002d3a:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    huart->pRxBuffPtr = pData;
 8002d3e:	6281      	str	r1, [r0, #40]	; 0x28
    huart->RxXferSize = Size;
 8002d40:	8582      	strh	r2, [r0, #44]	; 0x2c
    huart->RxXferCount = Size;
 8002d42:	85c2      	strh	r2, [r0, #46]	; 0x2e
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d44:	2300      	movs	r3, #0
 8002d46:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002d48:	2222      	movs	r2, #34	; 0x22
 8002d4a:	f880 203a 	strb.w	r2, [r0, #58]	; 0x3a
    __HAL_UNLOCK(huart);
 8002d4e:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8002d52:	6801      	ldr	r1, [r0, #0]
 8002d54:	68ca      	ldr	r2, [r1, #12]
 8002d56:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002d5a:	60ca      	str	r2, [r1, #12]
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8002d5c:	6801      	ldr	r1, [r0, #0]
 8002d5e:	694a      	ldr	r2, [r1, #20]
 8002d60:	f042 0201 	orr.w	r2, r2, #1
 8002d64:	614a      	str	r2, [r1, #20]
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8002d66:	6801      	ldr	r1, [r0, #0]
 8002d68:	68ca      	ldr	r2, [r1, #12]
 8002d6a:	f042 0220 	orr.w	r2, r2, #32
 8002d6e:	60ca      	str	r2, [r1, #12]
    return HAL_OK;
 8002d70:	4618      	mov	r0, r3
 8002d72:	4770      	bx	lr
    return HAL_BUSY;
 8002d74:	2002      	movs	r0, #2
 8002d76:	4770      	bx	lr
      return HAL_ERROR;
 8002d78:	2001      	movs	r0, #1
 8002d7a:	4770      	bx	lr
 8002d7c:	2001      	movs	r0, #1
 8002d7e:	4770      	bx	lr
    __HAL_LOCK(huart);
 8002d80:	2002      	movs	r0, #2
}
 8002d82:	4770      	bx	lr

08002d84 <HAL_UART_TxCpltCallback>:
}
 8002d84:	4770      	bx	lr

08002d86 <UART_EndTransmit_IT>:
{
 8002d86:	b508      	push	{r3, lr}
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002d88:	6801      	ldr	r1, [r0, #0]
 8002d8a:	68ca      	ldr	r2, [r1, #12]
 8002d8c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002d90:	60ca      	str	r2, [r1, #12]
  huart->gState = HAL_UART_STATE_READY;
 8002d92:	2220      	movs	r2, #32
 8002d94:	f880 2039 	strb.w	r2, [r0, #57]	; 0x39
  HAL_UART_TxCpltCallback(huart);
 8002d98:	f7ff fff4 	bl	8002d84 <HAL_UART_TxCpltCallback>
}
 8002d9c:	2000      	movs	r0, #0
 8002d9e:	bd08      	pop	{r3, pc}

08002da0 <UART_Receive_IT>:
{
 8002da0:	b508      	push	{r3, lr}
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002da2:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 8002da6:	b2db      	uxtb	r3, r3
 8002da8:	2b22      	cmp	r3, #34	; 0x22
 8002daa:	d146      	bne.n	8002e3a <UART_Receive_IT+0x9a>
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002dac:	6883      	ldr	r3, [r0, #8]
 8002dae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002db2:	d00f      	beq.n	8002dd4 <UART_Receive_IT+0x34>
      if (huart->Init.Parity == UART_PARITY_NONE)
 8002db4:	6903      	ldr	r3, [r0, #16]
 8002db6:	bb0b      	cbnz	r3, 8002dfc <UART_Receive_IT+0x5c>
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002db8:	6803      	ldr	r3, [r0, #0]
 8002dba:	685a      	ldr	r2, [r3, #4]
 8002dbc:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8002dbe:	1c59      	adds	r1, r3, #1
 8002dc0:	6281      	str	r1, [r0, #40]	; 0x28
 8002dc2:	701a      	strb	r2, [r3, #0]
    if (--huart->RxXferCount == 0U)
 8002dc4:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 8002dc6:	b29b      	uxth	r3, r3
 8002dc8:	3b01      	subs	r3, #1
 8002dca:	b29b      	uxth	r3, r3
 8002dcc:	85c3      	strh	r3, [r0, #46]	; 0x2e
 8002dce:	b1f3      	cbz	r3, 8002e0e <UART_Receive_IT+0x6e>
    return HAL_OK;
 8002dd0:	2000      	movs	r0, #0
}
 8002dd2:	bd08      	pop	{r3, pc}
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8002dd4:	6a82      	ldr	r2, [r0, #40]	; 0x28
      if (huart->Init.Parity == UART_PARITY_NONE)
 8002dd6:	6903      	ldr	r3, [r0, #16]
 8002dd8:	b943      	cbnz	r3, 8002dec <UART_Receive_IT+0x4c>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002dda:	6803      	ldr	r3, [r0, #0]
 8002ddc:	685b      	ldr	r3, [r3, #4]
 8002dde:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002de2:	8013      	strh	r3, [r2, #0]
        huart->pRxBuffPtr += 2U;
 8002de4:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8002de6:	3302      	adds	r3, #2
 8002de8:	6283      	str	r3, [r0, #40]	; 0x28
 8002dea:	e7eb      	b.n	8002dc4 <UART_Receive_IT+0x24>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8002dec:	6803      	ldr	r3, [r0, #0]
 8002dee:	685b      	ldr	r3, [r3, #4]
 8002df0:	b2db      	uxtb	r3, r3
 8002df2:	8013      	strh	r3, [r2, #0]
        huart->pRxBuffPtr += 1U;
 8002df4:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8002df6:	3301      	adds	r3, #1
 8002df8:	6283      	str	r3, [r0, #40]	; 0x28
 8002dfa:	e7e3      	b.n	8002dc4 <UART_Receive_IT+0x24>
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002dfc:	6803      	ldr	r3, [r0, #0]
 8002dfe:	685b      	ldr	r3, [r3, #4]
 8002e00:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8002e02:	1c51      	adds	r1, r2, #1
 8002e04:	6281      	str	r1, [r0, #40]	; 0x28
 8002e06:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002e0a:	7013      	strb	r3, [r2, #0]
 8002e0c:	e7da      	b.n	8002dc4 <UART_Receive_IT+0x24>
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002e0e:	6802      	ldr	r2, [r0, #0]
 8002e10:	68d3      	ldr	r3, [r2, #12]
 8002e12:	f023 0320 	bic.w	r3, r3, #32
 8002e16:	60d3      	str	r3, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002e18:	6802      	ldr	r2, [r0, #0]
 8002e1a:	68d3      	ldr	r3, [r2, #12]
 8002e1c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002e20:	60d3      	str	r3, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002e22:	6802      	ldr	r2, [r0, #0]
 8002e24:	6953      	ldr	r3, [r2, #20]
 8002e26:	f023 0301 	bic.w	r3, r3, #1
 8002e2a:	6153      	str	r3, [r2, #20]
      huart->RxState = HAL_UART_STATE_READY;
 8002e2c:	2320      	movs	r3, #32
 8002e2e:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
      HAL_UART_RxCpltCallback(huart);
 8002e32:	f7fe facd 	bl	80013d0 <HAL_UART_RxCpltCallback>
      return HAL_OK;
 8002e36:	2000      	movs	r0, #0
 8002e38:	e7cb      	b.n	8002dd2 <UART_Receive_IT+0x32>
    return HAL_BUSY;
 8002e3a:	2002      	movs	r0, #2
 8002e3c:	e7c9      	b.n	8002dd2 <UART_Receive_IT+0x32>

08002e3e <HAL_UART_ErrorCallback>:
}
 8002e3e:	4770      	bx	lr

08002e40 <HAL_UART_IRQHandler>:
{
 8002e40:	b510      	push	{r4, lr}
 8002e42:	4604      	mov	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002e44:	6802      	ldr	r2, [r0, #0]
 8002e46:	6813      	ldr	r3, [r2, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002e48:	68d1      	ldr	r1, [r2, #12]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002e4a:	6952      	ldr	r2, [r2, #20]
  if (errorflags == RESET)
 8002e4c:	f013 000f 	ands.w	r0, r3, #15
 8002e50:	d105      	bne.n	8002e5e <HAL_UART_IRQHandler+0x1e>
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002e52:	f013 0f20 	tst.w	r3, #32
 8002e56:	d002      	beq.n	8002e5e <HAL_UART_IRQHandler+0x1e>
 8002e58:	f011 0f20 	tst.w	r1, #32
 8002e5c:	d113      	bne.n	8002e86 <HAL_UART_IRQHandler+0x46>
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002e5e:	b128      	cbz	r0, 8002e6c <HAL_UART_IRQHandler+0x2c>
 8002e60:	f012 0201 	ands.w	r2, r2, #1
 8002e64:	d113      	bne.n	8002e8e <HAL_UART_IRQHandler+0x4e>
 8002e66:	f411 7f90 	tst.w	r1, #288	; 0x120
 8002e6a:	d110      	bne.n	8002e8e <HAL_UART_IRQHandler+0x4e>
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002e6c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8002e70:	d002      	beq.n	8002e78 <HAL_UART_IRQHandler+0x38>
 8002e72:	f011 0f80 	tst.w	r1, #128	; 0x80
 8002e76:	d169      	bne.n	8002f4c <HAL_UART_IRQHandler+0x10c>
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002e78:	f013 0f40 	tst.w	r3, #64	; 0x40
 8002e7c:	d002      	beq.n	8002e84 <HAL_UART_IRQHandler+0x44>
 8002e7e:	f011 0f40 	tst.w	r1, #64	; 0x40
 8002e82:	d167      	bne.n	8002f54 <HAL_UART_IRQHandler+0x114>
}
 8002e84:	bd10      	pop	{r4, pc}
      UART_Receive_IT(huart);
 8002e86:	4620      	mov	r0, r4
 8002e88:	f7ff ff8a 	bl	8002da0 <UART_Receive_IT>
      return;
 8002e8c:	e7fa      	b.n	8002e84 <HAL_UART_IRQHandler+0x44>
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002e8e:	f013 0f01 	tst.w	r3, #1
 8002e92:	d006      	beq.n	8002ea2 <HAL_UART_IRQHandler+0x62>
 8002e94:	f411 7f80 	tst.w	r1, #256	; 0x100
 8002e98:	d003      	beq.n	8002ea2 <HAL_UART_IRQHandler+0x62>
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002e9a:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8002e9c:	f040 0001 	orr.w	r0, r0, #1
 8002ea0:	63e0      	str	r0, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002ea2:	f013 0f04 	tst.w	r3, #4
 8002ea6:	d004      	beq.n	8002eb2 <HAL_UART_IRQHandler+0x72>
 8002ea8:	b11a      	cbz	r2, 8002eb2 <HAL_UART_IRQHandler+0x72>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002eaa:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8002eac:	f040 0002 	orr.w	r0, r0, #2
 8002eb0:	63e0      	str	r0, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002eb2:	f013 0f02 	tst.w	r3, #2
 8002eb6:	d004      	beq.n	8002ec2 <HAL_UART_IRQHandler+0x82>
 8002eb8:	b11a      	cbz	r2, 8002ec2 <HAL_UART_IRQHandler+0x82>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002eba:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8002ebc:	f040 0004 	orr.w	r0, r0, #4
 8002ec0:	63e0      	str	r0, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002ec2:	f013 0f08 	tst.w	r3, #8
 8002ec6:	d004      	beq.n	8002ed2 <HAL_UART_IRQHandler+0x92>
 8002ec8:	b11a      	cbz	r2, 8002ed2 <HAL_UART_IRQHandler+0x92>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002eca:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8002ecc:	f042 0208 	orr.w	r2, r2, #8
 8002ed0:	63e2      	str	r2, [r4, #60]	; 0x3c
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002ed2:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8002ed4:	2a00      	cmp	r2, #0
 8002ed6:	d0d5      	beq.n	8002e84 <HAL_UART_IRQHandler+0x44>
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002ed8:	f013 0f20 	tst.w	r3, #32
 8002edc:	d002      	beq.n	8002ee4 <HAL_UART_IRQHandler+0xa4>
 8002ede:	f011 0f20 	tst.w	r1, #32
 8002ee2:	d121      	bne.n	8002f28 <HAL_UART_IRQHandler+0xe8>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002ee4:	6823      	ldr	r3, [r4, #0]
 8002ee6:	695b      	ldr	r3, [r3, #20]
 8002ee8:	f003 0340 	and.w	r3, r3, #64	; 0x40
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002eec:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8002eee:	f012 0f08 	tst.w	r2, #8
 8002ef2:	d100      	bne.n	8002ef6 <HAL_UART_IRQHandler+0xb6>
 8002ef4:	b323      	cbz	r3, 8002f40 <HAL_UART_IRQHandler+0x100>
        UART_EndRxTransfer(huart);
 8002ef6:	4620      	mov	r0, r4
 8002ef8:	f7ff fe3c 	bl	8002b74 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002efc:	6823      	ldr	r3, [r4, #0]
 8002efe:	695a      	ldr	r2, [r3, #20]
 8002f00:	f012 0f40 	tst.w	r2, #64	; 0x40
 8002f04:	d018      	beq.n	8002f38 <HAL_UART_IRQHandler+0xf8>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002f06:	695a      	ldr	r2, [r3, #20]
 8002f08:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002f0c:	615a      	str	r2, [r3, #20]
          if (huart->hdmarx != NULL)
 8002f0e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002f10:	b173      	cbz	r3, 8002f30 <HAL_UART_IRQHandler+0xf0>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002f12:	4a12      	ldr	r2, [pc, #72]	; (8002f5c <HAL_UART_IRQHandler+0x11c>)
 8002f14:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002f16:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8002f18:	f7fe fca8 	bl	800186c <HAL_DMA_Abort_IT>
 8002f1c:	2800      	cmp	r0, #0
 8002f1e:	d0b1      	beq.n	8002e84 <HAL_UART_IRQHandler+0x44>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002f20:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8002f22:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8002f24:	4798      	blx	r3
 8002f26:	e7ad      	b.n	8002e84 <HAL_UART_IRQHandler+0x44>
        UART_Receive_IT(huart);
 8002f28:	4620      	mov	r0, r4
 8002f2a:	f7ff ff39 	bl	8002da0 <UART_Receive_IT>
 8002f2e:	e7d9      	b.n	8002ee4 <HAL_UART_IRQHandler+0xa4>
            HAL_UART_ErrorCallback(huart);
 8002f30:	4620      	mov	r0, r4
 8002f32:	f7ff ff84 	bl	8002e3e <HAL_UART_ErrorCallback>
 8002f36:	e7a5      	b.n	8002e84 <HAL_UART_IRQHandler+0x44>
          HAL_UART_ErrorCallback(huart);
 8002f38:	4620      	mov	r0, r4
 8002f3a:	f7ff ff80 	bl	8002e3e <HAL_UART_ErrorCallback>
 8002f3e:	e7a1      	b.n	8002e84 <HAL_UART_IRQHandler+0x44>
        HAL_UART_ErrorCallback(huart);
 8002f40:	4620      	mov	r0, r4
 8002f42:	f7ff ff7c 	bl	8002e3e <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f46:	2300      	movs	r3, #0
 8002f48:	63e3      	str	r3, [r4, #60]	; 0x3c
    return;
 8002f4a:	e79b      	b.n	8002e84 <HAL_UART_IRQHandler+0x44>
    UART_Transmit_IT(huart);
 8002f4c:	4620      	mov	r0, r4
 8002f4e:	f7ff fe1f 	bl	8002b90 <UART_Transmit_IT>
    return;
 8002f52:	e797      	b.n	8002e84 <HAL_UART_IRQHandler+0x44>
    UART_EndTransmit_IT(huart);
 8002f54:	4620      	mov	r0, r4
 8002f56:	f7ff ff16 	bl	8002d86 <UART_EndTransmit_IT>
    return;
 8002f5a:	e793      	b.n	8002e84 <HAL_UART_IRQHandler+0x44>
 8002f5c:	08002f61 	.word	0x08002f61

08002f60 <UART_DMAAbortOnError>:
{
 8002f60:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002f62:	6a40      	ldr	r0, [r0, #36]	; 0x24
  huart->RxXferCount = 0x00U;
 8002f64:	2300      	movs	r3, #0
 8002f66:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002f68:	84c3      	strh	r3, [r0, #38]	; 0x26
  HAL_UART_ErrorCallback(huart);
 8002f6a:	f7ff ff68 	bl	8002e3e <HAL_UART_ErrorCallback>
}
 8002f6e:	bd08      	pop	{r3, pc}

08002f70 <USB_CoreInit>:
  * @param  cfg : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8002f70:	b084      	sub	sp, #16
 8002f72:	a801      	add	r0, sp, #4
 8002f74:	e880 000e 	stmia.w	r0, {r1, r2, r3}
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
}
 8002f78:	2000      	movs	r0, #0
 8002f7a:	b004      	add	sp, #16
 8002f7c:	4770      	bx	lr

08002f7e <USB_EnableGlobalInt>:
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR |= winterruptmask;
 8002f7e:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 8002f82:	b29b      	uxth	r3, r3
 8002f84:	f443 433f 	orr.w	r3, r3, #48896	; 0xbf00
 8002f88:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40

  return HAL_OK;
}
 8002f8c:	2000      	movs	r0, #0
 8002f8e:	4770      	bx	lr

08002f90 <USB_DisableGlobalInt>:
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= ~winterruptmask;
 8002f90:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 8002f94:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8002f98:	045b      	lsls	r3, r3, #17
 8002f9a:	0c5b      	lsrs	r3, r3, #17
 8002f9c:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40

  return HAL_OK;
}
 8002fa0:	2000      	movs	r0, #0
 8002fa2:	4770      	bx	lr

08002fa4 <USB_SetCurrentMode>:
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
}
 8002fa4:	2000      	movs	r0, #0
 8002fa6:	4770      	bx	lr

08002fa8 <USB_DevInit>:
  * @param  cfg  : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8002fa8:	b084      	sub	sp, #16
 8002faa:	b510      	push	{r4, lr}
 8002fac:	ac03      	add	r4, sp, #12
 8002fae:	e884 000e 	stmia.w	r4, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /*CNTR_FRES = 1*/
  USBx->CNTR = USB_CNTR_FRES;
 8002fb2:	2301      	movs	r3, #1
 8002fb4:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40

  /*CNTR_FRES = 0*/
  USBx->CNTR = 0;
 8002fb8:	2400      	movs	r4, #0
 8002fba:	f8a0 4040 	strh.w	r4, [r0, #64]	; 0x40

  /*Clear pending interrupts*/
  USBx->ISTR = 0;
 8002fbe:	f8a0 4044 	strh.w	r4, [r0, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8002fc2:	f8a0 4050 	strh.w	r4, [r0, #80]	; 0x50

  /* Enable USB Device Interrupt mask */
  (void)USB_EnableGlobalInt(USBx);
 8002fc6:	f7ff ffda 	bl	8002f7e <USB_EnableGlobalInt>

  return HAL_OK;
}
 8002fca:	4620      	mov	r0, r4
 8002fcc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002fd0:	b004      	add	sp, #16
 8002fd2:	4770      	bx	lr

08002fd4 <USB_ActivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8002fd4:	b510      	push	{r4, lr}
 8002fd6:	4603      	mov	r3, r0
  HAL_StatusTypeDef ret = HAL_OK;
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8002fd8:	f891 c000 	ldrb.w	ip, [r1]
 8002fdc:	f830 202c 	ldrh.w	r2, [r0, ip, lsl #2]
 8002fe0:	b292      	uxth	r2, r2
 8002fe2:	f422 42ec 	bic.w	r2, r2, #30208	; 0x7600
 8002fe6:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002fea:	b292      	uxth	r2, r2

  /* initialize Endpoint */
  switch (ep->type)
 8002fec:	78c8      	ldrb	r0, [r1, #3]
 8002fee:	2803      	cmp	r0, #3
 8002ff0:	d861      	bhi.n	80030b6 <USB_ActivateEndpoint+0xe2>
 8002ff2:	e8df f000 	tbb	[pc, r0]
 8002ff6:	5c55      	.short	0x5c55
 8002ff8:	5802      	.short	0x5802
 8002ffa:	2000      	movs	r0, #0
    default:
      ret = HAL_ERROR;
      break;
  }

  PCD_SET_ENDPOINT(USBx, ep->num, wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX);
 8002ffc:	f248 0e80 	movw	lr, #32896	; 0x8080
 8003000:	ea42 020e 	orr.w	r2, r2, lr
 8003004:	f823 202c 	strh.w	r2, [r3, ip, lsl #2]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8003008:	f891 c000 	ldrb.w	ip, [r1]
 800300c:	f833 202c 	ldrh.w	r2, [r3, ip, lsl #2]
 8003010:	b292      	uxth	r2, r2
 8003012:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8003016:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800301a:	ea4c 0202 	orr.w	r2, ip, r2
 800301e:	ea42 020e 	orr.w	r2, r2, lr
 8003022:	f823 202c 	strh.w	r2, [r3, ip, lsl #2]

  if (ep->doublebuffer == 0U)
 8003026:	7b0a      	ldrb	r2, [r1, #12]
 8003028:	2a00      	cmp	r2, #0
 800302a:	f040 80c4 	bne.w	80031b6 <USB_ActivateEndpoint+0x1e2>
  {
    if (ep->is_in != 0U)
 800302e:	784a      	ldrb	r2, [r1, #1]
 8003030:	2a00      	cmp	r2, #0
 8003032:	d051      	beq.n	80030d8 <USB_ActivateEndpoint+0x104>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8003034:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 8003038:	b292      	uxth	r2, r2
 800303a:	441a      	add	r2, r3
 800303c:	780c      	ldrb	r4, [r1, #0]
 800303e:	eb02 1204 	add.w	r2, r2, r4, lsl #4
 8003042:	f8b1 c006 	ldrh.w	ip, [r1, #6]
 8003046:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 800304a:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 800304e:	f8a2 c400 	strh.w	ip, [r2, #1024]	; 0x400
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003052:	780c      	ldrb	r4, [r1, #0]
 8003054:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8003058:	f012 0f40 	tst.w	r2, #64	; 0x40
 800305c:	d00c      	beq.n	8003078 <USB_ActivateEndpoint+0xa4>
 800305e:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8003062:	b292      	uxth	r2, r2
 8003064:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8003068:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800306c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003070:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8003074:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]

      if (ep->type != EP_TYPE_ISOC)
 8003078:	78ca      	ldrb	r2, [r1, #3]
 800307a:	2a01      	cmp	r2, #1
 800307c:	d01d      	beq.n	80030ba <USB_ActivateEndpoint+0xe6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800307e:	7809      	ldrb	r1, [r1, #0]
 8003080:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 8003084:	b292      	uxth	r2, r2
 8003086:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 800308a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800308e:	f082 0220 	eor.w	r2, r2, #32
 8003092:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003096:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800309a:	f823 2021 	strh.w	r2, [r3, r1, lsl #2]
 800309e:	e06a      	b.n	8003176 <USB_ActivateEndpoint+0x1a2>
      wEpRegVal |= USB_EP_CONTROL;
 80030a0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
      break;
 80030a4:	e7aa      	b.n	8002ffc <USB_ActivateEndpoint+0x28>
      wEpRegVal |= USB_EP_INTERRUPT;
 80030a6:	f442 62c0 	orr.w	r2, r2, #1536	; 0x600
  HAL_StatusTypeDef ret = HAL_OK;
 80030aa:	2000      	movs	r0, #0
      break;
 80030ac:	e7a6      	b.n	8002ffc <USB_ActivateEndpoint+0x28>
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80030ae:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
  HAL_StatusTypeDef ret = HAL_OK;
 80030b2:	2000      	movs	r0, #0
      break;
 80030b4:	e7a2      	b.n	8002ffc <USB_ActivateEndpoint+0x28>
      ret = HAL_ERROR;
 80030b6:	2001      	movs	r0, #1
 80030b8:	e7a0      	b.n	8002ffc <USB_ActivateEndpoint+0x28>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80030ba:	7809      	ldrb	r1, [r1, #0]
 80030bc:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 80030c0:	b292      	uxth	r2, r2
 80030c2:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 80030c6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80030ca:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80030ce:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80030d2:	f823 2021 	strh.w	r2, [r3, r1, lsl #2]
 80030d6:	e04e      	b.n	8003176 <USB_ActivateEndpoint+0x1a2>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80030d8:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 80030dc:	b292      	uxth	r2, r2
 80030de:	441a      	add	r2, r3
 80030e0:	780c      	ldrb	r4, [r1, #0]
 80030e2:	eb02 1204 	add.w	r2, r2, r4, lsl #4
 80030e6:	f8b1 c006 	ldrh.w	ip, [r1, #6]
 80030ea:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 80030ee:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 80030f2:	f8a2 c408 	strh.w	ip, [r2, #1032]	; 0x408
      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80030f6:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 80030fa:	b292      	uxth	r2, r2
 80030fc:	441a      	add	r2, r3
 80030fe:	780c      	ldrb	r4, [r1, #0]
 8003100:	eb02 1204 	add.w	r2, r2, r4, lsl #4
 8003104:	690c      	ldr	r4, [r1, #16]
 8003106:	bbbc      	cbnz	r4, 8003178 <USB_ActivateEndpoint+0x1a4>
 8003108:	f8b2 c40c 	ldrh.w	ip, [r2, #1036]	; 0x40c
 800310c:	fa1f fc8c 	uxth.w	ip, ip
 8003110:	f42c 4cf8 	bic.w	ip, ip, #31744	; 0x7c00
 8003114:	fa1f fc8c 	uxth.w	ip, ip
 8003118:	f8a2 c40c 	strh.w	ip, [r2, #1036]	; 0x40c
 800311c:	f8b2 c40c 	ldrh.w	ip, [r2, #1036]	; 0x40c
 8003120:	ea6f 4c4c 	mvn.w	ip, ip, lsl #17
 8003124:	ea6f 4c5c 	mvn.w	ip, ip, lsr #17
 8003128:	fa1f fc8c 	uxth.w	ip, ip
 800312c:	f8a2 c40c 	strh.w	ip, [r2, #1036]	; 0x40c
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003130:	780c      	ldrb	r4, [r1, #0]
 8003132:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8003136:	f412 4f80 	tst.w	r2, #16384	; 0x4000
 800313a:	d00c      	beq.n	8003156 <USB_ActivateEndpoint+0x182>
 800313c:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8003140:	b292      	uxth	r2, r2
 8003142:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8003146:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800314a:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 800314e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003152:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8003156:	7809      	ldrb	r1, [r1, #0]
 8003158:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 800315c:	b292      	uxth	r2, r2
 800315e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003162:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003166:	f482 5240 	eor.w	r2, r2, #12288	; 0x3000
 800316a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800316e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003172:	f823 2021 	strh.w	r2, [r3, r1, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
    }
  }

  return ret;
}
 8003176:	bd10      	pop	{r4, pc}
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8003178:	2c3e      	cmp	r4, #62	; 0x3e
 800317a:	d80d      	bhi.n	8003198 <USB_ActivateEndpoint+0x1c4>
 800317c:	ea4f 0c54 	mov.w	ip, r4, lsr #1
 8003180:	f014 0f01 	tst.w	r4, #1
 8003184:	d001      	beq.n	800318a <USB_ActivateEndpoint+0x1b6>
 8003186:	f10c 0c01 	add.w	ip, ip, #1
 800318a:	ea4f 2c8c 	mov.w	ip, ip, lsl #10
 800318e:	fa1f fc8c 	uxth.w	ip, ip
 8003192:	f8a2 c40c 	strh.w	ip, [r2, #1036]	; 0x40c
 8003196:	e7cb      	b.n	8003130 <USB_ActivateEndpoint+0x15c>
 8003198:	ea4f 1c54 	mov.w	ip, r4, lsr #5
 800319c:	f014 0f1f 	tst.w	r4, #31
 80031a0:	d101      	bne.n	80031a6 <USB_ActivateEndpoint+0x1d2>
 80031a2:	f10c 3cff 	add.w	ip, ip, #4294967295
 80031a6:	ea6f 64cc 	mvn.w	r4, ip, lsl #27
 80031aa:	ea6f 4454 	mvn.w	r4, r4, lsr #17
 80031ae:	b2a4      	uxth	r4, r4
 80031b0:	f8a2 440c 	strh.w	r4, [r2, #1036]	; 0x40c
 80031b4:	e7bc      	b.n	8003130 <USB_ActivateEndpoint+0x15c>
    PCD_SET_EP_DBUF(USBx, ep->num);
 80031b6:	f891 c000 	ldrb.w	ip, [r1]
 80031ba:	f833 202c 	ldrh.w	r2, [r3, ip, lsl #2]
 80031be:	b292      	uxth	r2, r2
 80031c0:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 80031c4:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80031c8:	f442 4201 	orr.w	r2, r2, #33024	; 0x8100
 80031cc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80031d0:	f823 202c 	strh.w	r2, [r3, ip, lsl #2]
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 80031d4:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 80031d8:	b292      	uxth	r2, r2
 80031da:	441a      	add	r2, r3
 80031dc:	f891 c000 	ldrb.w	ip, [r1]
 80031e0:	eb02 120c 	add.w	r2, r2, ip, lsl #4
 80031e4:	f8b1 c008 	ldrh.w	ip, [r1, #8]
 80031e8:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 80031ec:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 80031f0:	f8a2 c400 	strh.w	ip, [r2, #1024]	; 0x400
 80031f4:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 80031f8:	b292      	uxth	r2, r2
 80031fa:	441a      	add	r2, r3
 80031fc:	f891 c000 	ldrb.w	ip, [r1]
 8003200:	eb02 120c 	add.w	r2, r2, ip, lsl #4
 8003204:	f8b1 c00a 	ldrh.w	ip, [r1, #10]
 8003208:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 800320c:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 8003210:	f8a2 c408 	strh.w	ip, [r2, #1032]	; 0x408
    if (ep->is_in == 0U)
 8003214:	784a      	ldrb	r2, [r1, #1]
 8003216:	2a00      	cmp	r2, #0
 8003218:	d14f      	bne.n	80032ba <USB_ActivateEndpoint+0x2e6>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800321a:	780c      	ldrb	r4, [r1, #0]
 800321c:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8003220:	f412 4f80 	tst.w	r2, #16384	; 0x4000
 8003224:	d00c      	beq.n	8003240 <USB_ActivateEndpoint+0x26c>
 8003226:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 800322a:	b292      	uxth	r2, r2
 800322c:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8003230:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003234:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8003238:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800323c:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003240:	780c      	ldrb	r4, [r1, #0]
 8003242:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8003246:	f012 0f40 	tst.w	r2, #64	; 0x40
 800324a:	d00c      	beq.n	8003266 <USB_ActivateEndpoint+0x292>
 800324c:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8003250:	b292      	uxth	r2, r2
 8003252:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8003256:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800325a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800325e:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8003262:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_TX_DTOG(USBx, ep->num);
 8003266:	780c      	ldrb	r4, [r1, #0]
 8003268:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 800326c:	b292      	uxth	r2, r2
 800326e:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8003272:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003276:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800327a:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 800327e:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8003282:	f891 c000 	ldrb.w	ip, [r1]
 8003286:	f833 202c 	ldrh.w	r2, [r3, ip, lsl #2]
 800328a:	b292      	uxth	r2, r2
 800328c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003290:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003294:	f482 5240 	eor.w	r2, r2, #12288	; 0x3000
 8003298:	f248 0480 	movw	r4, #32896	; 0x8080
 800329c:	4322      	orrs	r2, r4
 800329e:	f823 202c 	strh.w	r2, [r3, ip, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80032a2:	7809      	ldrb	r1, [r1, #0]
 80032a4:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 80032a8:	b292      	uxth	r2, r2
 80032aa:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 80032ae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80032b2:	4322      	orrs	r2, r4
 80032b4:	f823 2021 	strh.w	r2, [r3, r1, lsl #2]
 80032b8:	e75d      	b.n	8003176 <USB_ActivateEndpoint+0x1a2>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80032ba:	780c      	ldrb	r4, [r1, #0]
 80032bc:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 80032c0:	f412 4f80 	tst.w	r2, #16384	; 0x4000
 80032c4:	d00c      	beq.n	80032e0 <USB_ActivateEndpoint+0x30c>
 80032c6:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 80032ca:	b292      	uxth	r2, r2
 80032cc:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 80032d0:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80032d4:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 80032d8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80032dc:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80032e0:	780c      	ldrb	r4, [r1, #0]
 80032e2:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 80032e6:	f012 0f40 	tst.w	r2, #64	; 0x40
 80032ea:	d00c      	beq.n	8003306 <USB_ActivateEndpoint+0x332>
 80032ec:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 80032f0:	b292      	uxth	r2, r2
 80032f2:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 80032f6:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80032fa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80032fe:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8003302:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_RX_DTOG(USBx, ep->num);
 8003306:	780c      	ldrb	r4, [r1, #0]
 8003308:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 800330c:	b292      	uxth	r2, r2
 800330e:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8003312:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003316:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 800331a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800331e:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      if (ep->type != EP_TYPE_ISOC)
 8003322:	78ca      	ldrb	r2, [r1, #3]
 8003324:	2a01      	cmp	r2, #1
 8003326:	d01e      	beq.n	8003366 <USB_ActivateEndpoint+0x392>
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8003328:	780c      	ldrb	r4, [r1, #0]
 800332a:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 800332e:	b292      	uxth	r2, r2
 8003330:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8003334:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003338:	f082 0220 	eor.w	r2, r2, #32
 800333c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003340:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003344:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003348:	7809      	ldrb	r1, [r1, #0]
 800334a:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 800334e:	b292      	uxth	r2, r2
 8003350:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003354:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003358:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800335c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003360:	f823 2021 	strh.w	r2, [r3, r1, lsl #2]
 8003364:	e707      	b.n	8003176 <USB_ActivateEndpoint+0x1a2>
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003366:	780c      	ldrb	r4, [r1, #0]
 8003368:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 800336c:	b292      	uxth	r2, r2
 800336e:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8003372:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003376:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800337a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800337e:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
 8003382:	e7e1      	b.n	8003348 <USB_ActivateEndpoint+0x374>

08003384 <USB_DeactivateEndpoint>:
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->doublebuffer == 0U)
 8003384:	7b0b      	ldrb	r3, [r1, #12]
 8003386:	2b00      	cmp	r3, #0
 8003388:	d146      	bne.n	8003418 <USB_DeactivateEndpoint+0x94>
  {
    if (ep->is_in != 0U)
 800338a:	784b      	ldrb	r3, [r1, #1]
 800338c:	b313      	cbz	r3, 80033d4 <USB_DeactivateEndpoint+0x50>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800338e:	780a      	ldrb	r2, [r1, #0]
 8003390:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8003394:	f013 0f40 	tst.w	r3, #64	; 0x40
 8003398:	d00c      	beq.n	80033b4 <USB_DeactivateEndpoint+0x30>
 800339a:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800339e:	b29b      	uxth	r3, r3
 80033a0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80033a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033a8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80033ac:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80033b0:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80033b4:	780a      	ldrb	r2, [r1, #0]
 80033b6:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80033ba:	b29b      	uxth	r3, r3
 80033bc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80033c0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80033c4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80033c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80033cc:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
    }
  }

  return HAL_OK;
}
 80033d0:	2000      	movs	r0, #0
 80033d2:	4770      	bx	lr
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80033d4:	780a      	ldrb	r2, [r1, #0]
 80033d6:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80033da:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 80033de:	d00c      	beq.n	80033fa <USB_DeactivateEndpoint+0x76>
 80033e0:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80033e4:	b29b      	uxth	r3, r3
 80033e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80033ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033ee:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80033f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80033f6:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80033fa:	780a      	ldrb	r2, [r1, #0]
 80033fc:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8003400:	b29b      	uxth	r3, r3
 8003402:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003406:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800340a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800340e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003412:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 8003416:	e7db      	b.n	80033d0 <USB_DeactivateEndpoint+0x4c>
    if (ep->is_in == 0U)
 8003418:	784b      	ldrb	r3, [r1, #1]
 800341a:	2b00      	cmp	r3, #0
 800341c:	d14e      	bne.n	80034bc <USB_DeactivateEndpoint+0x138>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800341e:	780a      	ldrb	r2, [r1, #0]
 8003420:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8003424:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8003428:	d00c      	beq.n	8003444 <USB_DeactivateEndpoint+0xc0>
 800342a:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800342e:	b29b      	uxth	r3, r3
 8003430:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003434:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003438:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800343c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003440:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003444:	780a      	ldrb	r2, [r1, #0]
 8003446:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800344a:	f013 0f40 	tst.w	r3, #64	; 0x40
 800344e:	d00c      	beq.n	800346a <USB_DeactivateEndpoint+0xe6>
 8003450:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8003454:	b29b      	uxth	r3, r3
 8003456:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800345a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800345e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003462:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003466:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_TX_DTOG(USBx, ep->num);
 800346a:	780a      	ldrb	r2, [r1, #0]
 800346c:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8003470:	b29b      	uxth	r3, r3
 8003472:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003476:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800347a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800347e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003482:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003486:	780b      	ldrb	r3, [r1, #0]
 8003488:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 800348c:	b292      	uxth	r2, r2
 800348e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003492:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003496:	f248 0c80 	movw	ip, #32896	; 0x8080
 800349a:	ea42 020c 	orr.w	r2, r2, ip
 800349e:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80034a2:	780a      	ldrb	r2, [r1, #0]
 80034a4:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80034a8:	b29b      	uxth	r3, r3
 80034aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80034ae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80034b2:	ea43 030c 	orr.w	r3, r3, ip
 80034b6:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 80034ba:	e789      	b.n	80033d0 <USB_DeactivateEndpoint+0x4c>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80034bc:	780a      	ldrb	r2, [r1, #0]
 80034be:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80034c2:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 80034c6:	d00c      	beq.n	80034e2 <USB_DeactivateEndpoint+0x15e>
 80034c8:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80034cc:	b29b      	uxth	r3, r3
 80034ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80034d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80034d6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80034da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80034de:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80034e2:	780a      	ldrb	r2, [r1, #0]
 80034e4:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80034e8:	f013 0f40 	tst.w	r3, #64	; 0x40
 80034ec:	d00c      	beq.n	8003508 <USB_DeactivateEndpoint+0x184>
 80034ee:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80034f2:	b29b      	uxth	r3, r3
 80034f4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80034f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80034fc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003500:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003504:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_RX_DTOG(USBx, ep->num);
 8003508:	780a      	ldrb	r2, [r1, #0]
 800350a:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800350e:	b29b      	uxth	r3, r3
 8003510:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003514:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003518:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800351c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003520:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003524:	780b      	ldrb	r3, [r1, #0]
 8003526:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 800352a:	b292      	uxth	r2, r2
 800352c:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8003530:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003534:	f248 0c80 	movw	ip, #32896	; 0x8080
 8003538:	ea42 020c 	orr.w	r2, r2, ip
 800353c:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003540:	780a      	ldrb	r2, [r1, #0]
 8003542:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8003546:	b29b      	uxth	r3, r3
 8003548:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800354c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003550:	ea43 030c 	orr.w	r3, r3, ip
 8003554:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 8003558:	e73a      	b.n	80033d0 <USB_DeactivateEndpoint+0x4c>

0800355a <USB_EPSetStall>:
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->is_in != 0U)
 800355a:	784b      	ldrb	r3, [r1, #1]
 800355c:	b18b      	cbz	r3, 8003582 <USB_EPSetStall+0x28>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800355e:	780a      	ldrb	r2, [r1, #0]
 8003560:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8003564:	b29b      	uxth	r3, r3
 8003566:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800356a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800356e:	f083 0310 	eor.w	r3, r3, #16
 8003572:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003576:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800357a:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
  }

  return HAL_OK;
}
 800357e:	2000      	movs	r0, #0
 8003580:	4770      	bx	lr
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8003582:	780a      	ldrb	r2, [r1, #0]
 8003584:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8003588:	b29b      	uxth	r3, r3
 800358a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800358e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003592:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8003596:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800359a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800359e:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 80035a2:	e7ec      	b.n	800357e <USB_EPSetStall+0x24>

080035a4 <USB_EPClearStall>:
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->doublebuffer == 0U)
 80035a4:	7b0b      	ldrb	r3, [r1, #12]
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d14b      	bne.n	8003642 <USB_EPClearStall+0x9e>
  {
    if (ep->is_in != 0U)
 80035aa:	784b      	ldrb	r3, [r1, #1]
 80035ac:	b333      	cbz	r3, 80035fc <USB_EPClearStall+0x58>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80035ae:	780a      	ldrb	r2, [r1, #0]
 80035b0:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80035b4:	f013 0f40 	tst.w	r3, #64	; 0x40
 80035b8:	d00c      	beq.n	80035d4 <USB_EPClearStall+0x30>
 80035ba:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80035be:	b29b      	uxth	r3, r3
 80035c0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80035c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80035c8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80035cc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80035d0:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]

      if (ep->type != EP_TYPE_ISOC)
 80035d4:	78cb      	ldrb	r3, [r1, #3]
 80035d6:	2b01      	cmp	r3, #1
 80035d8:	d033      	beq.n	8003642 <USB_EPClearStall+0x9e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80035da:	780a      	ldrb	r2, [r1, #0]
 80035dc:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80035e0:	b29b      	uxth	r3, r3
 80035e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80035e6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80035ea:	f083 0320 	eor.w	r3, r3, #32
 80035ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80035f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80035f6:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 80035fa:	e022      	b.n	8003642 <USB_EPClearStall+0x9e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80035fc:	780a      	ldrb	r2, [r1, #0]
 80035fe:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8003602:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8003606:	d00c      	beq.n	8003622 <USB_EPClearStall+0x7e>
 8003608:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800360c:	b29b      	uxth	r3, r3
 800360e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003612:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003616:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800361a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800361e:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8003622:	780a      	ldrb	r2, [r1, #0]
 8003624:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8003628:	b29b      	uxth	r3, r3
 800362a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800362e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003632:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8003636:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800363a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800363e:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    }
  }

  return HAL_OK;
}
 8003642:	2000      	movs	r0, #0
 8003644:	4770      	bx	lr

08003646 <USB_SetDevAddress>:
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
  if (address == 0U)
 8003646:	b911      	cbnz	r1, 800364e <USB_SetDevAddress+0x8>
  {
    /* set device address and enable function */
    USBx->DADDR = USB_DADDR_EF;
 8003648:	2380      	movs	r3, #128	; 0x80
 800364a:	f8a0 304c 	strh.w	r3, [r0, #76]	; 0x4c
  }

  return HAL_OK;
}
 800364e:	2000      	movs	r0, #0
 8003650:	4770      	bx	lr

08003652 <USB_DevConnect>:
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
}
 8003652:	2000      	movs	r0, #0
 8003654:	4770      	bx	lr

08003656 <USB_DevDisconnect>:
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
}
 8003656:	2000      	movs	r0, #0
 8003658:	4770      	bx	lr

0800365a <USB_ReadInterrupts>:
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800365a:	f8b0 0044 	ldrh.w	r0, [r0, #68]	; 0x44
  return tmpreg;
}
 800365e:	b280      	uxth	r0, r0
 8003660:	4770      	bx	lr

08003662 <USB_EP0_OutStart>:
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
}
 8003662:	2000      	movs	r0, #0
 8003664:	4770      	bx	lr

08003666 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8003666:	b410      	push	{r4}
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8003668:	1c5c      	adds	r4, r3, #1
 800366a:	0864      	lsrs	r4, r4, #1
  uint32_t BaseAddr = (uint32_t)USBx;
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800366c:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 8003670:	f502 6280 	add.w	r2, r2, #1024	; 0x400

  for (i = n; i != 0U; i--)
 8003674:	e007      	b.n	8003686 <USB_WritePMA+0x20>
  {
    temp1 = *pBuf;
 8003676:	780b      	ldrb	r3, [r1, #0]
    pBuf++;
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8003678:	7848      	ldrb	r0, [r1, #1]
    *pdwVal = (uint16_t)temp2;
 800367a:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 800367e:	f822 3b04 	strh.w	r3, [r2], #4

#if PMA_ACCESS > 1U
    pdwVal++;
#endif

    pBuf++;
 8003682:	3102      	adds	r1, #2
  for (i = n; i != 0U; i--)
 8003684:	3c01      	subs	r4, #1
 8003686:	2c00      	cmp	r4, #0
 8003688:	d1f5      	bne.n	8003676 <USB_WritePMA+0x10>
  }
}
 800368a:	bc10      	pop	{r4}
 800368c:	4770      	bx	lr

0800368e <USB_EPStartXfer>:
{
 800368e:	b570      	push	{r4, r5, r6, lr}
 8003690:	4605      	mov	r5, r0
 8003692:	460c      	mov	r4, r1
  if (ep->is_in == 1U)
 8003694:	7849      	ldrb	r1, [r1, #1]
 8003696:	2901      	cmp	r1, #1
 8003698:	d037      	beq.n	800370a <USB_EPStartXfer+0x7c>
    if (ep->xfer_len > ep->maxpacket)
 800369a:	69a2      	ldr	r2, [r4, #24]
 800369c:	6923      	ldr	r3, [r4, #16]
 800369e:	429a      	cmp	r2, r3
 80036a0:	f240 810a 	bls.w	80038b8 <USB_EPStartXfer+0x22a>
      ep->xfer_len -= len;
 80036a4:	1ad2      	subs	r2, r2, r3
 80036a6:	61a2      	str	r2, [r4, #24]
    if (ep->doublebuffer == 0U)
 80036a8:	7b22      	ldrb	r2, [r4, #12]
 80036aa:	2a00      	cmp	r2, #0
 80036ac:	f040 8121 	bne.w	80038f2 <USB_EPStartXfer+0x264>
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80036b0:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 80036b4:	b292      	uxth	r2, r2
 80036b6:	442a      	add	r2, r5
 80036b8:	7821      	ldrb	r1, [r4, #0]
 80036ba:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 80036be:	2b00      	cmp	r3, #0
 80036c0:	f040 80fe 	bne.w	80038c0 <USB_EPStartXfer+0x232>
 80036c4:	f8b2 340c 	ldrh.w	r3, [r2, #1036]	; 0x40c
 80036c8:	b29b      	uxth	r3, r3
 80036ca:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80036ce:	b29b      	uxth	r3, r3
 80036d0:	f8a2 340c 	strh.w	r3, [r2, #1036]	; 0x40c
 80036d4:	f8b2 340c 	ldrh.w	r3, [r2, #1036]	; 0x40c
 80036d8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80036dc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80036e0:	b29b      	uxth	r3, r3
 80036e2:	f8a2 340c 	strh.w	r3, [r2, #1036]	; 0x40c
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80036e6:	7822      	ldrb	r2, [r4, #0]
 80036e8:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 80036ec:	b29b      	uxth	r3, r3
 80036ee:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80036f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036f6:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 80036fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80036fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003702:	f825 3022 	strh.w	r3, [r5, r2, lsl #2]
}
 8003706:	2000      	movs	r0, #0
 8003708:	bd70      	pop	{r4, r5, r6, pc}
    if (ep->xfer_len > ep->maxpacket)
 800370a:	69a2      	ldr	r2, [r4, #24]
 800370c:	6923      	ldr	r3, [r4, #16]
 800370e:	429a      	cmp	r2, r3
 8003710:	d924      	bls.n	800375c <USB_EPStartXfer+0xce>
      ep->xfer_len -= len;
 8003712:	1ad2      	subs	r2, r2, r3
 8003714:	61a2      	str	r2, [r4, #24]
    if (ep->doublebuffer == 0U)
 8003716:	7b22      	ldrb	r2, [r4, #12]
 8003718:	b322      	cbz	r2, 8003764 <USB_EPStartXfer+0xd6>
      if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800371a:	7822      	ldrb	r2, [r4, #0]
 800371c:	f835 0022 	ldrh.w	r0, [r5, r2, lsl #2]
 8003720:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003724:	d079      	beq.n	800381a <USB_EPStartXfer+0x18c>
        PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8003726:	2900      	cmp	r1, #0
 8003728:	d146      	bne.n	80037b8 <USB_EPStartXfer+0x12a>
 800372a:	f8b5 1050 	ldrh.w	r1, [r5, #80]	; 0x50
 800372e:	b289      	uxth	r1, r1
 8003730:	4429      	add	r1, r5
 8003732:	eb01 1202 	add.w	r2, r1, r2, lsl #4
 8003736:	bb33      	cbnz	r3, 8003786 <USB_EPStartXfer+0xf8>
 8003738:	f8b2 140c 	ldrh.w	r1, [r2, #1036]	; 0x40c
 800373c:	b289      	uxth	r1, r1
 800373e:	f421 41f8 	bic.w	r1, r1, #31744	; 0x7c00
 8003742:	b289      	uxth	r1, r1
 8003744:	f8a2 140c 	strh.w	r1, [r2, #1036]	; 0x40c
 8003748:	f8b2 140c 	ldrh.w	r1, [r2, #1036]	; 0x40c
 800374c:	ea6f 4141 	mvn.w	r1, r1, lsl #17
 8003750:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 8003754:	b289      	uxth	r1, r1
 8003756:	f8a2 140c 	strh.w	r1, [r2, #1036]	; 0x40c
 800375a:	e036      	b.n	80037ca <USB_EPStartXfer+0x13c>
      ep->xfer_len = 0U;
 800375c:	2300      	movs	r3, #0
 800375e:	61a3      	str	r3, [r4, #24]
      len = ep->xfer_len;
 8003760:	4613      	mov	r3, r2
 8003762:	e7d8      	b.n	8003716 <USB_EPStartXfer+0x88>
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8003764:	b29e      	uxth	r6, r3
 8003766:	4633      	mov	r3, r6
 8003768:	88e2      	ldrh	r2, [r4, #6]
 800376a:	6961      	ldr	r1, [r4, #20]
 800376c:	4628      	mov	r0, r5
 800376e:	f7ff ff7a 	bl	8003666 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8003772:	f8b5 3050 	ldrh.w	r3, [r5, #80]	; 0x50
 8003776:	b29b      	uxth	r3, r3
 8003778:	442b      	add	r3, r5
 800377a:	7822      	ldrb	r2, [r4, #0]
 800377c:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 8003780:	f8a3 6404 	strh.w	r6, [r3, #1028]	; 0x404
 8003784:	e038      	b.n	80037f8 <USB_EPStartXfer+0x16a>
        PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8003786:	2b3e      	cmp	r3, #62	; 0x3e
 8003788:	d809      	bhi.n	800379e <USB_EPStartXfer+0x110>
 800378a:	0859      	lsrs	r1, r3, #1
 800378c:	f013 0f01 	tst.w	r3, #1
 8003790:	d000      	beq.n	8003794 <USB_EPStartXfer+0x106>
 8003792:	3101      	adds	r1, #1
 8003794:	0289      	lsls	r1, r1, #10
 8003796:	b289      	uxth	r1, r1
 8003798:	f8a2 140c 	strh.w	r1, [r2, #1036]	; 0x40c
 800379c:	e015      	b.n	80037ca <USB_EPStartXfer+0x13c>
 800379e:	0959      	lsrs	r1, r3, #5
 80037a0:	f013 0f1f 	tst.w	r3, #31
 80037a4:	d100      	bne.n	80037a8 <USB_EPStartXfer+0x11a>
 80037a6:	3901      	subs	r1, #1
 80037a8:	ea6f 61c1 	mvn.w	r1, r1, lsl #27
 80037ac:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 80037b0:	b289      	uxth	r1, r1
 80037b2:	f8a2 140c 	strh.w	r1, [r2, #1036]	; 0x40c
 80037b6:	e008      	b.n	80037ca <USB_EPStartXfer+0x13c>
 80037b8:	f8b5 1050 	ldrh.w	r1, [r5, #80]	; 0x50
 80037bc:	b289      	uxth	r1, r1
 80037be:	4429      	add	r1, r5
 80037c0:	eb01 1202 	add.w	r2, r1, r2, lsl #4
 80037c4:	b299      	uxth	r1, r3
 80037c6:	f8a2 140c 	strh.w	r1, [r2, #1036]	; 0x40c
        pmabuffer = ep->pmaaddr1;
 80037ca:	8962      	ldrh	r2, [r4, #10]
      USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80037cc:	b29b      	uxth	r3, r3
 80037ce:	6961      	ldr	r1, [r4, #20]
 80037d0:	4628      	mov	r0, r5
 80037d2:	f7ff ff48 	bl	8003666 <USB_WritePMA>
      PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 80037d6:	7863      	ldrb	r3, [r4, #1]
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d15c      	bne.n	8003896 <USB_EPStartXfer+0x208>
 80037dc:	7822      	ldrb	r2, [r4, #0]
 80037de:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 80037e2:	b29b      	uxth	r3, r3
 80037e4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80037e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80037ec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80037f0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80037f4:	f825 3022 	strh.w	r3, [r5, r2, lsl #2]
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 80037f8:	7822      	ldrb	r2, [r4, #0]
 80037fa:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 80037fe:	b29b      	uxth	r3, r3
 8003800:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003804:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003808:	f083 0330 	eor.w	r3, r3, #48	; 0x30
 800380c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003810:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003814:	f825 3022 	strh.w	r3, [r5, r2, lsl #2]
 8003818:	e775      	b.n	8003706 <USB_EPStartXfer+0x78>
        PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800381a:	bb89      	cbnz	r1, 8003880 <USB_EPStartXfer+0x1f2>
 800381c:	f8b5 1050 	ldrh.w	r1, [r5, #80]	; 0x50
 8003820:	b289      	uxth	r1, r1
 8003822:	4429      	add	r1, r5
 8003824:	eb01 1202 	add.w	r2, r1, r2, lsl #4
 8003828:	b98b      	cbnz	r3, 800384e <USB_EPStartXfer+0x1c0>
 800382a:	f8b2 1404 	ldrh.w	r1, [r2, #1028]	; 0x404
 800382e:	b289      	uxth	r1, r1
 8003830:	f421 41f8 	bic.w	r1, r1, #31744	; 0x7c00
 8003834:	b289      	uxth	r1, r1
 8003836:	f8a2 1404 	strh.w	r1, [r2, #1028]	; 0x404
 800383a:	f8b2 1404 	ldrh.w	r1, [r2, #1028]	; 0x404
 800383e:	ea6f 4141 	mvn.w	r1, r1, lsl #17
 8003842:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 8003846:	b289      	uxth	r1, r1
 8003848:	f8a2 1404 	strh.w	r1, [r2, #1028]	; 0x404
 800384c:	e021      	b.n	8003892 <USB_EPStartXfer+0x204>
 800384e:	2b3e      	cmp	r3, #62	; 0x3e
 8003850:	d809      	bhi.n	8003866 <USB_EPStartXfer+0x1d8>
 8003852:	0859      	lsrs	r1, r3, #1
 8003854:	f013 0f01 	tst.w	r3, #1
 8003858:	d000      	beq.n	800385c <USB_EPStartXfer+0x1ce>
 800385a:	3101      	adds	r1, #1
 800385c:	0289      	lsls	r1, r1, #10
 800385e:	b289      	uxth	r1, r1
 8003860:	f8a2 1404 	strh.w	r1, [r2, #1028]	; 0x404
 8003864:	e015      	b.n	8003892 <USB_EPStartXfer+0x204>
 8003866:	0959      	lsrs	r1, r3, #5
 8003868:	f013 0f1f 	tst.w	r3, #31
 800386c:	d100      	bne.n	8003870 <USB_EPStartXfer+0x1e2>
 800386e:	3901      	subs	r1, #1
 8003870:	ea6f 61c1 	mvn.w	r1, r1, lsl #27
 8003874:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 8003878:	b289      	uxth	r1, r1
 800387a:	f8a2 1404 	strh.w	r1, [r2, #1028]	; 0x404
 800387e:	e008      	b.n	8003892 <USB_EPStartXfer+0x204>
 8003880:	f8b5 1050 	ldrh.w	r1, [r5, #80]	; 0x50
 8003884:	b289      	uxth	r1, r1
 8003886:	4429      	add	r1, r5
 8003888:	eb01 1202 	add.w	r2, r1, r2, lsl #4
 800388c:	b299      	uxth	r1, r3
 800388e:	f8a2 1404 	strh.w	r1, [r2, #1028]	; 0x404
        pmabuffer = ep->pmaaddr0;
 8003892:	8922      	ldrh	r2, [r4, #8]
 8003894:	e79a      	b.n	80037cc <USB_EPStartXfer+0x13e>
      PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 8003896:	2b01      	cmp	r3, #1
 8003898:	d1ae      	bne.n	80037f8 <USB_EPStartXfer+0x16a>
 800389a:	7822      	ldrb	r2, [r4, #0]
 800389c:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 80038a0:	b29b      	uxth	r3, r3
 80038a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80038a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80038aa:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80038ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80038b2:	f825 3022 	strh.w	r3, [r5, r2, lsl #2]
 80038b6:	e79f      	b.n	80037f8 <USB_EPStartXfer+0x16a>
      ep->xfer_len = 0U;
 80038b8:	2300      	movs	r3, #0
 80038ba:	61a3      	str	r3, [r4, #24]
      len = ep->xfer_len;
 80038bc:	4613      	mov	r3, r2
 80038be:	e6f3      	b.n	80036a8 <USB_EPStartXfer+0x1a>
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80038c0:	2b3e      	cmp	r3, #62	; 0x3e
 80038c2:	d809      	bhi.n	80038d8 <USB_EPStartXfer+0x24a>
 80038c4:	0859      	lsrs	r1, r3, #1
 80038c6:	f013 0f01 	tst.w	r3, #1
 80038ca:	d000      	beq.n	80038ce <USB_EPStartXfer+0x240>
 80038cc:	3101      	adds	r1, #1
 80038ce:	0289      	lsls	r1, r1, #10
 80038d0:	b289      	uxth	r1, r1
 80038d2:	f8a2 140c 	strh.w	r1, [r2, #1036]	; 0x40c
 80038d6:	e706      	b.n	80036e6 <USB_EPStartXfer+0x58>
 80038d8:	0959      	lsrs	r1, r3, #5
 80038da:	f013 0f1f 	tst.w	r3, #31
 80038de:	d100      	bne.n	80038e2 <USB_EPStartXfer+0x254>
 80038e0:	3901      	subs	r1, #1
 80038e2:	ea6f 61c1 	mvn.w	r1, r1, lsl #27
 80038e6:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 80038ea:	b289      	uxth	r1, r1
 80038ec:	f8a2 140c 	strh.w	r1, [r2, #1036]	; 0x40c
 80038f0:	e6f9      	b.n	80036e6 <USB_EPStartXfer+0x58>
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 80038f2:	b9c1      	cbnz	r1, 8003926 <USB_EPStartXfer+0x298>
 80038f4:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 80038f8:	b292      	uxth	r2, r2
 80038fa:	442a      	add	r2, r5
 80038fc:	7821      	ldrb	r1, [r4, #0]
 80038fe:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8003902:	bb6b      	cbnz	r3, 8003960 <USB_EPStartXfer+0x2d2>
 8003904:	f8b2 1404 	ldrh.w	r1, [r2, #1028]	; 0x404
 8003908:	b289      	uxth	r1, r1
 800390a:	f421 41f8 	bic.w	r1, r1, #31744	; 0x7c00
 800390e:	b289      	uxth	r1, r1
 8003910:	f8a2 1404 	strh.w	r1, [r2, #1028]	; 0x404
 8003914:	f8b2 1404 	ldrh.w	r1, [r2, #1028]	; 0x404
 8003918:	ea6f 4141 	mvn.w	r1, r1, lsl #17
 800391c:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 8003920:	b289      	uxth	r1, r1
 8003922:	f8a2 1404 	strh.w	r1, [r2, #1028]	; 0x404
 8003926:	7862      	ldrb	r2, [r4, #1]
 8003928:	2a00      	cmp	r2, #0
 800392a:	d14b      	bne.n	80039c4 <USB_EPStartXfer+0x336>
 800392c:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 8003930:	b292      	uxth	r2, r2
 8003932:	442a      	add	r2, r5
 8003934:	7821      	ldrb	r1, [r4, #0]
 8003936:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 800393a:	bb53      	cbnz	r3, 8003992 <USB_EPStartXfer+0x304>
 800393c:	f8b2 340c 	ldrh.w	r3, [r2, #1036]	; 0x40c
 8003940:	b29b      	uxth	r3, r3
 8003942:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003946:	b29b      	uxth	r3, r3
 8003948:	f8a2 340c 	strh.w	r3, [r2, #1036]	; 0x40c
 800394c:	f8b2 340c 	ldrh.w	r3, [r2, #1036]	; 0x40c
 8003950:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003954:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003958:	b29b      	uxth	r3, r3
 800395a:	f8a2 340c 	strh.w	r3, [r2, #1036]	; 0x40c
 800395e:	e6c2      	b.n	80036e6 <USB_EPStartXfer+0x58>
 8003960:	2b3e      	cmp	r3, #62	; 0x3e
 8003962:	d809      	bhi.n	8003978 <USB_EPStartXfer+0x2ea>
 8003964:	0859      	lsrs	r1, r3, #1
 8003966:	f013 0f01 	tst.w	r3, #1
 800396a:	d000      	beq.n	800396e <USB_EPStartXfer+0x2e0>
 800396c:	3101      	adds	r1, #1
 800396e:	0289      	lsls	r1, r1, #10
 8003970:	b289      	uxth	r1, r1
 8003972:	f8a2 1404 	strh.w	r1, [r2, #1028]	; 0x404
 8003976:	e7d6      	b.n	8003926 <USB_EPStartXfer+0x298>
 8003978:	0959      	lsrs	r1, r3, #5
 800397a:	f013 0f1f 	tst.w	r3, #31
 800397e:	d100      	bne.n	8003982 <USB_EPStartXfer+0x2f4>
 8003980:	3901      	subs	r1, #1
 8003982:	ea6f 61c1 	mvn.w	r1, r1, lsl #27
 8003986:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 800398a:	b289      	uxth	r1, r1
 800398c:	f8a2 1404 	strh.w	r1, [r2, #1028]	; 0x404
 8003990:	e7c9      	b.n	8003926 <USB_EPStartXfer+0x298>
 8003992:	2b3e      	cmp	r3, #62	; 0x3e
 8003994:	d809      	bhi.n	80039aa <USB_EPStartXfer+0x31c>
 8003996:	0859      	lsrs	r1, r3, #1
 8003998:	f013 0f01 	tst.w	r3, #1
 800399c:	d000      	beq.n	80039a0 <USB_EPStartXfer+0x312>
 800399e:	3101      	adds	r1, #1
 80039a0:	0289      	lsls	r1, r1, #10
 80039a2:	b289      	uxth	r1, r1
 80039a4:	f8a2 140c 	strh.w	r1, [r2, #1036]	; 0x40c
 80039a8:	e69d      	b.n	80036e6 <USB_EPStartXfer+0x58>
 80039aa:	0959      	lsrs	r1, r3, #5
 80039ac:	f013 0f1f 	tst.w	r3, #31
 80039b0:	d100      	bne.n	80039b4 <USB_EPStartXfer+0x326>
 80039b2:	3901      	subs	r1, #1
 80039b4:	ea6f 63c1 	mvn.w	r3, r1, lsl #27
 80039b8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80039bc:	b29b      	uxth	r3, r3
 80039be:	f8a2 340c 	strh.w	r3, [r2, #1036]	; 0x40c
 80039c2:	e690      	b.n	80036e6 <USB_EPStartXfer+0x58>
 80039c4:	2a01      	cmp	r2, #1
 80039c6:	f47f ae8e 	bne.w	80036e6 <USB_EPStartXfer+0x58>
 80039ca:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 80039ce:	b292      	uxth	r2, r2
 80039d0:	442a      	add	r2, r5
 80039d2:	7821      	ldrb	r1, [r4, #0]
 80039d4:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 80039d8:	b29b      	uxth	r3, r3
 80039da:	f8a2 340c 	strh.w	r3, [r2, #1036]	; 0x40c
 80039de:	e682      	b.n	80036e6 <USB_EPStartXfer+0x58>

080039e0 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80039e0:	b410      	push	{r4}
  uint32_t n = (uint32_t)wNBytes >> 1;
 80039e2:	085c      	lsrs	r4, r3, #1
  uint32_t BaseAddr = (uint32_t)USBx;
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80039e4:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 80039e8:	f500 6080 	add.w	r0, r0, #1024	; 0x400

  for (i = n; i != 0U; i--)
 80039ec:	e007      	b.n	80039fe <USB_ReadPMA+0x1e>
  {
    temp = *(__IO uint16_t *)pdwVal;
 80039ee:	f830 2b04 	ldrh.w	r2, [r0], #4
    pdwVal++;
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 80039f2:	700a      	strb	r2, [r1, #0]
    pBuf++;
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 80039f4:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80039f8:	704a      	strb	r2, [r1, #1]
    pBuf++;
 80039fa:	3102      	adds	r1, #2
  for (i = n; i != 0U; i--)
 80039fc:	3c01      	subs	r4, #1
 80039fe:	2c00      	cmp	r4, #0
 8003a00:	d1f5      	bne.n	80039ee <USB_ReadPMA+0xe>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8003a02:	f013 0f01 	tst.w	r3, #1
 8003a06:	d001      	beq.n	8003a0c <USB_ReadPMA+0x2c>
  {
    temp = *pdwVal;
 8003a08:	8803      	ldrh	r3, [r0, #0]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8003a0a:	700b      	strb	r3, [r1, #0]
  }
}
 8003a0c:	bc10      	pop	{r4}
 8003a0e:	4770      	bx	lr

08003a10 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8003a10:	b510      	push	{r4, lr}
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8003a12:	f8d0 42b8 	ldr.w	r4, [r0, #696]	; 0x2b8

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8003a16:	f8d0 32bc 	ldr.w	r3, [r0, #700]	; 0x2bc
 8003a1a:	b15b      	cbz	r3, 8003a34 <USBD_CDC_EP0_RxReady+0x24>
 8003a1c:	f894 0200 	ldrb.w	r0, [r4, #512]	; 0x200
 8003a20:	28ff      	cmp	r0, #255	; 0xff
 8003a22:	d007      	beq.n	8003a34 <USBD_CDC_EP0_RxReady+0x24>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8003a24:	689b      	ldr	r3, [r3, #8]
 8003a26:	f894 2201 	ldrb.w	r2, [r4, #513]	; 0x201
 8003a2a:	4621      	mov	r1, r4
 8003a2c:	4798      	blx	r3
                                                      (uint8_t *)(void *)hcdc->data,
                                                      (uint16_t)hcdc->CmdLength);
    hcdc->CmdOpCode = 0xFFU;
 8003a2e:	23ff      	movs	r3, #255	; 0xff
 8003a30:	f884 3200 	strb.w	r3, [r4, #512]	; 0x200

  }
  return USBD_OK;
}
 8003a34:	2000      	movs	r0, #0
 8003a36:	bd10      	pop	{r4, pc}

08003a38 <USBD_CDC_GetFSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8003a38:	2343      	movs	r3, #67	; 0x43
 8003a3a:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_CfgFSDesc;
}
 8003a3c:	4800      	ldr	r0, [pc, #0]	; (8003a40 <USBD_CDC_GetFSCfgDesc+0x8>)
 8003a3e:	4770      	bx	lr
 8003a40:	20000044 	.word	0x20000044

08003a44 <USBD_CDC_GetHSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8003a44:	2343      	movs	r3, #67	; 0x43
 8003a46:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_CfgHSDesc;
}
 8003a48:	4800      	ldr	r0, [pc, #0]	; (8003a4c <USBD_CDC_GetHSCfgDesc+0x8>)
 8003a4a:	4770      	bx	lr
 8003a4c:	20000088 	.word	0x20000088

08003a50 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8003a50:	2343      	movs	r3, #67	; 0x43
 8003a52:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
}
 8003a54:	4800      	ldr	r0, [pc, #0]	; (8003a58 <USBD_CDC_GetOtherSpeedCfgDesc+0x8>)
 8003a56:	4770      	bx	lr
 8003a58:	200000d8 	.word	0x200000d8

08003a5c <USBD_CDC_GetDeviceQualifierDescriptor>:
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8003a5c:	230a      	movs	r3, #10
 8003a5e:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_DeviceQualifierDesc;
}
 8003a60:	4800      	ldr	r0, [pc, #0]	; (8003a64 <USBD_CDC_GetDeviceQualifierDescriptor+0x8>)
 8003a62:	4770      	bx	lr
 8003a64:	200000cc 	.word	0x200000cc

08003a68 <USBD_CDC_DataOut>:
{
 8003a68:	b538      	push	{r3, r4, r5, lr}
 8003a6a:	4604      	mov	r4, r0
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8003a6c:	f8d0 52b8 	ldr.w	r5, [r0, #696]	; 0x2b8
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8003a70:	f001 f80e 	bl	8004a90 <USBD_LL_GetRxDataSize>
 8003a74:	f8c5 020c 	str.w	r0, [r5, #524]	; 0x20c
  if (pdev->pClassData != NULL)
 8003a78:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
 8003a7c:	b14b      	cbz	r3, 8003a92 <USBD_CDC_DataOut+0x2a>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8003a7e:	f8d4 32bc 	ldr.w	r3, [r4, #700]	; 0x2bc
 8003a82:	68db      	ldr	r3, [r3, #12]
 8003a84:	f505 7103 	add.w	r1, r5, #524	; 0x20c
 8003a88:	f8d5 0204 	ldr.w	r0, [r5, #516]	; 0x204
 8003a8c:	4798      	blx	r3
    return USBD_OK;
 8003a8e:	2000      	movs	r0, #0
}
 8003a90:	bd38      	pop	{r3, r4, r5, pc}
    return USBD_FAIL;
 8003a92:	2002      	movs	r0, #2
 8003a94:	e7fc      	b.n	8003a90 <USBD_CDC_DataOut+0x28>

08003a96 <USBD_CDC_DataIn>:
{
 8003a96:	b510      	push	{r4, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8003a98:	f8d0 22b8 	ldr.w	r2, [r0, #696]	; 0x2b8
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8003a9c:	f8d0 42c0 	ldr.w	r4, [r0, #704]	; 0x2c0
  if (pdev->pClassData != NULL)
 8003aa0:	b1e2      	cbz	r2, 8003adc <USBD_CDC_DataIn+0x46>
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8003aa2:	eb01 0381 	add.w	r3, r1, r1, lsl #2
 8003aa6:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8003aaa:	69db      	ldr	r3, [r3, #28]
 8003aac:	b13b      	cbz	r3, 8003abe <USBD_CDC_DataIn+0x28>
 8003aae:	eb04 1441 	add.w	r4, r4, r1, lsl #5
 8003ab2:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 8003ab4:	fbb3 fcf4 	udiv	ip, r3, r4
 8003ab8:	fb04 331c 	mls	r3, r4, ip, r3
 8003abc:	b123      	cbz	r3, 8003ac8 <USBD_CDC_DataIn+0x32>
      hcdc->TxState = 0U;
 8003abe:	2300      	movs	r3, #0
 8003ac0:	f8c2 3214 	str.w	r3, [r2, #532]	; 0x214
    return USBD_OK;
 8003ac4:	2000      	movs	r0, #0
}
 8003ac6:	bd10      	pop	{r4, pc}
      pdev->ep_in[epnum].total_length = 0U;
 8003ac8:	eb01 0381 	add.w	r3, r1, r1, lsl #2
 8003acc:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8003ad0:	2200      	movs	r2, #0
 8003ad2:	61da      	str	r2, [r3, #28]
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8003ad4:	4613      	mov	r3, r2
 8003ad6:	f000 ffcb 	bl	8004a70 <USBD_LL_Transmit>
 8003ada:	e7f3      	b.n	8003ac4 <USBD_CDC_DataIn+0x2e>
    return USBD_FAIL;
 8003adc:	2002      	movs	r0, #2
 8003ade:	e7f2      	b.n	8003ac6 <USBD_CDC_DataIn+0x30>

08003ae0 <USBD_CDC_Setup>:
{
 8003ae0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003ae2:	b083      	sub	sp, #12
 8003ae4:	4606      	mov	r6, r0
 8003ae6:	460c      	mov	r4, r1
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8003ae8:	f8d0 72b8 	ldr.w	r7, [r0, #696]	; 0x2b8
  uint8_t ifalt = 0U;
 8003aec:	2300      	movs	r3, #0
 8003aee:	f88d 3007 	strb.w	r3, [sp, #7]
  uint16_t status_info = 0U;
 8003af2:	f8ad 3004 	strh.w	r3, [sp, #4]
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8003af6:	780b      	ldrb	r3, [r1, #0]
 8003af8:	f013 0560 	ands.w	r5, r3, #96	; 0x60
 8003afc:	d027      	beq.n	8003b4e <USBD_CDC_Setup+0x6e>
 8003afe:	2d20      	cmp	r5, #32
 8003b00:	d153      	bne.n	8003baa <USBD_CDC_Setup+0xca>
      if (req->wLength)
 8003b02:	88ca      	ldrh	r2, [r1, #6]
 8003b04:	b1da      	cbz	r2, 8003b3e <USBD_CDC_Setup+0x5e>
        if (req->bmRequest & 0x80U)
 8003b06:	f013 0f80 	tst.w	r3, #128	; 0x80
 8003b0a:	d00c      	beq.n	8003b26 <USBD_CDC_Setup+0x46>
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8003b0c:	f8d0 32bc 	ldr.w	r3, [r0, #700]	; 0x2bc
 8003b10:	689b      	ldr	r3, [r3, #8]
 8003b12:	4639      	mov	r1, r7
 8003b14:	7860      	ldrb	r0, [r4, #1]
 8003b16:	4798      	blx	r3
          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8003b18:	88e2      	ldrh	r2, [r4, #6]
 8003b1a:	4639      	mov	r1, r7
 8003b1c:	4630      	mov	r0, r6
 8003b1e:	f000 fd7f 	bl	8004620 <USBD_CtlSendData>
  uint8_t ret = USBD_OK;
 8003b22:	2500      	movs	r5, #0
 8003b24:	e044      	b.n	8003bb0 <USBD_CDC_Setup+0xd0>
          hcdc->CmdOpCode = req->bRequest;
 8003b26:	784b      	ldrb	r3, [r1, #1]
 8003b28:	f887 3200 	strb.w	r3, [r7, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8003b2c:	798b      	ldrb	r3, [r1, #6]
 8003b2e:	f887 3201 	strb.w	r3, [r7, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8003b32:	88ca      	ldrh	r2, [r1, #6]
 8003b34:	4639      	mov	r1, r7
 8003b36:	f000 fd88 	bl	800464a <USBD_CtlPrepareRx>
  uint8_t ret = USBD_OK;
 8003b3a:	2500      	movs	r5, #0
 8003b3c:	e038      	b.n	8003bb0 <USBD_CDC_Setup+0xd0>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8003b3e:	f8d0 32bc 	ldr.w	r3, [r0, #700]	; 0x2bc
 8003b42:	689b      	ldr	r3, [r3, #8]
 8003b44:	2200      	movs	r2, #0
 8003b46:	7848      	ldrb	r0, [r1, #1]
 8003b48:	4798      	blx	r3
  uint8_t ret = USBD_OK;
 8003b4a:	2500      	movs	r5, #0
 8003b4c:	e030      	b.n	8003bb0 <USBD_CDC_Setup+0xd0>
      switch (req->bRequest)
 8003b4e:	784f      	ldrb	r7, [r1, #1]
 8003b50:	2f0a      	cmp	r7, #10
 8003b52:	d014      	beq.n	8003b7e <USBD_CDC_Setup+0x9e>
 8003b54:	2f0b      	cmp	r7, #11
 8003b56:	d020      	beq.n	8003b9a <USBD_CDC_Setup+0xba>
 8003b58:	b11f      	cbz	r7, 8003b62 <USBD_CDC_Setup+0x82>
          USBD_CtlError(pdev, req);
 8003b5a:	f000 fa55 	bl	8004008 <USBD_CtlError>
          ret = USBD_FAIL;
 8003b5e:	2502      	movs	r5, #2
          break;
 8003b60:	e026      	b.n	8003bb0 <USBD_CDC_Setup+0xd0>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8003b62:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8003b66:	2b03      	cmp	r3, #3
 8003b68:	d003      	beq.n	8003b72 <USBD_CDC_Setup+0x92>
            USBD_CtlError(pdev, req);
 8003b6a:	f000 fa4d 	bl	8004008 <USBD_CtlError>
            ret = USBD_FAIL;
 8003b6e:	2502      	movs	r5, #2
 8003b70:	e01e      	b.n	8003bb0 <USBD_CDC_Setup+0xd0>
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8003b72:	2202      	movs	r2, #2
 8003b74:	a901      	add	r1, sp, #4
 8003b76:	f000 fd53 	bl	8004620 <USBD_CtlSendData>
  uint8_t ret = USBD_OK;
 8003b7a:	463d      	mov	r5, r7
 8003b7c:	e018      	b.n	8003bb0 <USBD_CDC_Setup+0xd0>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8003b7e:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8003b82:	2b03      	cmp	r3, #3
 8003b84:	d003      	beq.n	8003b8e <USBD_CDC_Setup+0xae>
            USBD_CtlError(pdev, req);
 8003b86:	f000 fa3f 	bl	8004008 <USBD_CtlError>
            ret = USBD_FAIL;
 8003b8a:	2502      	movs	r5, #2
 8003b8c:	e010      	b.n	8003bb0 <USBD_CDC_Setup+0xd0>
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8003b8e:	2201      	movs	r2, #1
 8003b90:	f10d 0107 	add.w	r1, sp, #7
 8003b94:	f000 fd44 	bl	8004620 <USBD_CtlSendData>
 8003b98:	e00a      	b.n	8003bb0 <USBD_CDC_Setup+0xd0>
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8003b9a:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8003b9e:	2b03      	cmp	r3, #3
 8003ba0:	d006      	beq.n	8003bb0 <USBD_CDC_Setup+0xd0>
            USBD_CtlError(pdev, req);
 8003ba2:	f000 fa31 	bl	8004008 <USBD_CtlError>
            ret = USBD_FAIL;
 8003ba6:	2502      	movs	r5, #2
 8003ba8:	e002      	b.n	8003bb0 <USBD_CDC_Setup+0xd0>
      USBD_CtlError(pdev, req);
 8003baa:	f000 fa2d 	bl	8004008 <USBD_CtlError>
      ret = USBD_FAIL;
 8003bae:	2502      	movs	r5, #2
}
 8003bb0:	4628      	mov	r0, r5
 8003bb2:	b003      	add	sp, #12
 8003bb4:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003bb6 <USBD_CDC_DeInit>:
{
 8003bb6:	b538      	push	{r3, r4, r5, lr}
 8003bb8:	4604      	mov	r4, r0
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8003bba:	2181      	movs	r1, #129	; 0x81
 8003bbc:	f000 ff25 	bl	8004a0a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8003bc0:	2500      	movs	r5, #0
 8003bc2:	62e5      	str	r5, [r4, #44]	; 0x2c
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8003bc4:	2101      	movs	r1, #1
 8003bc6:	4620      	mov	r0, r4
 8003bc8:	f000 ff1f 	bl	8004a0a <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8003bcc:	f8c4 516c 	str.w	r5, [r4, #364]	; 0x16c
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8003bd0:	2182      	movs	r1, #130	; 0x82
 8003bd2:	4620      	mov	r0, r4
 8003bd4:	f000 ff19 	bl	8004a0a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8003bd8:	6425      	str	r5, [r4, #64]	; 0x40
  if (pdev->pClassData != NULL)
 8003bda:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
 8003bde:	b14b      	cbz	r3, 8003bf4 <USBD_CDC_DeInit+0x3e>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8003be0:	f8d4 32bc 	ldr.w	r3, [r4, #700]	; 0x2bc
 8003be4:	685b      	ldr	r3, [r3, #4]
 8003be6:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8003be8:	f8d4 02b8 	ldr.w	r0, [r4, #696]	; 0x2b8
 8003bec:	f000 ff5a 	bl	8004aa4 <USBD_static_free>
    pdev->pClassData = NULL;
 8003bf0:	f8c4 52b8 	str.w	r5, [r4, #696]	; 0x2b8
}
 8003bf4:	2000      	movs	r0, #0
 8003bf6:	bd38      	pop	{r3, r4, r5, pc}

08003bf8 <USBD_CDC_Init>:
{
 8003bf8:	b570      	push	{r4, r5, r6, lr}
 8003bfa:	4604      	mov	r4, r0
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8003bfc:	7c03      	ldrb	r3, [r0, #16]
 8003bfe:	bbab      	cbnz	r3, 8003c6c <USBD_CDC_Init+0x74>
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8003c00:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003c04:	2202      	movs	r2, #2
 8003c06:	2181      	movs	r1, #129	; 0x81
 8003c08:	f000 fef4 	bl	80049f4 <USBD_LL_OpenEP>
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8003c0c:	2501      	movs	r5, #1
 8003c0e:	62e5      	str	r5, [r4, #44]	; 0x2c
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8003c10:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003c14:	2202      	movs	r2, #2
 8003c16:	4629      	mov	r1, r5
 8003c18:	4620      	mov	r0, r4
 8003c1a:	f000 feeb 	bl	80049f4 <USBD_LL_OpenEP>
    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8003c1e:	f8c4 516c 	str.w	r5, [r4, #364]	; 0x16c
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8003c22:	2308      	movs	r3, #8
 8003c24:	2203      	movs	r2, #3
 8003c26:	2182      	movs	r1, #130	; 0x82
 8003c28:	4620      	mov	r0, r4
 8003c2a:	f000 fee3 	bl	80049f4 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8003c2e:	2301      	movs	r3, #1
 8003c30:	6423      	str	r3, [r4, #64]	; 0x40
  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8003c32:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8003c36:	f000 ff31 	bl	8004a9c <USBD_static_malloc>
 8003c3a:	4605      	mov	r5, r0
 8003c3c:	f8c4 02b8 	str.w	r0, [r4, #696]	; 0x2b8
  if (pdev->pClassData == NULL)
 8003c40:	b368      	cbz	r0, 8003c9e <USBD_CDC_Init+0xa6>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8003c42:	f8d4 32bc 	ldr.w	r3, [r4, #700]	; 0x2bc
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	4798      	blx	r3
    hcdc->TxState = 0U;
 8003c4a:	2300      	movs	r3, #0
 8003c4c:	f8c5 3214 	str.w	r3, [r5, #532]	; 0x214
    hcdc->RxState = 0U;
 8003c50:	f8c5 3218 	str.w	r3, [r5, #536]	; 0x218
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8003c54:	7c26      	ldrb	r6, [r4, #16]
 8003c56:	b9ce      	cbnz	r6, 8003c8c <USBD_CDC_Init+0x94>
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8003c58:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003c5c:	f8d5 2204 	ldr.w	r2, [r5, #516]	; 0x204
 8003c60:	2101      	movs	r1, #1
 8003c62:	4620      	mov	r0, r4
 8003c64:	f000 ff0c 	bl	8004a80 <USBD_LL_PrepareReceive>
}
 8003c68:	4630      	mov	r0, r6
 8003c6a:	bd70      	pop	{r4, r5, r6, pc}
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8003c6c:	2340      	movs	r3, #64	; 0x40
 8003c6e:	2202      	movs	r2, #2
 8003c70:	2181      	movs	r1, #129	; 0x81
 8003c72:	f000 febf 	bl	80049f4 <USBD_LL_OpenEP>
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8003c76:	2501      	movs	r5, #1
 8003c78:	62e5      	str	r5, [r4, #44]	; 0x2c
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8003c7a:	2340      	movs	r3, #64	; 0x40
 8003c7c:	2202      	movs	r2, #2
 8003c7e:	4629      	mov	r1, r5
 8003c80:	4620      	mov	r0, r4
 8003c82:	f000 feb7 	bl	80049f4 <USBD_LL_OpenEP>
    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8003c86:	f8c4 516c 	str.w	r5, [r4, #364]	; 0x16c
 8003c8a:	e7ca      	b.n	8003c22 <USBD_CDC_Init+0x2a>
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8003c8c:	2340      	movs	r3, #64	; 0x40
 8003c8e:	f8d5 2204 	ldr.w	r2, [r5, #516]	; 0x204
 8003c92:	2101      	movs	r1, #1
 8003c94:	4620      	mov	r0, r4
 8003c96:	f000 fef3 	bl	8004a80 <USBD_LL_PrepareReceive>
  uint8_t ret = 0U;
 8003c9a:	2600      	movs	r6, #0
 8003c9c:	e7e4      	b.n	8003c68 <USBD_CDC_Init+0x70>
    ret = 1U;
 8003c9e:	2601      	movs	r6, #1
 8003ca0:	e7e2      	b.n	8003c68 <USBD_CDC_Init+0x70>

08003ca2 <USBD_CDC_RegisterInterface>:
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
  uint8_t  ret = USBD_FAIL;

  if (fops != NULL)
 8003ca2:	b119      	cbz	r1, 8003cac <USBD_CDC_RegisterInterface+0xa>
  {
    pdev->pUserData = fops;
 8003ca4:	f8c0 12bc 	str.w	r1, [r0, #700]	; 0x2bc
    ret = USBD_OK;
 8003ca8:	2000      	movs	r0, #0
 8003caa:	4770      	bx	lr
  uint8_t  ret = USBD_FAIL;
 8003cac:	2002      	movs	r0, #2
  }

  return ret;
}
 8003cae:	4770      	bx	lr

08003cb0 <USBD_CDC_SetTxBuffer>:
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8003cb0:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8

  hcdc->TxBuffer = pbuff;
 8003cb4:	f8c3 1208 	str.w	r1, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8003cb8:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
}
 8003cbc:	2000      	movs	r0, #0
 8003cbe:	4770      	bx	lr

08003cc0 <USBD_CDC_SetRxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8003cc0:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8

  hcdc->RxBuffer = pbuff;
 8003cc4:	f8c3 1204 	str.w	r1, [r3, #516]	; 0x204

  return USBD_OK;
}
 8003cc8:	2000      	movs	r0, #0
 8003cca:	4770      	bx	lr

08003ccc <USBD_CDC_ReceivePacket>:
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8003ccc:	f8d0 22b8 	ldr.w	r2, [r0, #696]	; 0x2b8

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8003cd0:	b192      	cbz	r2, 8003cf8 <USBD_CDC_ReceivePacket+0x2c>
{
 8003cd2:	b508      	push	{r3, lr}
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8003cd4:	7c03      	ldrb	r3, [r0, #16]
 8003cd6:	b943      	cbnz	r3, 8003cea <USBD_CDC_ReceivePacket+0x1e>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8003cd8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003cdc:	f8d2 2204 	ldr.w	r2, [r2, #516]	; 0x204
 8003ce0:	2101      	movs	r1, #1
 8003ce2:	f000 fecd 	bl	8004a80 <USBD_LL_PrepareReceive>
      USBD_LL_PrepareReceive(pdev,
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8003ce6:	2000      	movs	r0, #0
  }
  else
  {
    return USBD_FAIL;
  }
}
 8003ce8:	bd08      	pop	{r3, pc}
      USBD_LL_PrepareReceive(pdev,
 8003cea:	2340      	movs	r3, #64	; 0x40
 8003cec:	f8d2 2204 	ldr.w	r2, [r2, #516]	; 0x204
 8003cf0:	2101      	movs	r1, #1
 8003cf2:	f000 fec5 	bl	8004a80 <USBD_LL_PrepareReceive>
 8003cf6:	e7f6      	b.n	8003ce6 <USBD_CDC_ReceivePacket+0x1a>
    return USBD_FAIL;
 8003cf8:	2002      	movs	r0, #2
}
 8003cfa:	4770      	bx	lr

08003cfc <USBD_Init>:
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8003cfc:	b198      	cbz	r0, 8003d26 <USBD_Init+0x2a>
{
 8003cfe:	b508      	push	{r3, lr}
 8003d00:	4603      	mov	r3, r0
#endif
    return USBD_FAIL;
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8003d02:	f8d0 02b4 	ldr.w	r0, [r0, #692]	; 0x2b4
 8003d06:	b110      	cbz	r0, 8003d0e <USBD_Init+0x12>
  {
    pdev->pClass = NULL;
 8003d08:	2000      	movs	r0, #0
 8003d0a:	f8c3 02b4 	str.w	r0, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8003d0e:	b109      	cbz	r1, 8003d14 <USBD_Init+0x18>
  {
    pdev->pDesc = pdesc;
 8003d10:	f8c3 12b0 	str.w	r1, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8003d14:	2101      	movs	r1, #1
 8003d16:	f883 129c 	strb.w	r1, [r3, #668]	; 0x29c
  pdev->id = id;
 8003d1a:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8003d1c:	4618      	mov	r0, r3
 8003d1e:	f000 fe1f 	bl	8004960 <USBD_LL_Init>

  return USBD_OK;
 8003d22:	2000      	movs	r0, #0
}
 8003d24:	bd08      	pop	{r3, pc}
    return USBD_FAIL;
 8003d26:	2002      	movs	r0, #2
}
 8003d28:	4770      	bx	lr

08003d2a <USBD_RegisterClass>:
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
  USBD_StatusTypeDef status = USBD_OK;
  if (pclass != NULL)
 8003d2a:	b119      	cbz	r1, 8003d34 <USBD_RegisterClass+0xa>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8003d2c:	f8c0 12b4 	str.w	r1, [r0, #692]	; 0x2b4
    status = USBD_OK;
 8003d30:	2000      	movs	r0, #0
 8003d32:	4770      	bx	lr
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8003d34:	2002      	movs	r0, #2
  }

  return status;
}
 8003d36:	4770      	bx	lr

08003d38 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8003d38:	b508      	push	{r3, lr}
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8003d3a:	f000 fe53 	bl	80049e4 <USBD_LL_Start>

  return USBD_OK;
}
 8003d3e:	2000      	movs	r0, #0
 8003d40:	bd08      	pop	{r3, pc}

08003d42 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8003d42:	b508      	push	{r3, lr}
  USBD_StatusTypeDef ret = USBD_FAIL;

  if (pdev->pClass != NULL)
 8003d44:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8003d48:	b12b      	cbz	r3, 8003d56 <USBD_SetClassConfig+0x14>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	4798      	blx	r3
 8003d4e:	b900      	cbnz	r0, 8003d52 <USBD_SetClassConfig+0x10>
      ret = USBD_OK;
    }
  }

  return ret;
}
 8003d50:	bd08      	pop	{r3, pc}
  USBD_StatusTypeDef ret = USBD_FAIL;
 8003d52:	2002      	movs	r0, #2
 8003d54:	e7fc      	b.n	8003d50 <USBD_SetClassConfig+0xe>
 8003d56:	2002      	movs	r0, #2
 8003d58:	e7fa      	b.n	8003d50 <USBD_SetClassConfig+0xe>

08003d5a <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8003d5a:	b508      	push	{r3, lr}
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8003d5c:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8003d60:	685b      	ldr	r3, [r3, #4]
 8003d62:	4798      	blx	r3

  return USBD_OK;
}
 8003d64:	2000      	movs	r0, #0
 8003d66:	bd08      	pop	{r3, pc}

08003d68 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8003d68:	b538      	push	{r3, r4, r5, lr}
 8003d6a:	4604      	mov	r4, r0
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8003d6c:	f500 752a 	add.w	r5, r0, #680	; 0x2a8
 8003d70:	4628      	mov	r0, r5
 8003d72:	f000 f935 	bl	8003fe0 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8003d76:	2301      	movs	r3, #1
 8003d78:	f8c4 3294 	str.w	r3, [r4, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8003d7c:	f8b4 32ae 	ldrh.w	r3, [r4, #686]	; 0x2ae
 8003d80:	f8c4 3298 	str.w	r3, [r4, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8003d84:	f894 12a8 	ldrb.w	r1, [r4, #680]	; 0x2a8
 8003d88:	f001 031f 	and.w	r3, r1, #31
 8003d8c:	2b01      	cmp	r3, #1
 8003d8e:	d00e      	beq.n	8003dae <USBD_LL_SetupStage+0x46>
 8003d90:	2b02      	cmp	r3, #2
 8003d92:	d011      	beq.n	8003db8 <USBD_LL_SetupStage+0x50>
 8003d94:	b12b      	cbz	r3, 8003da2 <USBD_LL_SetupStage+0x3a>
    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
      break;

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8003d96:	f001 0180 	and.w	r1, r1, #128	; 0x80
 8003d9a:	4620      	mov	r0, r4
 8003d9c:	f000 fe3d 	bl	8004a1a <USBD_LL_StallEP>
      break;
 8003da0:	e003      	b.n	8003daa <USBD_LL_SetupStage+0x42>
      USBD_StdDevReq(pdev, &pdev->request);
 8003da2:	4629      	mov	r1, r5
 8003da4:	4620      	mov	r0, r4
 8003da6:	f000 fac9 	bl	800433c <USBD_StdDevReq>
  }

  return USBD_OK;
}
 8003daa:	2000      	movs	r0, #0
 8003dac:	bd38      	pop	{r3, r4, r5, pc}
      USBD_StdItfReq(pdev, &pdev->request);
 8003dae:	4629      	mov	r1, r5
 8003db0:	4620      	mov	r0, r4
 8003db2:	f000 faf7 	bl	80043a4 <USBD_StdItfReq>
      break;
 8003db6:	e7f8      	b.n	8003daa <USBD_LL_SetupStage+0x42>
      USBD_StdEPReq(pdev, &pdev->request);
 8003db8:	4629      	mov	r1, r5
 8003dba:	4620      	mov	r0, r4
 8003dbc:	f000 fb22 	bl	8004404 <USBD_StdEPReq>
      break;
 8003dc0:	e7f3      	b.n	8003daa <USBD_LL_SetupStage+0x42>

08003dc2 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8003dc2:	b538      	push	{r3, r4, r5, lr}
 8003dc4:	4604      	mov	r4, r0
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8003dc6:	460d      	mov	r5, r1
 8003dc8:	bb91      	cbnz	r1, 8003e30 <USBD_LL_DataOutStage+0x6e>
 8003dca:	4613      	mov	r3, r2
  {
    pep = &pdev->ep_out[0];

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8003dcc:	f8d0 2294 	ldr.w	r2, [r0, #660]	; 0x294
 8003dd0:	2a03      	cmp	r2, #3
 8003dd2:	d003      	beq.n	8003ddc <USBD_LL_DataOutStage+0x1a>
        USBD_CtlSendStatus(pdev);
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8003dd4:	2a05      	cmp	r2, #5
 8003dd6:	d024      	beq.n	8003e22 <USBD_LL_DataOutStage+0x60>
  {
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
 8003dd8:	4608      	mov	r0, r1
 8003dda:	e033      	b.n	8003e44 <USBD_LL_DataOutStage+0x82>
      if (pep->rem_length > pep->maxpacket)
 8003ddc:	f8d0 1160 	ldr.w	r1, [r0, #352]	; 0x160
 8003de0:	f8d0 2164 	ldr.w	r2, [r0, #356]	; 0x164
 8003de4:	4291      	cmp	r1, r2
 8003de6:	d90d      	bls.n	8003e04 <USBD_LL_DataOutStage+0x42>
        pep->rem_length -= pep->maxpacket;
 8003de8:	1a89      	subs	r1, r1, r2
 8003dea:	f8c0 1160 	str.w	r1, [r0, #352]	; 0x160
        USBD_CtlContinueRx(pdev, pdata,
 8003dee:	428a      	cmp	r2, r1
 8003df0:	d906      	bls.n	8003e00 <USBD_LL_DataOutStage+0x3e>
 8003df2:	b28a      	uxth	r2, r1
 8003df4:	4619      	mov	r1, r3
 8003df6:	4620      	mov	r0, r4
 8003df8:	f000 fc36 	bl	8004668 <USBD_CtlContinueRx>
  return USBD_OK;
 8003dfc:	4628      	mov	r0, r5
 8003dfe:	e021      	b.n	8003e44 <USBD_LL_DataOutStage+0x82>
        USBD_CtlContinueRx(pdev, pdata,
 8003e00:	b292      	uxth	r2, r2
 8003e02:	e7f7      	b.n	8003df4 <USBD_LL_DataOutStage+0x32>
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8003e04:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8003e08:	691b      	ldr	r3, [r3, #16]
 8003e0a:	b11b      	cbz	r3, 8003e14 <USBD_LL_DataOutStage+0x52>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8003e0c:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8003e10:	2a03      	cmp	r2, #3
 8003e12:	d004      	beq.n	8003e1e <USBD_LL_DataOutStage+0x5c>
        USBD_CtlSendStatus(pdev);
 8003e14:	4620      	mov	r0, r4
 8003e16:	f000 fc2f 	bl	8004678 <USBD_CtlSendStatus>
  return USBD_OK;
 8003e1a:	4628      	mov	r0, r5
 8003e1c:	e012      	b.n	8003e44 <USBD_LL_DataOutStage+0x82>
          pdev->pClass->EP0_RxReady(pdev);
 8003e1e:	4798      	blx	r3
 8003e20:	e7f8      	b.n	8003e14 <USBD_LL_DataOutStage+0x52>
        pdev->ep0_state = USBD_EP0_IDLE;
 8003e22:	2100      	movs	r1, #0
 8003e24:	f8c0 1294 	str.w	r1, [r0, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8003e28:	f000 fdf7 	bl	8004a1a <USBD_LL_StallEP>
  return USBD_OK;
 8003e2c:	4628      	mov	r0, r5
 8003e2e:	e009      	b.n	8003e44 <USBD_LL_DataOutStage+0x82>
  else if ((pdev->pClass->DataOut != NULL) &&
 8003e30:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8003e34:	699b      	ldr	r3, [r3, #24]
 8003e36:	b133      	cbz	r3, 8003e46 <USBD_LL_DataOutStage+0x84>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8003e38:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8003e3c:	2a03      	cmp	r2, #3
 8003e3e:	d104      	bne.n	8003e4a <USBD_LL_DataOutStage+0x88>
    pdev->pClass->DataOut(pdev, epnum);
 8003e40:	4798      	blx	r3
  return USBD_OK;
 8003e42:	2000      	movs	r0, #0
}
 8003e44:	bd38      	pop	{r3, r4, r5, pc}
    return USBD_FAIL;
 8003e46:	2002      	movs	r0, #2
 8003e48:	e7fc      	b.n	8003e44 <USBD_LL_DataOutStage+0x82>
 8003e4a:	2002      	movs	r0, #2
 8003e4c:	e7fa      	b.n	8003e44 <USBD_LL_DataOutStage+0x82>

08003e4e <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8003e4e:	b538      	push	{r3, r4, r5, lr}
 8003e50:	4604      	mov	r4, r0
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8003e52:	460d      	mov	r5, r1
 8003e54:	2900      	cmp	r1, #0
 8003e56:	d153      	bne.n	8003f00 <USBD_LL_DataInStage+0xb2>
 8003e58:	4613      	mov	r3, r2
  {
    pep = &pdev->ep_in[0];

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8003e5a:	f8d0 2294 	ldr.w	r2, [r0, #660]	; 0x294
 8003e5e:	2a02      	cmp	r2, #2
 8003e60:	d00c      	beq.n	8003e7c <USBD_LL_DataInStage+0x2e>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8003e62:	2a04      	cmp	r2, #4
 8003e64:	d000      	beq.n	8003e68 <USBD_LL_DataInStage+0x1a>
 8003e66:	b91a      	cbnz	r2, 8003e70 <USBD_LL_DataInStage+0x22>
          (pdev->ep0_state == USBD_EP0_IDLE))
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8003e68:	2180      	movs	r1, #128	; 0x80
 8003e6a:	4620      	mov	r0, r4
 8003e6c:	f000 fdd5 	bl	8004a1a <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8003e70:	f894 32a0 	ldrb.w	r3, [r4, #672]	; 0x2a0
 8003e74:	2b01      	cmp	r3, #1
 8003e76:	d03e      	beq.n	8003ef6 <USBD_LL_DataInStage+0xa8>
  {
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
 8003e78:	4628      	mov	r0, r5
}
 8003e7a:	bd38      	pop	{r3, r4, r5, pc}
      if (pep->rem_length > pep->maxpacket)
 8003e7c:	6a01      	ldr	r1, [r0, #32]
 8003e7e:	6a42      	ldr	r2, [r0, #36]	; 0x24
 8003e80:	4291      	cmp	r1, r2
 8003e82:	d81b      	bhi.n	8003ebc <USBD_LL_DataInStage+0x6e>
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8003e84:	69c1      	ldr	r1, [r0, #28]
 8003e86:	fbb1 f3f2 	udiv	r3, r1, r2
 8003e8a:	fb02 1313 	mls	r3, r2, r3, r1
 8003e8e:	b92b      	cbnz	r3, 8003e9c <USBD_LL_DataInStage+0x4e>
 8003e90:	428a      	cmp	r2, r1
 8003e92:	d803      	bhi.n	8003e9c <USBD_LL_DataInStage+0x4e>
            (pep->total_length < pdev->ep0_data_len))
 8003e94:	f8d0 3298 	ldr.w	r3, [r0, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8003e98:	4299      	cmp	r1, r3
 8003e9a:	d31c      	bcc.n	8003ed6 <USBD_LL_DataInStage+0x88>
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8003e9c:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
 8003ea0:	68db      	ldr	r3, [r3, #12]
 8003ea2:	b11b      	cbz	r3, 8003eac <USBD_LL_DataInStage+0x5e>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8003ea4:	f894 229c 	ldrb.w	r2, [r4, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8003ea8:	2a03      	cmp	r2, #3
 8003eaa:	d021      	beq.n	8003ef0 <USBD_LL_DataInStage+0xa2>
          USBD_LL_StallEP(pdev, 0x80U);
 8003eac:	2180      	movs	r1, #128	; 0x80
 8003eae:	4620      	mov	r0, r4
 8003eb0:	f000 fdb3 	bl	8004a1a <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8003eb4:	4620      	mov	r0, r4
 8003eb6:	f000 fbea 	bl	800468e <USBD_CtlReceiveStatus>
 8003eba:	e7d9      	b.n	8003e70 <USBD_LL_DataInStage+0x22>
        pep->rem_length -= pep->maxpacket;
 8003ebc:	1a8a      	subs	r2, r1, r2
 8003ebe:	6202      	str	r2, [r0, #32]
        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8003ec0:	b292      	uxth	r2, r2
 8003ec2:	4619      	mov	r1, r3
 8003ec4:	f000 fbb9 	bl	800463a <USBD_CtlContinueSendData>
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8003ec8:	2300      	movs	r3, #0
 8003eca:	461a      	mov	r2, r3
 8003ecc:	4619      	mov	r1, r3
 8003ece:	4620      	mov	r0, r4
 8003ed0:	f000 fdd6 	bl	8004a80 <USBD_LL_PrepareReceive>
 8003ed4:	e7cc      	b.n	8003e70 <USBD_LL_DataInStage+0x22>
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8003ed6:	2200      	movs	r2, #0
 8003ed8:	4611      	mov	r1, r2
 8003eda:	f000 fbae 	bl	800463a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8003ede:	2100      	movs	r1, #0
 8003ee0:	f8c4 1298 	str.w	r1, [r4, #664]	; 0x298
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8003ee4:	460b      	mov	r3, r1
 8003ee6:	460a      	mov	r2, r1
 8003ee8:	4620      	mov	r0, r4
 8003eea:	f000 fdc9 	bl	8004a80 <USBD_LL_PrepareReceive>
 8003eee:	e7bf      	b.n	8003e70 <USBD_LL_DataInStage+0x22>
            pdev->pClass->EP0_TxSent(pdev);
 8003ef0:	4620      	mov	r0, r4
 8003ef2:	4798      	blx	r3
 8003ef4:	e7da      	b.n	8003eac <USBD_LL_DataInStage+0x5e>
      pdev->dev_test_mode = 0U;
 8003ef6:	2300      	movs	r3, #0
 8003ef8:	f884 32a0 	strb.w	r3, [r4, #672]	; 0x2a0
  return USBD_OK;
 8003efc:	4628      	mov	r0, r5
 8003efe:	e7bc      	b.n	8003e7a <USBD_LL_DataInStage+0x2c>
  else if ((pdev->pClass->DataIn != NULL) &&
 8003f00:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8003f04:	695b      	ldr	r3, [r3, #20]
 8003f06:	b133      	cbz	r3, 8003f16 <USBD_LL_DataInStage+0xc8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8003f08:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8003f0c:	2a03      	cmp	r2, #3
 8003f0e:	d104      	bne.n	8003f1a <USBD_LL_DataInStage+0xcc>
    pdev->pClass->DataIn(pdev, epnum);
 8003f10:	4798      	blx	r3
  return USBD_OK;
 8003f12:	2000      	movs	r0, #0
    pdev->pClass->DataIn(pdev, epnum);
 8003f14:	e7b1      	b.n	8003e7a <USBD_LL_DataInStage+0x2c>
    return USBD_FAIL;
 8003f16:	2002      	movs	r0, #2
 8003f18:	e7af      	b.n	8003e7a <USBD_LL_DataInStage+0x2c>
 8003f1a:	2002      	movs	r0, #2
 8003f1c:	e7ad      	b.n	8003e7a <USBD_LL_DataInStage+0x2c>

08003f1e <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8003f1e:	b570      	push	{r4, r5, r6, lr}
 8003f20:	4604      	mov	r4, r0
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8003f22:	2340      	movs	r3, #64	; 0x40
 8003f24:	2200      	movs	r2, #0
 8003f26:	4611      	mov	r1, r2
 8003f28:	f000 fd64 	bl	80049f4 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8003f2c:	2501      	movs	r5, #1
 8003f2e:	f8c4 5158 	str.w	r5, [r4, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8003f32:	2640      	movs	r6, #64	; 0x40
 8003f34:	f8c4 6164 	str.w	r6, [r4, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8003f38:	4633      	mov	r3, r6
 8003f3a:	2200      	movs	r2, #0
 8003f3c:	2180      	movs	r1, #128	; 0x80
 8003f3e:	4620      	mov	r0, r4
 8003f40:	f000 fd58 	bl	80049f4 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8003f44:	61a5      	str	r5, [r4, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8003f46:	6266      	str	r6, [r4, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8003f48:	f884 529c 	strb.w	r5, [r4, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8003f4c:	2300      	movs	r3, #0
 8003f4e:	f8c4 3294 	str.w	r3, [r4, #660]	; 0x294
  pdev->dev_config = 0U;
 8003f52:	6063      	str	r3, [r4, #4]
  pdev->dev_remote_wakeup = 0U;
 8003f54:	f8c4 32a4 	str.w	r3, [r4, #676]	; 0x2a4

  if (pdev->pClassData)
 8003f58:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
 8003f5c:	b12b      	cbz	r3, 8003f6a <USBD_LL_Reset+0x4c>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8003f5e:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
 8003f62:	685b      	ldr	r3, [r3, #4]
 8003f64:	2100      	movs	r1, #0
 8003f66:	4620      	mov	r0, r4
 8003f68:	4798      	blx	r3
  }

  return USBD_OK;
}
 8003f6a:	2000      	movs	r0, #0
 8003f6c:	bd70      	pop	{r4, r5, r6, pc}

08003f6e <USBD_LL_SetSpeed>:
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
  pdev->dev_speed = speed;
 8003f6e:	7401      	strb	r1, [r0, #16]

  return USBD_OK;
}
 8003f70:	2000      	movs	r0, #0
 8003f72:	4770      	bx	lr

08003f74 <USBD_LL_Suspend>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
  pdev->dev_old_state =  pdev->dev_state;
 8003f74:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8003f78:	f880 329d 	strb.w	r3, [r0, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8003f7c:	2304      	movs	r3, #4
 8003f7e:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c

  return USBD_OK;
}
 8003f82:	2000      	movs	r0, #0
 8003f84:	4770      	bx	lr

08003f86 <USBD_LL_Resume>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8003f86:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8003f8a:	2b04      	cmp	r3, #4
 8003f8c:	d001      	beq.n	8003f92 <USBD_LL_Resume+0xc>
  {
    pdev->dev_state = pdev->dev_old_state;
  }

  return USBD_OK;
}
 8003f8e:	2000      	movs	r0, #0
 8003f90:	4770      	bx	lr
    pdev->dev_state = pdev->dev_old_state;
 8003f92:	f890 329d 	ldrb.w	r3, [r0, #669]	; 0x29d
 8003f96:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
 8003f9a:	e7f8      	b.n	8003f8e <USBD_LL_Resume+0x8>

08003f9c <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8003f9c:	b508      	push	{r3, lr}
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8003f9e:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8003fa2:	2b03      	cmp	r3, #3
 8003fa4:	d001      	beq.n	8003faa <USBD_LL_SOF+0xe>
      pdev->pClass->SOF(pdev);
    }
  }

  return USBD_OK;
}
 8003fa6:	2000      	movs	r0, #0
 8003fa8:	bd08      	pop	{r3, pc}
    if (pdev->pClass->SOF != NULL)
 8003faa:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8003fae:	69db      	ldr	r3, [r3, #28]
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d0f8      	beq.n	8003fa6 <USBD_LL_SOF+0xa>
      pdev->pClass->SOF(pdev);
 8003fb4:	4798      	blx	r3
 8003fb6:	e7f6      	b.n	8003fa6 <USBD_LL_SOF+0xa>

08003fb8 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8003fb8:	4603      	mov	r3, r0
  uint8_t  len = 0U;
 8003fba:	2000      	movs	r0, #0

  while (*buf != '\0')
 8003fbc:	e002      	b.n	8003fc4 <USBD_GetLen+0xc>
  {
    len++;
 8003fbe:	3001      	adds	r0, #1
 8003fc0:	b2c0      	uxtb	r0, r0
    buf++;
 8003fc2:	3301      	adds	r3, #1
  while (*buf != '\0')
 8003fc4:	781a      	ldrb	r2, [r3, #0]
 8003fc6:	2a00      	cmp	r2, #0
 8003fc8:	d1f9      	bne.n	8003fbe <USBD_GetLen+0x6>
  }

  return len;
}
 8003fca:	4770      	bx	lr

08003fcc <USBD_SetFeature>:
{
 8003fcc:	b508      	push	{r3, lr}
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8003fce:	884b      	ldrh	r3, [r1, #2]
 8003fd0:	2b01      	cmp	r3, #1
 8003fd2:	d000      	beq.n	8003fd6 <USBD_SetFeature+0xa>
}
 8003fd4:	bd08      	pop	{r3, pc}
    pdev->dev_remote_wakeup = 1U;
 8003fd6:	f8c0 32a4 	str.w	r3, [r0, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 8003fda:	f000 fb4d 	bl	8004678 <USBD_CtlSendStatus>
}
 8003fde:	e7f9      	b.n	8003fd4 <USBD_SetFeature+0x8>

08003fe0 <USBD_ParseSetupRequest>:
  req->bmRequest = *(uint8_t *)(pdata);
 8003fe0:	780b      	ldrb	r3, [r1, #0]
 8003fe2:	7003      	strb	r3, [r0, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8003fe4:	784b      	ldrb	r3, [r1, #1]
 8003fe6:	7043      	strb	r3, [r0, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8003fe8:	788b      	ldrb	r3, [r1, #2]
 8003fea:	78ca      	ldrb	r2, [r1, #3]
 8003fec:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8003ff0:	8043      	strh	r3, [r0, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8003ff2:	790b      	ldrb	r3, [r1, #4]
 8003ff4:	794a      	ldrb	r2, [r1, #5]
 8003ff6:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8003ffa:	8083      	strh	r3, [r0, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8003ffc:	798b      	ldrb	r3, [r1, #6]
 8003ffe:	79ca      	ldrb	r2, [r1, #7]
 8004000:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8004004:	80c3      	strh	r3, [r0, #6]
}
 8004006:	4770      	bx	lr

08004008 <USBD_CtlError>:
{
 8004008:	b510      	push	{r4, lr}
 800400a:	4604      	mov	r4, r0
  USBD_LL_StallEP(pdev, 0x80U);
 800400c:	2180      	movs	r1, #128	; 0x80
 800400e:	f000 fd04 	bl	8004a1a <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8004012:	2100      	movs	r1, #0
 8004014:	4620      	mov	r0, r4
 8004016:	f000 fd00 	bl	8004a1a <USBD_LL_StallEP>
}
 800401a:	bd10      	pop	{r4, pc}

0800401c <USBD_GetDescriptor>:
{
 800401c:	b530      	push	{r4, r5, lr}
 800401e:	b083      	sub	sp, #12
 8004020:	4605      	mov	r5, r0
 8004022:	460c      	mov	r4, r1
  uint16_t len = 0U;
 8004024:	2300      	movs	r3, #0
 8004026:	f8ad 3006 	strh.w	r3, [sp, #6]
  switch (req->wValue >> 8)
 800402a:	884a      	ldrh	r2, [r1, #2]
 800402c:	0a13      	lsrs	r3, r2, #8
 800402e:	3b01      	subs	r3, #1
 8004030:	2b06      	cmp	r3, #6
 8004032:	f200 80a4 	bhi.w	800417e <USBD_GetDescriptor+0x162>
 8004036:	e8df f003 	tbb	[pc, r3]
 800403a:	1804      	.short	0x1804
 800403c:	86a2a22c 	.word	0x86a2a22c
 8004040:	93          	.byte	0x93
 8004041:	00          	.byte	0x00
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8004042:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	f10d 0106 	add.w	r1, sp, #6
 800404c:	7c00      	ldrb	r0, [r0, #16]
 800404e:	4798      	blx	r3
    if ((len != 0U) && (req->wLength != 0U))
 8004050:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8004054:	b11a      	cbz	r2, 800405e <USBD_GetDescriptor+0x42>
 8004056:	88e3      	ldrh	r3, [r4, #6]
 8004058:	2b00      	cmp	r3, #0
 800405a:	f040 8094 	bne.w	8004186 <USBD_GetDescriptor+0x16a>
    if (req->wLength == 0U)
 800405e:	88e3      	ldrh	r3, [r4, #6]
 8004060:	2b00      	cmp	r3, #0
 8004062:	f000 809a 	beq.w	800419a <USBD_GetDescriptor+0x17e>
}
 8004066:	b003      	add	sp, #12
 8004068:	bd30      	pop	{r4, r5, pc}
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800406a:	7c03      	ldrb	r3, [r0, #16]
 800406c:	b943      	cbnz	r3, 8004080 <USBD_GetDescriptor+0x64>
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800406e:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8004072:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004074:	f10d 0006 	add.w	r0, sp, #6
 8004078:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800407a:	2302      	movs	r3, #2
 800407c:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 800407e:	e7e7      	b.n	8004050 <USBD_GetDescriptor+0x34>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8004080:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8004084:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004086:	f10d 0006 	add.w	r0, sp, #6
 800408a:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800408c:	2302      	movs	r3, #2
 800408e:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 8004090:	e7de      	b.n	8004050 <USBD_GetDescriptor+0x34>
      switch ((uint8_t)(req->wValue))
 8004092:	b2d2      	uxtb	r2, r2
 8004094:	2a05      	cmp	r2, #5
 8004096:	d852      	bhi.n	800413e <USBD_GetDescriptor+0x122>
 8004098:	e8df f002 	tbb	[pc, r2]
 800409c:	2a1d1003 	.word	0x2a1d1003
 80040a0:	4437      	.short	0x4437
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80040a2:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 80040a6:	685b      	ldr	r3, [r3, #4]
 80040a8:	b123      	cbz	r3, 80040b4 <USBD_GetDescriptor+0x98>
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80040aa:	f10d 0106 	add.w	r1, sp, #6
 80040ae:	7c00      	ldrb	r0, [r0, #16]
 80040b0:	4798      	blx	r3
  if (err != 0U)
 80040b2:	e7cd      	b.n	8004050 <USBD_GetDescriptor+0x34>
            USBD_CtlError(pdev, req);
 80040b4:	4621      	mov	r1, r4
 80040b6:	f7ff ffa7 	bl	8004008 <USBD_CtlError>
  if (err != 0U)
 80040ba:	e7d4      	b.n	8004066 <USBD_GetDescriptor+0x4a>
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80040bc:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 80040c0:	689b      	ldr	r3, [r3, #8]
 80040c2:	b123      	cbz	r3, 80040ce <USBD_GetDescriptor+0xb2>
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80040c4:	f10d 0106 	add.w	r1, sp, #6
 80040c8:	7c00      	ldrb	r0, [r0, #16]
 80040ca:	4798      	blx	r3
  if (err != 0U)
 80040cc:	e7c0      	b.n	8004050 <USBD_GetDescriptor+0x34>
            USBD_CtlError(pdev, req);
 80040ce:	4621      	mov	r1, r4
 80040d0:	f7ff ff9a 	bl	8004008 <USBD_CtlError>
  if (err != 0U)
 80040d4:	e7c7      	b.n	8004066 <USBD_GetDescriptor+0x4a>
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80040d6:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 80040da:	68db      	ldr	r3, [r3, #12]
 80040dc:	b123      	cbz	r3, 80040e8 <USBD_GetDescriptor+0xcc>
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80040de:	f10d 0106 	add.w	r1, sp, #6
 80040e2:	7c00      	ldrb	r0, [r0, #16]
 80040e4:	4798      	blx	r3
  if (err != 0U)
 80040e6:	e7b3      	b.n	8004050 <USBD_GetDescriptor+0x34>
            USBD_CtlError(pdev, req);
 80040e8:	4621      	mov	r1, r4
 80040ea:	f7ff ff8d 	bl	8004008 <USBD_CtlError>
  if (err != 0U)
 80040ee:	e7ba      	b.n	8004066 <USBD_GetDescriptor+0x4a>
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80040f0:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 80040f4:	691b      	ldr	r3, [r3, #16]
 80040f6:	b123      	cbz	r3, 8004102 <USBD_GetDescriptor+0xe6>
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80040f8:	f10d 0106 	add.w	r1, sp, #6
 80040fc:	7c00      	ldrb	r0, [r0, #16]
 80040fe:	4798      	blx	r3
  if (err != 0U)
 8004100:	e7a6      	b.n	8004050 <USBD_GetDescriptor+0x34>
            USBD_CtlError(pdev, req);
 8004102:	4621      	mov	r1, r4
 8004104:	f7ff ff80 	bl	8004008 <USBD_CtlError>
  if (err != 0U)
 8004108:	e7ad      	b.n	8004066 <USBD_GetDescriptor+0x4a>
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800410a:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 800410e:	695b      	ldr	r3, [r3, #20]
 8004110:	b123      	cbz	r3, 800411c <USBD_GetDescriptor+0x100>
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8004112:	f10d 0106 	add.w	r1, sp, #6
 8004116:	7c00      	ldrb	r0, [r0, #16]
 8004118:	4798      	blx	r3
  if (err != 0U)
 800411a:	e799      	b.n	8004050 <USBD_GetDescriptor+0x34>
            USBD_CtlError(pdev, req);
 800411c:	4621      	mov	r1, r4
 800411e:	f7ff ff73 	bl	8004008 <USBD_CtlError>
  if (err != 0U)
 8004122:	e7a0      	b.n	8004066 <USBD_GetDescriptor+0x4a>
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8004124:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 8004128:	699b      	ldr	r3, [r3, #24]
 800412a:	b123      	cbz	r3, 8004136 <USBD_GetDescriptor+0x11a>
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800412c:	f10d 0106 	add.w	r1, sp, #6
 8004130:	7c00      	ldrb	r0, [r0, #16]
 8004132:	4798      	blx	r3
  if (err != 0U)
 8004134:	e78c      	b.n	8004050 <USBD_GetDescriptor+0x34>
            USBD_CtlError(pdev, req);
 8004136:	4621      	mov	r1, r4
 8004138:	f7ff ff66 	bl	8004008 <USBD_CtlError>
  if (err != 0U)
 800413c:	e793      	b.n	8004066 <USBD_GetDescriptor+0x4a>
          USBD_CtlError(pdev, req);
 800413e:	4621      	mov	r1, r4
 8004140:	f7ff ff62 	bl	8004008 <USBD_CtlError>
  if (err != 0U)
 8004144:	e78f      	b.n	8004066 <USBD_GetDescriptor+0x4a>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004146:	7c03      	ldrb	r3, [r0, #16]
 8004148:	b933      	cbnz	r3, 8004158 <USBD_GetDescriptor+0x13c>
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800414a:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800414e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004150:	f10d 0006 	add.w	r0, sp, #6
 8004154:	4798      	blx	r3
  if (err != 0U)
 8004156:	e77b      	b.n	8004050 <USBD_GetDescriptor+0x34>
        USBD_CtlError(pdev, req);
 8004158:	4621      	mov	r1, r4
 800415a:	f7ff ff55 	bl	8004008 <USBD_CtlError>
  if (err != 0U)
 800415e:	e782      	b.n	8004066 <USBD_GetDescriptor+0x4a>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004160:	7c03      	ldrb	r3, [r0, #16]
 8004162:	b943      	cbnz	r3, 8004176 <USBD_GetDescriptor+0x15a>
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8004164:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8004168:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800416a:	f10d 0006 	add.w	r0, sp, #6
 800416e:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8004170:	2307      	movs	r3, #7
 8004172:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 8004174:	e76c      	b.n	8004050 <USBD_GetDescriptor+0x34>
        USBD_CtlError(pdev, req);
 8004176:	4621      	mov	r1, r4
 8004178:	f7ff ff46 	bl	8004008 <USBD_CtlError>
  if (err != 0U)
 800417c:	e773      	b.n	8004066 <USBD_GetDescriptor+0x4a>
      USBD_CtlError(pdev, req);
 800417e:	4621      	mov	r1, r4
 8004180:	f7ff ff42 	bl	8004008 <USBD_CtlError>
    return;
 8004184:	e76f      	b.n	8004066 <USBD_GetDescriptor+0x4a>
      len = MIN(len, req->wLength);
 8004186:	429a      	cmp	r2, r3
 8004188:	bf28      	it	cs
 800418a:	461a      	movcs	r2, r3
 800418c:	f8ad 2006 	strh.w	r2, [sp, #6]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8004190:	4601      	mov	r1, r0
 8004192:	4628      	mov	r0, r5
 8004194:	f000 fa44 	bl	8004620 <USBD_CtlSendData>
 8004198:	e761      	b.n	800405e <USBD_GetDescriptor+0x42>
      (void)USBD_CtlSendStatus(pdev);
 800419a:	4628      	mov	r0, r5
 800419c:	f000 fa6c 	bl	8004678 <USBD_CtlSendStatus>
 80041a0:	e761      	b.n	8004066 <USBD_GetDescriptor+0x4a>

080041a2 <USBD_SetAddress>:
{
 80041a2:	b538      	push	{r3, r4, r5, lr}
 80041a4:	4604      	mov	r4, r0
  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80041a6:	888b      	ldrh	r3, [r1, #4]
 80041a8:	b9f3      	cbnz	r3, 80041e8 <USBD_SetAddress+0x46>
 80041aa:	88cb      	ldrh	r3, [r1, #6]
 80041ac:	b9e3      	cbnz	r3, 80041e8 <USBD_SetAddress+0x46>
 80041ae:	884b      	ldrh	r3, [r1, #2]
 80041b0:	2b7f      	cmp	r3, #127	; 0x7f
 80041b2:	d819      	bhi.n	80041e8 <USBD_SetAddress+0x46>
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80041b4:	f003 057f 	and.w	r5, r3, #127	; 0x7f
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80041b8:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80041bc:	2b03      	cmp	r3, #3
 80041be:	d00c      	beq.n	80041da <USBD_SetAddress+0x38>
      pdev->dev_address = dev_addr;
 80041c0:	f880 529e 	strb.w	r5, [r0, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 80041c4:	4629      	mov	r1, r5
 80041c6:	f000 fc4b 	bl	8004a60 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 80041ca:	4620      	mov	r0, r4
 80041cc:	f000 fa54 	bl	8004678 <USBD_CtlSendStatus>
      if (dev_addr != 0U)
 80041d0:	b135      	cbz	r5, 80041e0 <USBD_SetAddress+0x3e>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80041d2:	2302      	movs	r3, #2
 80041d4:	f884 329c 	strb.w	r3, [r4, #668]	; 0x29c
 80041d8:	e009      	b.n	80041ee <USBD_SetAddress+0x4c>
      USBD_CtlError(pdev, req);
 80041da:	f7ff ff15 	bl	8004008 <USBD_CtlError>
 80041de:	e006      	b.n	80041ee <USBD_SetAddress+0x4c>
        pdev->dev_state = USBD_STATE_DEFAULT;
 80041e0:	2301      	movs	r3, #1
 80041e2:	f884 329c 	strb.w	r3, [r4, #668]	; 0x29c
 80041e6:	e002      	b.n	80041ee <USBD_SetAddress+0x4c>
    USBD_CtlError(pdev, req);
 80041e8:	4620      	mov	r0, r4
 80041ea:	f7ff ff0d 	bl	8004008 <USBD_CtlError>
}
 80041ee:	bd38      	pop	{r3, r4, r5, pc}

080041f0 <USBD_SetConfig>:
{
 80041f0:	b538      	push	{r3, r4, r5, lr}
 80041f2:	4604      	mov	r4, r0
 80041f4:	460d      	mov	r5, r1
  cfgidx = (uint8_t)(req->wValue);
 80041f6:	7889      	ldrb	r1, [r1, #2]
 80041f8:	4b28      	ldr	r3, [pc, #160]	; (800429c <USBD_SetConfig+0xac>)
 80041fa:	7019      	strb	r1, [r3, #0]
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80041fc:	2901      	cmp	r1, #1
 80041fe:	d80e      	bhi.n	800421e <USBD_SetConfig+0x2e>
    switch (pdev->dev_state)
 8004200:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8004204:	2b02      	cmp	r3, #2
 8004206:	d00e      	beq.n	8004226 <USBD_SetConfig+0x36>
 8004208:	2b03      	cmp	r3, #3
 800420a:	d021      	beq.n	8004250 <USBD_SetConfig+0x60>
        USBD_CtlError(pdev, req);
 800420c:	4629      	mov	r1, r5
 800420e:	f7ff fefb 	bl	8004008 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8004212:	4b22      	ldr	r3, [pc, #136]	; (800429c <USBD_SetConfig+0xac>)
 8004214:	7819      	ldrb	r1, [r3, #0]
 8004216:	4620      	mov	r0, r4
 8004218:	f7ff fd9f 	bl	8003d5a <USBD_ClrClassConfig>
        break;
 800421c:	e002      	b.n	8004224 <USBD_SetConfig+0x34>
    USBD_CtlError(pdev, req);
 800421e:	4629      	mov	r1, r5
 8004220:	f7ff fef2 	bl	8004008 <USBD_CtlError>
}
 8004224:	bd38      	pop	{r3, r4, r5, pc}
        if (cfgidx)
 8004226:	b181      	cbz	r1, 800424a <USBD_SetConfig+0x5a>
          pdev->dev_config = cfgidx;
 8004228:	6041      	str	r1, [r0, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800422a:	2303      	movs	r3, #3
 800422c:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8004230:	f7ff fd87 	bl	8003d42 <USBD_SetClassConfig>
 8004234:	2802      	cmp	r0, #2
 8004236:	d003      	beq.n	8004240 <USBD_SetConfig+0x50>
          USBD_CtlSendStatus(pdev);
 8004238:	4620      	mov	r0, r4
 800423a:	f000 fa1d 	bl	8004678 <USBD_CtlSendStatus>
 800423e:	e7f1      	b.n	8004224 <USBD_SetConfig+0x34>
            USBD_CtlError(pdev, req);
 8004240:	4629      	mov	r1, r5
 8004242:	4620      	mov	r0, r4
 8004244:	f7ff fee0 	bl	8004008 <USBD_CtlError>
            return;
 8004248:	e7ec      	b.n	8004224 <USBD_SetConfig+0x34>
          USBD_CtlSendStatus(pdev);
 800424a:	f000 fa15 	bl	8004678 <USBD_CtlSendStatus>
 800424e:	e7e9      	b.n	8004224 <USBD_SetConfig+0x34>
        if (cfgidx == 0U)
 8004250:	b189      	cbz	r1, 8004276 <USBD_SetConfig+0x86>
        else if (cfgidx != pdev->dev_config)
 8004252:	6843      	ldr	r3, [r0, #4]
 8004254:	4299      	cmp	r1, r3
 8004256:	d01d      	beq.n	8004294 <USBD_SetConfig+0xa4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8004258:	b2d9      	uxtb	r1, r3
 800425a:	f7ff fd7e 	bl	8003d5a <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800425e:	4b0f      	ldr	r3, [pc, #60]	; (800429c <USBD_SetConfig+0xac>)
 8004260:	7819      	ldrb	r1, [r3, #0]
 8004262:	6061      	str	r1, [r4, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8004264:	4620      	mov	r0, r4
 8004266:	f7ff fd6c 	bl	8003d42 <USBD_SetClassConfig>
 800426a:	2802      	cmp	r0, #2
 800426c:	d00d      	beq.n	800428a <USBD_SetConfig+0x9a>
          USBD_CtlSendStatus(pdev);
 800426e:	4620      	mov	r0, r4
 8004270:	f000 fa02 	bl	8004678 <USBD_CtlSendStatus>
 8004274:	e7d6      	b.n	8004224 <USBD_SetConfig+0x34>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8004276:	2302      	movs	r3, #2
 8004278:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 800427c:	6041      	str	r1, [r0, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800427e:	f7ff fd6c 	bl	8003d5a <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8004282:	4620      	mov	r0, r4
 8004284:	f000 f9f8 	bl	8004678 <USBD_CtlSendStatus>
 8004288:	e7cc      	b.n	8004224 <USBD_SetConfig+0x34>
            USBD_CtlError(pdev, req);
 800428a:	4629      	mov	r1, r5
 800428c:	4620      	mov	r0, r4
 800428e:	f7ff febb 	bl	8004008 <USBD_CtlError>
            return;
 8004292:	e7c7      	b.n	8004224 <USBD_SetConfig+0x34>
          USBD_CtlSendStatus(pdev);
 8004294:	f000 f9f0 	bl	8004678 <USBD_CtlSendStatus>
 8004298:	e7c4      	b.n	8004224 <USBD_SetConfig+0x34>
 800429a:	bf00      	nop
 800429c:	20000490 	.word	0x20000490

080042a0 <USBD_GetConfig>:
{
 80042a0:	b508      	push	{r3, lr}
  if (req->wLength != 1U)
 80042a2:	88cb      	ldrh	r3, [r1, #6]
 80042a4:	2b01      	cmp	r3, #1
 80042a6:	d10a      	bne.n	80042be <USBD_GetConfig+0x1e>
    switch (pdev->dev_state)
 80042a8:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80042ac:	2b02      	cmp	r3, #2
 80042ae:	d909      	bls.n	80042c4 <USBD_GetConfig+0x24>
 80042b0:	2b03      	cmp	r3, #3
 80042b2:	d109      	bne.n	80042c8 <USBD_GetConfig+0x28>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 80042b4:	2201      	movs	r2, #1
 80042b6:	1d01      	adds	r1, r0, #4
 80042b8:	f000 f9b2 	bl	8004620 <USBD_CtlSendData>
        break;
 80042bc:	e001      	b.n	80042c2 <USBD_GetConfig+0x22>
    USBD_CtlError(pdev, req);
 80042be:	f7ff fea3 	bl	8004008 <USBD_CtlError>
}
 80042c2:	bd08      	pop	{r3, pc}
    switch (pdev->dev_state)
 80042c4:	b25b      	sxtb	r3, r3
 80042c6:	b913      	cbnz	r3, 80042ce <USBD_GetConfig+0x2e>
        USBD_CtlError(pdev, req);
 80042c8:	f7ff fe9e 	bl	8004008 <USBD_CtlError>
}
 80042cc:	e7f9      	b.n	80042c2 <USBD_GetConfig+0x22>
        pdev->dev_default_config = 0U;
 80042ce:	4601      	mov	r1, r0
 80042d0:	2300      	movs	r3, #0
 80042d2:	f841 3f08 	str.w	r3, [r1, #8]!
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 80042d6:	2201      	movs	r2, #1
 80042d8:	f000 f9a2 	bl	8004620 <USBD_CtlSendData>
        break;
 80042dc:	e7f1      	b.n	80042c2 <USBD_GetConfig+0x22>

080042de <USBD_GetStatus>:
{
 80042de:	b508      	push	{r3, lr}
  switch (pdev->dev_state)
 80042e0:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80042e4:	3b01      	subs	r3, #1
 80042e6:	2b02      	cmp	r3, #2
 80042e8:	d812      	bhi.n	8004310 <USBD_GetStatus+0x32>
      if (req->wLength != 0x2U)
 80042ea:	88cb      	ldrh	r3, [r1, #6]
 80042ec:	2b02      	cmp	r3, #2
 80042ee:	d10c      	bne.n	800430a <USBD_GetStatus+0x2c>
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80042f0:	2301      	movs	r3, #1
 80042f2:	60c3      	str	r3, [r0, #12]
      if (pdev->dev_remote_wakeup)
 80042f4:	f8d0 32a4 	ldr.w	r3, [r0, #676]	; 0x2a4
 80042f8:	b10b      	cbz	r3, 80042fe <USBD_GetStatus+0x20>
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80042fa:	2303      	movs	r3, #3
 80042fc:	60c3      	str	r3, [r0, #12]
      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 80042fe:	2202      	movs	r2, #2
 8004300:	f100 010c 	add.w	r1, r0, #12
 8004304:	f000 f98c 	bl	8004620 <USBD_CtlSendData>
}
 8004308:	bd08      	pop	{r3, pc}
        USBD_CtlError(pdev, req);
 800430a:	f7ff fe7d 	bl	8004008 <USBD_CtlError>
        break;
 800430e:	e7fb      	b.n	8004308 <USBD_GetStatus+0x2a>
      USBD_CtlError(pdev, req);
 8004310:	f7ff fe7a 	bl	8004008 <USBD_CtlError>
}
 8004314:	e7f8      	b.n	8004308 <USBD_GetStatus+0x2a>

08004316 <USBD_ClrFeature>:
{
 8004316:	b508      	push	{r3, lr}
  switch (pdev->dev_state)
 8004318:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800431c:	3b01      	subs	r3, #1
 800431e:	2b02      	cmp	r3, #2
 8004320:	d809      	bhi.n	8004336 <USBD_ClrFeature+0x20>
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8004322:	884b      	ldrh	r3, [r1, #2]
 8004324:	2b01      	cmp	r3, #1
 8004326:	d000      	beq.n	800432a <USBD_ClrFeature+0x14>
}
 8004328:	bd08      	pop	{r3, pc}
        pdev->dev_remote_wakeup = 0U;
 800432a:	2300      	movs	r3, #0
 800432c:	f8c0 32a4 	str.w	r3, [r0, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 8004330:	f000 f9a2 	bl	8004678 <USBD_CtlSendStatus>
 8004334:	e7f8      	b.n	8004328 <USBD_ClrFeature+0x12>
      USBD_CtlError(pdev, req);
 8004336:	f7ff fe67 	bl	8004008 <USBD_CtlError>
}
 800433a:	e7f5      	b.n	8004328 <USBD_ClrFeature+0x12>

0800433c <USBD_StdDevReq>:
{
 800433c:	b508      	push	{r3, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800433e:	780b      	ldrb	r3, [r1, #0]
 8004340:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8004344:	2b20      	cmp	r3, #32
 8004346:	d005      	beq.n	8004354 <USBD_StdDevReq+0x18>
 8004348:	2b40      	cmp	r3, #64	; 0x40
 800434a:	d003      	beq.n	8004354 <USBD_StdDevReq+0x18>
 800434c:	b143      	cbz	r3, 8004360 <USBD_StdDevReq+0x24>
      USBD_CtlError(pdev, req);
 800434e:	f7ff fe5b 	bl	8004008 <USBD_CtlError>
      break;
 8004352:	e003      	b.n	800435c <USBD_StdDevReq+0x20>
      pdev->pClass->Setup(pdev, req);
 8004354:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8004358:	689b      	ldr	r3, [r3, #8]
 800435a:	4798      	blx	r3
}
 800435c:	2000      	movs	r0, #0
 800435e:	bd08      	pop	{r3, pc}
      switch (req->bRequest)
 8004360:	784b      	ldrb	r3, [r1, #1]
 8004362:	2b09      	cmp	r3, #9
 8004364:	d81b      	bhi.n	800439e <USBD_StdDevReq+0x62>
 8004366:	e8df f003 	tbb	[pc, r3]
 800436a:	1711      	.short	0x1711
 800436c:	081a141a 	.word	0x081a141a
 8004370:	0b0e1a05 	.word	0x0b0e1a05
          USBD_GetDescriptor(pdev, req);
 8004374:	f7ff fe52 	bl	800401c <USBD_GetDescriptor>
          break;
 8004378:	e7f0      	b.n	800435c <USBD_StdDevReq+0x20>
          USBD_SetAddress(pdev, req);
 800437a:	f7ff ff12 	bl	80041a2 <USBD_SetAddress>
          break;
 800437e:	e7ed      	b.n	800435c <USBD_StdDevReq+0x20>
          USBD_SetConfig(pdev, req);
 8004380:	f7ff ff36 	bl	80041f0 <USBD_SetConfig>
          break;
 8004384:	e7ea      	b.n	800435c <USBD_StdDevReq+0x20>
          USBD_GetConfig(pdev, req);
 8004386:	f7ff ff8b 	bl	80042a0 <USBD_GetConfig>
          break;
 800438a:	e7e7      	b.n	800435c <USBD_StdDevReq+0x20>
          USBD_GetStatus(pdev, req);
 800438c:	f7ff ffa7 	bl	80042de <USBD_GetStatus>
          break;
 8004390:	e7e4      	b.n	800435c <USBD_StdDevReq+0x20>
          USBD_SetFeature(pdev, req);
 8004392:	f7ff fe1b 	bl	8003fcc <USBD_SetFeature>
          break;
 8004396:	e7e1      	b.n	800435c <USBD_StdDevReq+0x20>
          USBD_ClrFeature(pdev, req);
 8004398:	f7ff ffbd 	bl	8004316 <USBD_ClrFeature>
          break;
 800439c:	e7de      	b.n	800435c <USBD_StdDevReq+0x20>
          USBD_CtlError(pdev, req);
 800439e:	f7ff fe33 	bl	8004008 <USBD_CtlError>
          break;
 80043a2:	e7db      	b.n	800435c <USBD_StdDevReq+0x20>

080043a4 <USBD_StdItfReq>:
{
 80043a4:	b538      	push	{r3, r4, r5, lr}
 80043a6:	4605      	mov	r5, r0
 80043a8:	460c      	mov	r4, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80043aa:	780b      	ldrb	r3, [r1, #0]
 80043ac:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80043b0:	2b20      	cmp	r3, #32
 80043b2:	d006      	beq.n	80043c2 <USBD_StdItfReq+0x1e>
 80043b4:	2b40      	cmp	r3, #64	; 0x40
 80043b6:	d004      	beq.n	80043c2 <USBD_StdItfReq+0x1e>
 80043b8:	b11b      	cbz	r3, 80043c2 <USBD_StdItfReq+0x1e>
      USBD_CtlError(pdev, req);
 80043ba:	f7ff fe25 	bl	8004008 <USBD_CtlError>
}
 80043be:	2000      	movs	r0, #0
 80043c0:	bd38      	pop	{r3, r4, r5, pc}
      switch (pdev->dev_state)
 80043c2:	f895 329c 	ldrb.w	r3, [r5, #668]	; 0x29c
 80043c6:	3b01      	subs	r3, #1
 80043c8:	2b02      	cmp	r3, #2
 80043ca:	d816      	bhi.n	80043fa <USBD_StdItfReq+0x56>
          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80043cc:	7923      	ldrb	r3, [r4, #4]
 80043ce:	2b01      	cmp	r3, #1
 80043d0:	d80e      	bhi.n	80043f0 <USBD_StdItfReq+0x4c>
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80043d2:	f8d5 32b4 	ldr.w	r3, [r5, #692]	; 0x2b4
 80043d6:	689b      	ldr	r3, [r3, #8]
 80043d8:	4621      	mov	r1, r4
 80043da:	4628      	mov	r0, r5
 80043dc:	4798      	blx	r3
            if ((req->wLength == 0U) && (ret == USBD_OK))
 80043de:	88e3      	ldrh	r3, [r4, #6]
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d1ec      	bne.n	80043be <USBD_StdItfReq+0x1a>
 80043e4:	2800      	cmp	r0, #0
 80043e6:	d1ea      	bne.n	80043be <USBD_StdItfReq+0x1a>
              USBD_CtlSendStatus(pdev);
 80043e8:	4628      	mov	r0, r5
 80043ea:	f000 f945 	bl	8004678 <USBD_CtlSendStatus>
 80043ee:	e7e6      	b.n	80043be <USBD_StdItfReq+0x1a>
            USBD_CtlError(pdev, req);
 80043f0:	4621      	mov	r1, r4
 80043f2:	4628      	mov	r0, r5
 80043f4:	f7ff fe08 	bl	8004008 <USBD_CtlError>
 80043f8:	e7e1      	b.n	80043be <USBD_StdItfReq+0x1a>
          USBD_CtlError(pdev, req);
 80043fa:	4621      	mov	r1, r4
 80043fc:	4628      	mov	r0, r5
 80043fe:	f7ff fe03 	bl	8004008 <USBD_CtlError>
          break;
 8004402:	e7dc      	b.n	80043be <USBD_StdItfReq+0x1a>

08004404 <USBD_StdEPReq>:
{
 8004404:	b570      	push	{r4, r5, r6, lr}
 8004406:	4605      	mov	r5, r0
  ep_addr  = LOBYTE(req->wIndex);
 8004408:	888b      	ldrh	r3, [r1, #4]
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800440a:	780c      	ldrb	r4, [r1, #0]
 800440c:	f004 0460 	and.w	r4, r4, #96	; 0x60
 8004410:	2c20      	cmp	r4, #32
 8004412:	d007      	beq.n	8004424 <USBD_StdEPReq+0x20>
 8004414:	b2da      	uxtb	r2, r3
 8004416:	2c40      	cmp	r4, #64	; 0x40
 8004418:	d004      	beq.n	8004424 <USBD_StdEPReq+0x20>
 800441a:	b15c      	cbz	r4, 8004434 <USBD_StdEPReq+0x30>
      USBD_CtlError(pdev, req);
 800441c:	f7ff fdf4 	bl	8004008 <USBD_CtlError>
  return ret;
 8004420:	2400      	movs	r4, #0
      break;
 8004422:	e005      	b.n	8004430 <USBD_StdEPReq+0x2c>
      pdev->pClass->Setup(pdev, req);
 8004424:	f8d5 32b4 	ldr.w	r3, [r5, #692]	; 0x2b4
 8004428:	689b      	ldr	r3, [r3, #8]
 800442a:	4628      	mov	r0, r5
 800442c:	4798      	blx	r3
  return ret;
 800442e:	2400      	movs	r4, #0
}
 8004430:	4620      	mov	r0, r4
 8004432:	bd70      	pop	{r4, r5, r6, pc}
      if ((req->bmRequest & 0x60U) == 0x20U)
 8004434:	2c20      	cmp	r4, #32
 8004436:	d009      	beq.n	800444c <USBD_StdEPReq+0x48>
      switch (req->bRequest)
 8004438:	784e      	ldrb	r6, [r1, #1]
 800443a:	2e01      	cmp	r6, #1
 800443c:	d033      	beq.n	80044a6 <USBD_StdEPReq+0xa2>
 800443e:	2e03      	cmp	r6, #3
 8004440:	d00a      	beq.n	8004458 <USBD_StdEPReq+0x54>
 8004442:	2e00      	cmp	r6, #0
 8004444:	d055      	beq.n	80044f2 <USBD_StdEPReq+0xee>
          USBD_CtlError(pdev, req);
 8004446:	f7ff fddf 	bl	8004008 <USBD_CtlError>
          break;
 800444a:	e7f1      	b.n	8004430 <USBD_StdEPReq+0x2c>
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800444c:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8004450:	689b      	ldr	r3, [r3, #8]
 8004452:	4798      	blx	r3
 8004454:	4604      	mov	r4, r0
        return ret;
 8004456:	e7eb      	b.n	8004430 <USBD_StdEPReq+0x2c>
          switch (pdev->dev_state)
 8004458:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800445c:	2b02      	cmp	r3, #2
 800445e:	d004      	beq.n	800446a <USBD_StdEPReq+0x66>
 8004460:	2b03      	cmp	r3, #3
 8004462:	d011      	beq.n	8004488 <USBD_StdEPReq+0x84>
              USBD_CtlError(pdev, req);
 8004464:	f7ff fdd0 	bl	8004008 <USBD_CtlError>
              break;
 8004468:	e7e2      	b.n	8004430 <USBD_StdEPReq+0x2c>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800446a:	b10a      	cbz	r2, 8004470 <USBD_StdEPReq+0x6c>
 800446c:	2a80      	cmp	r2, #128	; 0x80
 800446e:	d103      	bne.n	8004478 <USBD_StdEPReq+0x74>
                USBD_CtlError(pdev, req);
 8004470:	4628      	mov	r0, r5
 8004472:	f7ff fdc9 	bl	8004008 <USBD_CtlError>
 8004476:	e7db      	b.n	8004430 <USBD_StdEPReq+0x2c>
                USBD_LL_StallEP(pdev, ep_addr);
 8004478:	4611      	mov	r1, r2
 800447a:	f000 face 	bl	8004a1a <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800447e:	2180      	movs	r1, #128	; 0x80
 8004480:	4628      	mov	r0, r5
 8004482:	f000 faca 	bl	8004a1a <USBD_LL_StallEP>
 8004486:	e7d3      	b.n	8004430 <USBD_StdEPReq+0x2c>
              if (req->wValue == USB_FEATURE_EP_HALT)
 8004488:	884b      	ldrh	r3, [r1, #2]
 800448a:	b923      	cbnz	r3, 8004496 <USBD_StdEPReq+0x92>
                if ((ep_addr != 0x00U) &&
 800448c:	b11a      	cbz	r2, 8004496 <USBD_StdEPReq+0x92>
 800448e:	2a80      	cmp	r2, #128	; 0x80
 8004490:	d001      	beq.n	8004496 <USBD_StdEPReq+0x92>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8004492:	88cb      	ldrh	r3, [r1, #6]
 8004494:	b11b      	cbz	r3, 800449e <USBD_StdEPReq+0x9a>
              USBD_CtlSendStatus(pdev);
 8004496:	4628      	mov	r0, r5
 8004498:	f000 f8ee 	bl	8004678 <USBD_CtlSendStatus>
              break;
 800449c:	e7c8      	b.n	8004430 <USBD_StdEPReq+0x2c>
                  USBD_LL_StallEP(pdev, ep_addr);
 800449e:	4611      	mov	r1, r2
 80044a0:	f000 fabb 	bl	8004a1a <USBD_LL_StallEP>
 80044a4:	e7f7      	b.n	8004496 <USBD_StdEPReq+0x92>
          switch (pdev->dev_state)
 80044a6:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80044aa:	2b02      	cmp	r3, #2
 80044ac:	d004      	beq.n	80044b8 <USBD_StdEPReq+0xb4>
 80044ae:	2b03      	cmp	r3, #3
 80044b0:	d011      	beq.n	80044d6 <USBD_StdEPReq+0xd2>
              USBD_CtlError(pdev, req);
 80044b2:	f7ff fda9 	bl	8004008 <USBD_CtlError>
              break;
 80044b6:	e7bb      	b.n	8004430 <USBD_StdEPReq+0x2c>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80044b8:	b10a      	cbz	r2, 80044be <USBD_StdEPReq+0xba>
 80044ba:	2a80      	cmp	r2, #128	; 0x80
 80044bc:	d103      	bne.n	80044c6 <USBD_StdEPReq+0xc2>
                USBD_CtlError(pdev, req);
 80044be:	4628      	mov	r0, r5
 80044c0:	f7ff fda2 	bl	8004008 <USBD_CtlError>
 80044c4:	e7b4      	b.n	8004430 <USBD_StdEPReq+0x2c>
                USBD_LL_StallEP(pdev, ep_addr);
 80044c6:	4611      	mov	r1, r2
 80044c8:	f000 faa7 	bl	8004a1a <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80044cc:	2180      	movs	r1, #128	; 0x80
 80044ce:	4628      	mov	r0, r5
 80044d0:	f000 faa3 	bl	8004a1a <USBD_LL_StallEP>
 80044d4:	e7ac      	b.n	8004430 <USBD_StdEPReq+0x2c>
              if (req->wValue == USB_FEATURE_EP_HALT)
 80044d6:	884b      	ldrh	r3, [r1, #2]
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d1a9      	bne.n	8004430 <USBD_StdEPReq+0x2c>
                if ((ep_addr & 0x7FU) != 0x00U)
 80044dc:	f012 0f7f 	tst.w	r2, #127	; 0x7f
 80044e0:	d103      	bne.n	80044ea <USBD_StdEPReq+0xe6>
                USBD_CtlSendStatus(pdev);
 80044e2:	4628      	mov	r0, r5
 80044e4:	f000 f8c8 	bl	8004678 <USBD_CtlSendStatus>
 80044e8:	e7a2      	b.n	8004430 <USBD_StdEPReq+0x2c>
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 80044ea:	4611      	mov	r1, r2
 80044ec:	f000 fa9d 	bl	8004a2a <USBD_LL_ClearStallEP>
 80044f0:	e7f7      	b.n	80044e2 <USBD_StdEPReq+0xde>
          switch (pdev->dev_state)
 80044f2:	f890 029c 	ldrb.w	r0, [r0, #668]	; 0x29c
 80044f6:	2802      	cmp	r0, #2
 80044f8:	d006      	beq.n	8004508 <USBD_StdEPReq+0x104>
 80044fa:	2803      	cmp	r0, #3
 80044fc:	d029      	beq.n	8004552 <USBD_StdEPReq+0x14e>
              USBD_CtlError(pdev, req);
 80044fe:	4628      	mov	r0, r5
 8004500:	f7ff fd82 	bl	8004008 <USBD_CtlError>
  return ret;
 8004504:	4634      	mov	r4, r6
              break;
 8004506:	e793      	b.n	8004430 <USBD_StdEPReq+0x2c>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8004508:	b10a      	cbz	r2, 800450e <USBD_StdEPReq+0x10a>
 800450a:	2a80      	cmp	r2, #128	; 0x80
 800450c:	d113      	bne.n	8004536 <USBD_StdEPReq+0x132>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800450e:	f013 0f80 	tst.w	r3, #128	; 0x80
 8004512:	d115      	bne.n	8004540 <USBD_StdEPReq+0x13c>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8004514:	f002 027f 	and.w	r2, r2, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8004518:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 800451c:	0091      	lsls	r1, r2, #2
 800451e:	f501 71a8 	add.w	r1, r1, #336	; 0x150
 8004522:	4429      	add	r1, r5
 8004524:	3104      	adds	r1, #4
              pep->status = 0x0000U;
 8004526:	2300      	movs	r3, #0
 8004528:	600b      	str	r3, [r1, #0]
              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800452a:	2202      	movs	r2, #2
 800452c:	4628      	mov	r0, r5
 800452e:	f000 f877 	bl	8004620 <USBD_CtlSendData>
  return ret;
 8004532:	4634      	mov	r4, r6
              break;
 8004534:	e77c      	b.n	8004430 <USBD_StdEPReq+0x2c>
                USBD_CtlError(pdev, req);
 8004536:	4628      	mov	r0, r5
 8004538:	f7ff fd66 	bl	8004008 <USBD_CtlError>
  return ret;
 800453c:	4634      	mov	r4, r6
                break;
 800453e:	e777      	b.n	8004430 <USBD_StdEPReq+0x2c>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8004540:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004544:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8004548:	0091      	lsls	r1, r2, #2
 800454a:	3110      	adds	r1, #16
 800454c:	4429      	add	r1, r5
 800454e:	3104      	adds	r1, #4
 8004550:	e7e9      	b.n	8004526 <USBD_StdEPReq+0x122>
              if ((ep_addr & 0x80U) == 0x80U)
 8004552:	b25b      	sxtb	r3, r3
 8004554:	2b00      	cmp	r3, #0
 8004556:	db1f      	blt.n	8004598 <USBD_StdEPReq+0x194>
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8004558:	f002 000f 	and.w	r0, r2, #15
 800455c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8004560:	eb05 0080 	add.w	r0, r5, r0, lsl #2
 8004564:	f8d0 0158 	ldr.w	r0, [r0, #344]	; 0x158
 8004568:	b320      	cbz	r0, 80045b4 <USBD_StdEPReq+0x1b0>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800456a:	2b00      	cmp	r3, #0
 800456c:	db27      	blt.n	80045be <USBD_StdEPReq+0x1ba>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800456e:	f002 037f 	and.w	r3, r2, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8004572:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8004576:	009c      	lsls	r4, r3, #2
 8004578:	f504 74a8 	add.w	r4, r4, #336	; 0x150
 800457c:	442c      	add	r4, r5
 800457e:	3404      	adds	r4, #4
              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8004580:	b10a      	cbz	r2, 8004586 <USBD_StdEPReq+0x182>
 8004582:	2a80      	cmp	r2, #128	; 0x80
 8004584:	d124      	bne.n	80045d0 <USBD_StdEPReq+0x1cc>
                pep->status = 0x0000U;
 8004586:	2300      	movs	r3, #0
 8004588:	6023      	str	r3, [r4, #0]
              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800458a:	2202      	movs	r2, #2
 800458c:	4621      	mov	r1, r4
 800458e:	4628      	mov	r0, r5
 8004590:	f000 f846 	bl	8004620 <USBD_CtlSendData>
  return ret;
 8004594:	4634      	mov	r4, r6
              break;
 8004596:	e74b      	b.n	8004430 <USBD_StdEPReq+0x2c>
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8004598:	f002 000f 	and.w	r0, r2, #15
 800459c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80045a0:	eb05 0080 	add.w	r0, r5, r0, lsl #2
 80045a4:	6980      	ldr	r0, [r0, #24]
 80045a6:	2800      	cmp	r0, #0
 80045a8:	d1df      	bne.n	800456a <USBD_StdEPReq+0x166>
                  USBD_CtlError(pdev, req);
 80045aa:	4628      	mov	r0, r5
 80045ac:	f7ff fd2c 	bl	8004008 <USBD_CtlError>
  return ret;
 80045b0:	4634      	mov	r4, r6
                  break;
 80045b2:	e73d      	b.n	8004430 <USBD_StdEPReq+0x2c>
                  USBD_CtlError(pdev, req);
 80045b4:	4628      	mov	r0, r5
 80045b6:	f7ff fd27 	bl	8004008 <USBD_CtlError>
  return ret;
 80045ba:	4634      	mov	r4, r6
                  break;
 80045bc:	e738      	b.n	8004430 <USBD_StdEPReq+0x2c>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80045be:	f002 037f 	and.w	r3, r2, #127	; 0x7f
 80045c2:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80045c6:	009c      	lsls	r4, r3, #2
 80045c8:	3410      	adds	r4, #16
 80045ca:	442c      	add	r4, r5
 80045cc:	3404      	adds	r4, #4
 80045ce:	e7d7      	b.n	8004580 <USBD_StdEPReq+0x17c>
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 80045d0:	4611      	mov	r1, r2
 80045d2:	4628      	mov	r0, r5
 80045d4:	f000 fa31 	bl	8004a3a <USBD_LL_IsStallEP>
 80045d8:	b110      	cbz	r0, 80045e0 <USBD_StdEPReq+0x1dc>
                pep->status = 0x0001U;
 80045da:	2301      	movs	r3, #1
 80045dc:	6023      	str	r3, [r4, #0]
 80045de:	e7d4      	b.n	800458a <USBD_StdEPReq+0x186>
                pep->status = 0x0000U;
 80045e0:	2300      	movs	r3, #0
 80045e2:	6023      	str	r3, [r4, #0]
 80045e4:	e7d1      	b.n	800458a <USBD_StdEPReq+0x186>

080045e6 <USBD_GetString>:
  if (desc != NULL)
 80045e6:	b1d0      	cbz	r0, 800461e <USBD_GetString+0x38>
{
 80045e8:	b570      	push	{r4, r5, r6, lr}
 80045ea:	460d      	mov	r5, r1
 80045ec:	4616      	mov	r6, r2
 80045ee:	4604      	mov	r4, r0
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 80045f0:	f7ff fce2 	bl	8003fb8 <USBD_GetLen>
 80045f4:	1c43      	adds	r3, r0, #1
 80045f6:	005b      	lsls	r3, r3, #1
 80045f8:	b29b      	uxth	r3, r3
 80045fa:	8033      	strh	r3, [r6, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 80045fc:	702b      	strb	r3, [r5, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 80045fe:	2303      	movs	r3, #3
 8004600:	706b      	strb	r3, [r5, #1]
 8004602:	2302      	movs	r3, #2
    while (*desc != '\0')
 8004604:	e007      	b.n	8004616 <USBD_GetString+0x30>
      unicode[idx++] = *desc++;
 8004606:	3401      	adds	r4, #1
 8004608:	1c5a      	adds	r2, r3, #1
 800460a:	b2d2      	uxtb	r2, r2
 800460c:	54e8      	strb	r0, [r5, r3]
      unicode[idx++] =  0U;
 800460e:	3302      	adds	r3, #2
 8004610:	b2db      	uxtb	r3, r3
 8004612:	2100      	movs	r1, #0
 8004614:	54a9      	strb	r1, [r5, r2]
    while (*desc != '\0')
 8004616:	7820      	ldrb	r0, [r4, #0]
 8004618:	2800      	cmp	r0, #0
 800461a:	d1f4      	bne.n	8004606 <USBD_GetString+0x20>
}
 800461c:	bd70      	pop	{r4, r5, r6, pc}
 800461e:	4770      	bx	lr

08004620 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8004620:	b508      	push	{r3, lr}
 8004622:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8004624:	2202      	movs	r2, #2
 8004626:	f8c0 2294 	str.w	r2, [r0, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800462a:	61c3      	str	r3, [r0, #28]
  pdev->ep_in[0].rem_length   = len;
 800462c:	6203      	str	r3, [r0, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800462e:	460a      	mov	r2, r1
 8004630:	2100      	movs	r1, #0
 8004632:	f000 fa1d 	bl	8004a70 <USBD_LL_Transmit>

  return USBD_OK;
}
 8004636:	2000      	movs	r0, #0
 8004638:	bd08      	pop	{r3, pc}

0800463a <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800463a:	b508      	push	{r3, lr}
 800463c:	4613      	mov	r3, r2
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800463e:	460a      	mov	r2, r1
 8004640:	2100      	movs	r1, #0
 8004642:	f000 fa15 	bl	8004a70 <USBD_LL_Transmit>

  return USBD_OK;
}
 8004646:	2000      	movs	r0, #0
 8004648:	bd08      	pop	{r3, pc}

0800464a <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 800464a:	b508      	push	{r3, lr}
 800464c:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800464e:	2203      	movs	r2, #3
 8004650:	f8c0 2294 	str.w	r2, [r0, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8004654:	f8c0 315c 	str.w	r3, [r0, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 8004658:	f8c0 3160 	str.w	r3, [r0, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800465c:	460a      	mov	r2, r1
 800465e:	2100      	movs	r1, #0
 8004660:	f000 fa0e 	bl	8004a80 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8004664:	2000      	movs	r0, #0
 8004666:	bd08      	pop	{r3, pc}

08004668 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8004668:	b508      	push	{r3, lr}
 800466a:	4613      	mov	r3, r2
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800466c:	460a      	mov	r2, r1
 800466e:	2100      	movs	r1, #0
 8004670:	f000 fa06 	bl	8004a80 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8004674:	2000      	movs	r0, #0
 8004676:	bd08      	pop	{r3, pc}

08004678 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8004678:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800467a:	2304      	movs	r3, #4
 800467c:	f8c0 3294 	str.w	r3, [r0, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8004680:	2300      	movs	r3, #0
 8004682:	461a      	mov	r2, r3
 8004684:	4619      	mov	r1, r3
 8004686:	f000 f9f3 	bl	8004a70 <USBD_LL_Transmit>

  return USBD_OK;
}
 800468a:	2000      	movs	r0, #0
 800468c:	bd08      	pop	{r3, pc}

0800468e <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800468e:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8004690:	2305      	movs	r3, #5
 8004692:	f8c0 3294 	str.w	r3, [r0, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8004696:	2300      	movs	r3, #0
 8004698:	461a      	mov	r2, r3
 800469a:	4619      	mov	r1, r3
 800469c:	f000 f9f0 	bl	8004a80 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 80046a0:	2000      	movs	r0, #0
 80046a2:	bd08      	pop	{r3, pc}

080046a4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80046a4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80046a6:	2200      	movs	r2, #0
 80046a8:	490f      	ldr	r1, [pc, #60]	; (80046e8 <MX_USB_DEVICE_Init+0x44>)
 80046aa:	4810      	ldr	r0, [pc, #64]	; (80046ec <MX_USB_DEVICE_Init+0x48>)
 80046ac:	f7ff fb26 	bl	8003cfc <USBD_Init>
 80046b0:	b970      	cbnz	r0, 80046d0 <MX_USB_DEVICE_Init+0x2c>
  {
    Error_Handler();
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80046b2:	490f      	ldr	r1, [pc, #60]	; (80046f0 <MX_USB_DEVICE_Init+0x4c>)
 80046b4:	480d      	ldr	r0, [pc, #52]	; (80046ec <MX_USB_DEVICE_Init+0x48>)
 80046b6:	f7ff fb38 	bl	8003d2a <USBD_RegisterClass>
 80046ba:	b960      	cbnz	r0, 80046d6 <MX_USB_DEVICE_Init+0x32>
  {
    Error_Handler();
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80046bc:	490d      	ldr	r1, [pc, #52]	; (80046f4 <MX_USB_DEVICE_Init+0x50>)
 80046be:	480b      	ldr	r0, [pc, #44]	; (80046ec <MX_USB_DEVICE_Init+0x48>)
 80046c0:	f7ff faef 	bl	8003ca2 <USBD_CDC_RegisterInterface>
 80046c4:	b950      	cbnz	r0, 80046dc <MX_USB_DEVICE_Init+0x38>
  {
    Error_Handler();
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80046c6:	4809      	ldr	r0, [pc, #36]	; (80046ec <MX_USB_DEVICE_Init+0x48>)
 80046c8:	f7ff fb36 	bl	8003d38 <USBD_Start>
 80046cc:	b948      	cbnz	r0, 80046e2 <MX_USB_DEVICE_Init+0x3e>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80046ce:	bd08      	pop	{r3, pc}
    Error_Handler();
 80046d0:	f7fc fed4 	bl	800147c <Error_Handler>
 80046d4:	e7ed      	b.n	80046b2 <MX_USB_DEVICE_Init+0xe>
    Error_Handler();
 80046d6:	f7fc fed1 	bl	800147c <Error_Handler>
 80046da:	e7ef      	b.n	80046bc <MX_USB_DEVICE_Init+0x18>
    Error_Handler();
 80046dc:	f7fc fece 	bl	800147c <Error_Handler>
 80046e0:	e7f1      	b.n	80046c6 <MX_USB_DEVICE_Init+0x22>
    Error_Handler();
 80046e2:	f7fc fecb 	bl	800147c <Error_Handler>
}
 80046e6:	e7f2      	b.n	80046ce <MX_USB_DEVICE_Init+0x2a>
 80046e8:	2000012c 	.word	0x2000012c
 80046ec:	20000494 	.word	0x20000494
 80046f0:	2000000c 	.word	0x2000000c
 80046f4:	2000011c 	.word	0x2000011c

080046f8 <CDC_DeInit_FS>:
static int8_t CDC_DeInit_FS(void)
{
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
  /* USER CODE END 4 */
}
 80046f8:	2000      	movs	r0, #0
 80046fa:	4770      	bx	lr

080046fc <CDC_Control_FS>:
    break;
  }

  return (USBD_OK);
  /* USER CODE END 5 */
}
 80046fc:	2000      	movs	r0, #0
 80046fe:	4770      	bx	lr

08004700 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8004700:	b510      	push	{r4, lr}
 8004702:	4601      	mov	r1, r0
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8004704:	4c04      	ldr	r4, [pc, #16]	; (8004718 <CDC_Receive_FS+0x18>)
 8004706:	4620      	mov	r0, r4
 8004708:	f7ff fada 	bl	8003cc0 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800470c:	4620      	mov	r0, r4
 800470e:	f7ff fadd 	bl	8003ccc <USBD_CDC_ReceivePacket>
  return (USBD_OK);
  /* USER CODE END 6 */
}
 8004712:	2000      	movs	r0, #0
 8004714:	bd10      	pop	{r4, pc}
 8004716:	bf00      	nop
 8004718:	20000494 	.word	0x20000494

0800471c <CDC_Init_FS>:
{
 800471c:	b510      	push	{r4, lr}
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800471e:	4c06      	ldr	r4, [pc, #24]	; (8004738 <CDC_Init_FS+0x1c>)
 8004720:	2200      	movs	r2, #0
 8004722:	4906      	ldr	r1, [pc, #24]	; (800473c <CDC_Init_FS+0x20>)
 8004724:	4620      	mov	r0, r4
 8004726:	f7ff fac3 	bl	8003cb0 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800472a:	4905      	ldr	r1, [pc, #20]	; (8004740 <CDC_Init_FS+0x24>)
 800472c:	4620      	mov	r0, r4
 800472e:	f7ff fac7 	bl	8003cc0 <USBD_CDC_SetRxBuffer>
}
 8004732:	2000      	movs	r0, #0
 8004734:	bd10      	pop	{r4, pc}
 8004736:	bf00      	nop
 8004738:	20000494 	.word	0x20000494
 800473c:	20000b40 	.word	0x20000b40
 8004740:	20000758 	.word	0x20000758

08004744 <USBD_FS_DeviceDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8004744:	2312      	movs	r3, #18
 8004746:	800b      	strh	r3, [r1, #0]
  return USBD_FS_DeviceDesc;
}
 8004748:	4800      	ldr	r0, [pc, #0]	; (800474c <USBD_FS_DeviceDescriptor+0x8>)
 800474a:	4770      	bx	lr
 800474c:	20000148 	.word	0x20000148

08004750 <USBD_FS_LangIDStrDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8004750:	2304      	movs	r3, #4
 8004752:	800b      	strh	r3, [r1, #0]
  return USBD_LangIDDesc;
}
 8004754:	4800      	ldr	r0, [pc, #0]	; (8004758 <USBD_FS_LangIDStrDescriptor+0x8>)
 8004756:	4770      	bx	lr
 8004758:	2000015c 	.word	0x2000015c

0800475c <IntToUnicode>:
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
  uint8_t idx = 0;

  for (idx = 0; idx < len; idx++)
 800475c:	2300      	movs	r3, #0
 800475e:	4293      	cmp	r3, r2
 8004760:	d21e      	bcs.n	80047a0 <IntToUnicode+0x44>
{
 8004762:	b500      	push	{lr}
 8004764:	e010      	b.n	8004788 <IntToUnicode+0x2c>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8004766:	f10c 0c37 	add.w	ip, ip, #55	; 0x37
 800476a:	f801 c013 	strb.w	ip, [r1, r3, lsl #1]
    }

    value = value << 4;
 800476e:	0100      	lsls	r0, r0, #4

    pbuf[2 * idx + 1] = 0;
 8004770:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8004774:	f10c 0c01 	add.w	ip, ip, #1
 8004778:	f04f 0e00 	mov.w	lr, #0
 800477c:	f801 e00c 	strb.w	lr, [r1, ip]
  for (idx = 0; idx < len; idx++)
 8004780:	3301      	adds	r3, #1
 8004782:	b2db      	uxtb	r3, r3
 8004784:	4293      	cmp	r3, r2
 8004786:	d209      	bcs.n	800479c <IntToUnicode+0x40>
    if (((value >> 28)) < 0xA)
 8004788:	ea4f 7c10 	mov.w	ip, r0, lsr #28
 800478c:	f1b0 4f20 	cmp.w	r0, #2684354560	; 0xa0000000
 8004790:	d2e9      	bcs.n	8004766 <IntToUnicode+0xa>
      pbuf[2 * idx] = (value >> 28) + '0';
 8004792:	f10c 0c30 	add.w	ip, ip, #48	; 0x30
 8004796:	f801 c013 	strb.w	ip, [r1, r3, lsl #1]
 800479a:	e7e8      	b.n	800476e <IntToUnicode+0x12>
  }
}
 800479c:	f85d fb04 	ldr.w	pc, [sp], #4
 80047a0:	4770      	bx	lr
	...

080047a4 <Get_SerialNum>:
{
 80047a4:	b538      	push	{r3, r4, r5, lr}
  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80047a6:	4b0b      	ldr	r3, [pc, #44]	; (80047d4 <Get_SerialNum+0x30>)
 80047a8:	f8d3 07e8 	ldr.w	r0, [r3, #2024]	; 0x7e8
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80047ac:	f8d3 47ec 	ldr.w	r4, [r3, #2028]	; 0x7ec
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80047b0:	f8d3 37f0 	ldr.w	r3, [r3, #2032]	; 0x7f0
  if (deviceserial0 != 0)
 80047b4:	18c0      	adds	r0, r0, r3
 80047b6:	d100      	bne.n	80047ba <Get_SerialNum+0x16>
}
 80047b8:	bd38      	pop	{r3, r4, r5, pc}
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80047ba:	4d07      	ldr	r5, [pc, #28]	; (80047d8 <Get_SerialNum+0x34>)
 80047bc:	2208      	movs	r2, #8
 80047be:	1ca9      	adds	r1, r5, #2
 80047c0:	f7ff ffcc 	bl	800475c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80047c4:	2204      	movs	r2, #4
 80047c6:	f105 0112 	add.w	r1, r5, #18
 80047ca:	4620      	mov	r0, r4
 80047cc:	f7ff ffc6 	bl	800475c <IntToUnicode>
}
 80047d0:	e7f2      	b.n	80047b8 <Get_SerialNum+0x14>
 80047d2:	bf00      	nop
 80047d4:	1ffff000 	.word	0x1ffff000
 80047d8:	20000160 	.word	0x20000160

080047dc <USBD_FS_SerialStrDescriptor>:
{
 80047dc:	b508      	push	{r3, lr}
  *length = USB_SIZ_STRING_SERIAL;
 80047de:	231a      	movs	r3, #26
 80047e0:	800b      	strh	r3, [r1, #0]
  Get_SerialNum();
 80047e2:	f7ff ffdf 	bl	80047a4 <Get_SerialNum>
}
 80047e6:	4801      	ldr	r0, [pc, #4]	; (80047ec <USBD_FS_SerialStrDescriptor+0x10>)
 80047e8:	bd08      	pop	{r3, pc}
 80047ea:	bf00      	nop
 80047ec:	20000160 	.word	0x20000160

080047f0 <USBD_FS_ProductStrDescriptor>:
{
 80047f0:	b508      	push	{r3, lr}
 80047f2:	460a      	mov	r2, r1
  if(speed == 0)
 80047f4:	b928      	cbnz	r0, 8004802 <USBD_FS_ProductStrDescriptor+0x12>
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80047f6:	4905      	ldr	r1, [pc, #20]	; (800480c <USBD_FS_ProductStrDescriptor+0x1c>)
 80047f8:	4805      	ldr	r0, [pc, #20]	; (8004810 <USBD_FS_ProductStrDescriptor+0x20>)
 80047fa:	f7ff fef4 	bl	80045e6 <USBD_GetString>
}
 80047fe:	4803      	ldr	r0, [pc, #12]	; (800480c <USBD_FS_ProductStrDescriptor+0x1c>)
 8004800:	bd08      	pop	{r3, pc}
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8004802:	4902      	ldr	r1, [pc, #8]	; (800480c <USBD_FS_ProductStrDescriptor+0x1c>)
 8004804:	4802      	ldr	r0, [pc, #8]	; (8004810 <USBD_FS_ProductStrDescriptor+0x20>)
 8004806:	f7ff feee 	bl	80045e6 <USBD_GetString>
 800480a:	e7f8      	b.n	80047fe <USBD_FS_ProductStrDescriptor+0xe>
 800480c:	20000f28 	.word	0x20000f28
 8004810:	08009ccc 	.word	0x08009ccc

08004814 <USBD_FS_ManufacturerStrDescriptor>:
{
 8004814:	b510      	push	{r4, lr}
 8004816:	460a      	mov	r2, r1
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8004818:	4c03      	ldr	r4, [pc, #12]	; (8004828 <USBD_FS_ManufacturerStrDescriptor+0x14>)
 800481a:	4621      	mov	r1, r4
 800481c:	4803      	ldr	r0, [pc, #12]	; (800482c <USBD_FS_ManufacturerStrDescriptor+0x18>)
 800481e:	f7ff fee2 	bl	80045e6 <USBD_GetString>
}
 8004822:	4620      	mov	r0, r4
 8004824:	bd10      	pop	{r4, pc}
 8004826:	bf00      	nop
 8004828:	20000f28 	.word	0x20000f28
 800482c:	08009ce4 	.word	0x08009ce4

08004830 <USBD_FS_ConfigStrDescriptor>:
{
 8004830:	b508      	push	{r3, lr}
 8004832:	460a      	mov	r2, r1
  if(speed == USBD_SPEED_HIGH)
 8004834:	b928      	cbnz	r0, 8004842 <USBD_FS_ConfigStrDescriptor+0x12>
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8004836:	4905      	ldr	r1, [pc, #20]	; (800484c <USBD_FS_ConfigStrDescriptor+0x1c>)
 8004838:	4805      	ldr	r0, [pc, #20]	; (8004850 <USBD_FS_ConfigStrDescriptor+0x20>)
 800483a:	f7ff fed4 	bl	80045e6 <USBD_GetString>
}
 800483e:	4803      	ldr	r0, [pc, #12]	; (800484c <USBD_FS_ConfigStrDescriptor+0x1c>)
 8004840:	bd08      	pop	{r3, pc}
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8004842:	4902      	ldr	r1, [pc, #8]	; (800484c <USBD_FS_ConfigStrDescriptor+0x1c>)
 8004844:	4802      	ldr	r0, [pc, #8]	; (8004850 <USBD_FS_ConfigStrDescriptor+0x20>)
 8004846:	f7ff fece 	bl	80045e6 <USBD_GetString>
 800484a:	e7f8      	b.n	800483e <USBD_FS_ConfigStrDescriptor+0xe>
 800484c:	20000f28 	.word	0x20000f28
 8004850:	08009cf8 	.word	0x08009cf8

08004854 <USBD_FS_InterfaceStrDescriptor>:
{
 8004854:	b508      	push	{r3, lr}
 8004856:	460a      	mov	r2, r1
  if(speed == 0)
 8004858:	b928      	cbnz	r0, 8004866 <USBD_FS_InterfaceStrDescriptor+0x12>
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800485a:	4905      	ldr	r1, [pc, #20]	; (8004870 <USBD_FS_InterfaceStrDescriptor+0x1c>)
 800485c:	4805      	ldr	r0, [pc, #20]	; (8004874 <USBD_FS_InterfaceStrDescriptor+0x20>)
 800485e:	f7ff fec2 	bl	80045e6 <USBD_GetString>
}
 8004862:	4803      	ldr	r0, [pc, #12]	; (8004870 <USBD_FS_InterfaceStrDescriptor+0x1c>)
 8004864:	bd08      	pop	{r3, pc}
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8004866:	4902      	ldr	r1, [pc, #8]	; (8004870 <USBD_FS_InterfaceStrDescriptor+0x1c>)
 8004868:	4802      	ldr	r0, [pc, #8]	; (8004874 <USBD_FS_InterfaceStrDescriptor+0x20>)
 800486a:	f7ff febc 	bl	80045e6 <USBD_GetString>
 800486e:	e7f8      	b.n	8004862 <USBD_FS_InterfaceStrDescriptor+0xe>
 8004870:	20000f28 	.word	0x20000f28
 8004874:	08009d04 	.word	0x08009d04

08004878 <USBD_Get_USB_Status>:
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
  USBD_StatusTypeDef usb_status = USBD_OK;

  switch (hal_status)
 8004878:	2802      	cmp	r0, #2
 800487a:	d805      	bhi.n	8004888 <USBD_Get_USB_Status+0x10>
 800487c:	e8df f000 	tbb	[pc, r0]
 8004880:	0405      	.short	0x0405
 8004882:	02          	.byte	0x02
 8004883:	00          	.byte	0x00
    break;
    case HAL_ERROR :
      usb_status = USBD_FAIL;
    break;
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8004884:	2001      	movs	r0, #1
    break;
 8004886:	4770      	bx	lr
      usb_status = USBD_FAIL;
 8004888:	2002      	movs	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;
}
 800488a:	4770      	bx	lr

0800488c <HAL_PCD_MspInit>:
  if(pcdHandle->Instance==USB)
 800488c:	6802      	ldr	r2, [r0, #0]
 800488e:	4b0e      	ldr	r3, [pc, #56]	; (80048c8 <HAL_PCD_MspInit+0x3c>)
 8004890:	429a      	cmp	r2, r3
 8004892:	d000      	beq.n	8004896 <HAL_PCD_MspInit+0xa>
 8004894:	4770      	bx	lr
{
 8004896:	b500      	push	{lr}
 8004898:	b083      	sub	sp, #12
    __HAL_RCC_USB_CLK_ENABLE();
 800489a:	f503 33da 	add.w	r3, r3, #111616	; 0x1b400
 800489e:	69da      	ldr	r2, [r3, #28]
 80048a0:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80048a4:	61da      	str	r2, [r3, #28]
 80048a6:	69db      	ldr	r3, [r3, #28]
 80048a8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80048ac:	9301      	str	r3, [sp, #4]
 80048ae:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 80048b0:	2200      	movs	r2, #0
 80048b2:	4611      	mov	r1, r2
 80048b4:	2014      	movs	r0, #20
 80048b6:	f7fc ff7f 	bl	80017b8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 80048ba:	2014      	movs	r0, #20
 80048bc:	f7fc ffb4 	bl	8001828 <HAL_NVIC_EnableIRQ>
}
 80048c0:	b003      	add	sp, #12
 80048c2:	f85d fb04 	ldr.w	pc, [sp], #4
 80048c6:	bf00      	nop
 80048c8:	40005c00 	.word	0x40005c00

080048cc <HAL_PCD_SetupStageCallback>:
{
 80048cc:	b508      	push	{r3, lr}
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80048ce:	f500 710c 	add.w	r1, r0, #560	; 0x230
 80048d2:	f8d0 0268 	ldr.w	r0, [r0, #616]	; 0x268
 80048d6:	f7ff fa47 	bl	8003d68 <USBD_LL_SetupStage>
}
 80048da:	bd08      	pop	{r3, pc}

080048dc <HAL_PCD_DataOutStageCallback>:
{
 80048dc:	b508      	push	{r3, lr}
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80048de:	eb00 1341 	add.w	r3, r0, r1, lsl #5
 80048e2:	f8d3 213c 	ldr.w	r2, [r3, #316]	; 0x13c
 80048e6:	f8d0 0268 	ldr.w	r0, [r0, #616]	; 0x268
 80048ea:	f7ff fa6a 	bl	8003dc2 <USBD_LL_DataOutStage>
}
 80048ee:	bd08      	pop	{r3, pc}

080048f0 <HAL_PCD_DataInStageCallback>:
{
 80048f0:	b508      	push	{r3, lr}
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80048f2:	eb00 1341 	add.w	r3, r0, r1, lsl #5
 80048f6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80048f8:	f8d0 0268 	ldr.w	r0, [r0, #616]	; 0x268
 80048fc:	f7ff faa7 	bl	8003e4e <USBD_LL_DataInStage>
}
 8004900:	bd08      	pop	{r3, pc}

08004902 <HAL_PCD_SOFCallback>:
{
 8004902:	b508      	push	{r3, lr}
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8004904:	f8d0 0268 	ldr.w	r0, [r0, #616]	; 0x268
 8004908:	f7ff fb48 	bl	8003f9c <USBD_LL_SOF>
}
 800490c:	bd08      	pop	{r3, pc}

0800490e <HAL_PCD_ResetCallback>:
{
 800490e:	b510      	push	{r4, lr}
 8004910:	4604      	mov	r4, r0
  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8004912:	6883      	ldr	r3, [r0, #8]
 8004914:	2b02      	cmp	r3, #2
 8004916:	d109      	bne.n	800492c <HAL_PCD_ResetCallback+0x1e>
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8004918:	2101      	movs	r1, #1
 800491a:	f8d4 0268 	ldr.w	r0, [r4, #616]	; 0x268
 800491e:	f7ff fb26 	bl	8003f6e <USBD_LL_SetSpeed>
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8004922:	f8d4 0268 	ldr.w	r0, [r4, #616]	; 0x268
 8004926:	f7ff fafa 	bl	8003f1e <USBD_LL_Reset>
}
 800492a:	bd10      	pop	{r4, pc}
    Error_Handler();
 800492c:	f7fc fda6 	bl	800147c <Error_Handler>
 8004930:	e7f2      	b.n	8004918 <HAL_PCD_ResetCallback+0xa>
	...

08004934 <HAL_PCD_SuspendCallback>:
{
 8004934:	b510      	push	{r4, lr}
 8004936:	4604      	mov	r4, r0
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8004938:	f8d0 0268 	ldr.w	r0, [r0, #616]	; 0x268
 800493c:	f7ff fb1a 	bl	8003f74 <USBD_LL_Suspend>
  if (hpcd->Init.low_power_enable)
 8004940:	69a3      	ldr	r3, [r4, #24]
 8004942:	b123      	cbz	r3, 800494e <HAL_PCD_SuspendCallback+0x1a>
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8004944:	4a02      	ldr	r2, [pc, #8]	; (8004950 <HAL_PCD_SuspendCallback+0x1c>)
 8004946:	6913      	ldr	r3, [r2, #16]
 8004948:	f043 0306 	orr.w	r3, r3, #6
 800494c:	6113      	str	r3, [r2, #16]
}
 800494e:	bd10      	pop	{r4, pc}
 8004950:	e000ed00 	.word	0xe000ed00

08004954 <HAL_PCD_ResumeCallback>:
{
 8004954:	b508      	push	{r3, lr}
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8004956:	f8d0 0268 	ldr.w	r0, [r0, #616]	; 0x268
 800495a:	f7ff fb14 	bl	8003f86 <USBD_LL_Resume>
}
 800495e:	bd08      	pop	{r3, pc}

08004960 <USBD_LL_Init>:
{
 8004960:	b510      	push	{r4, lr}
 8004962:	4604      	mov	r4, r0
  hpcd_USB_FS.pData = pdev;
 8004964:	481d      	ldr	r0, [pc, #116]	; (80049dc <USBD_LL_Init+0x7c>)
 8004966:	f8c0 4268 	str.w	r4, [r0, #616]	; 0x268
  pdev->pData = &hpcd_USB_FS;
 800496a:	f8c4 02c0 	str.w	r0, [r4, #704]	; 0x2c0
  hpcd_USB_FS.Instance = USB;
 800496e:	4b1c      	ldr	r3, [pc, #112]	; (80049e0 <USBD_LL_Init+0x80>)
 8004970:	6003      	str	r3, [r0, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8004972:	2308      	movs	r3, #8
 8004974:	6043      	str	r3, [r0, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8004976:	2302      	movs	r3, #2
 8004978:	6083      	str	r3, [r0, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800497a:	2300      	movs	r3, #0
 800497c:	6183      	str	r3, [r0, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800497e:	61c3      	str	r3, [r0, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8004980:	6203      	str	r3, [r0, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8004982:	f7fd f8d7 	bl	8001b34 <HAL_PCD_Init>
 8004986:	bb30      	cbnz	r0, 80049d6 <USBD_LL_Init+0x76>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8004988:	2318      	movs	r3, #24
 800498a:	2200      	movs	r2, #0
 800498c:	4611      	mov	r1, r2
 800498e:	f8d4 02c0 	ldr.w	r0, [r4, #704]	; 0x2c0
 8004992:	f7fd fd19 	bl	80023c8 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8004996:	2358      	movs	r3, #88	; 0x58
 8004998:	2200      	movs	r2, #0
 800499a:	2180      	movs	r1, #128	; 0x80
 800499c:	f8d4 02c0 	ldr.w	r0, [r4, #704]	; 0x2c0
 80049a0:	f7fd fd12 	bl	80023c8 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 80049a4:	23c0      	movs	r3, #192	; 0xc0
 80049a6:	2200      	movs	r2, #0
 80049a8:	2181      	movs	r1, #129	; 0x81
 80049aa:	f8d4 02c0 	ldr.w	r0, [r4, #704]	; 0x2c0
 80049ae:	f7fd fd0b 	bl	80023c8 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 80049b2:	f44f 7388 	mov.w	r3, #272	; 0x110
 80049b6:	2200      	movs	r2, #0
 80049b8:	2101      	movs	r1, #1
 80049ba:	f8d4 02c0 	ldr.w	r0, [r4, #704]	; 0x2c0
 80049be:	f7fd fd03 	bl	80023c8 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 80049c2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80049c6:	2200      	movs	r2, #0
 80049c8:	2182      	movs	r1, #130	; 0x82
 80049ca:	f8d4 02c0 	ldr.w	r0, [r4, #704]	; 0x2c0
 80049ce:	f7fd fcfb 	bl	80023c8 <HAL_PCDEx_PMAConfig>
}
 80049d2:	2000      	movs	r0, #0
 80049d4:	bd10      	pop	{r4, pc}
    Error_Handler( );
 80049d6:	f7fc fd51 	bl	800147c <Error_Handler>
 80049da:	e7d5      	b.n	8004988 <USBD_LL_Init+0x28>
 80049dc:	20001128 	.word	0x20001128
 80049e0:	40005c00 	.word	0x40005c00

080049e4 <USBD_LL_Start>:
{
 80049e4:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_Start(pdev->pData);
 80049e6:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 80049ea:	f7fd f921 	bl	8001c30 <HAL_PCD_Start>
  usb_status =  USBD_Get_USB_Status(hal_status);
 80049ee:	f7ff ff43 	bl	8004878 <USBD_Get_USB_Status>
}
 80049f2:	bd08      	pop	{r3, pc}

080049f4 <USBD_LL_OpenEP>:
{
 80049f4:	b508      	push	{r3, lr}
 80049f6:	4694      	mov	ip, r2
 80049f8:	461a      	mov	r2, r3
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80049fa:	4663      	mov	r3, ip
 80049fc:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8004a00:	f7fd f941 	bl	8001c86 <HAL_PCD_EP_Open>
  usb_status =  USBD_Get_USB_Status(hal_status);
 8004a04:	f7ff ff38 	bl	8004878 <USBD_Get_USB_Status>
}
 8004a08:	bd08      	pop	{r3, pc}

08004a0a <USBD_LL_CloseEP>:
{
 8004a0a:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8004a0c:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8004a10:	f7fd f975 	bl	8001cfe <HAL_PCD_EP_Close>
  usb_status =  USBD_Get_USB_Status(hal_status);
 8004a14:	f7ff ff30 	bl	8004878 <USBD_Get_USB_Status>
}
 8004a18:	bd08      	pop	{r3, pc}

08004a1a <USBD_LL_StallEP>:
{
 8004a1a:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8004a1c:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8004a20:	f7fd fc64 	bl	80022ec <HAL_PCD_EP_SetStall>
  usb_status =  USBD_Get_USB_Status(hal_status);
 8004a24:	f7ff ff28 	bl	8004878 <USBD_Get_USB_Status>
}
 8004a28:	bd08      	pop	{r3, pc}

08004a2a <USBD_LL_ClearStallEP>:
{
 8004a2a:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8004a2c:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8004a30:	f7fd fc93 	bl	800235a <HAL_PCD_EP_ClrStall>
  usb_status =  USBD_Get_USB_Status(hal_status);
 8004a34:	f7ff ff20 	bl	8004878 <USBD_Get_USB_Status>
}
 8004a38:	bd08      	pop	{r3, pc}

08004a3a <USBD_LL_IsStallEP>:
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8004a3a:	f8d0 32c0 	ldr.w	r3, [r0, #704]	; 0x2c0
  if((ep_addr & 0x80) == 0x80)
 8004a3e:	f011 0f80 	tst.w	r1, #128	; 0x80
 8004a42:	d106      	bne.n	8004a52 <USBD_LL_IsStallEP+0x18>
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8004a44:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 8004a48:	eb03 1141 	add.w	r1, r3, r1, lsl #5
 8004a4c:	f891 012a 	ldrb.w	r0, [r1, #298]	; 0x12a
}
 8004a50:	4770      	bx	lr
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8004a52:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 8004a56:	eb03 1141 	add.w	r1, r3, r1, lsl #5
 8004a5a:	f891 002a 	ldrb.w	r0, [r1, #42]	; 0x2a
 8004a5e:	4770      	bx	lr

08004a60 <USBD_LL_SetUSBAddress>:
{
 8004a60:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8004a62:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8004a66:	f7fd f8fa 	bl	8001c5e <HAL_PCD_SetAddress>
  usb_status =  USBD_Get_USB_Status(hal_status);
 8004a6a:	f7ff ff05 	bl	8004878 <USBD_Get_USB_Status>
}
 8004a6e:	bd08      	pop	{r3, pc}

08004a70 <USBD_LL_Transmit>:
{
 8004a70:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8004a72:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8004a76:	f7fd f99a 	bl	8001dae <HAL_PCD_EP_Transmit>
  usb_status =  USBD_Get_USB_Status(hal_status);
 8004a7a:	f7ff fefd 	bl	8004878 <USBD_Get_USB_Status>
}
 8004a7e:	bd08      	pop	{r3, pc}

08004a80 <USBD_LL_PrepareReceive>:
{
 8004a80:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8004a82:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8004a86:	f7fd f968 	bl	8001d5a <HAL_PCD_EP_Receive>
  usb_status =  USBD_Get_USB_Status(hal_status);
 8004a8a:	f7ff fef5 	bl	8004878 <USBD_Get_USB_Status>
}
 8004a8e:	bd08      	pop	{r3, pc}

08004a90 <USBD_LL_GetRxDataSize>:
{
 8004a90:	b508      	push	{r3, lr}
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8004a92:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8004a96:	f7fd f983 	bl	8001da0 <HAL_PCD_EP_GetRxCount>
}
 8004a9a:	bd08      	pop	{r3, pc}

08004a9c <USBD_static_malloc>:
}
 8004a9c:	4800      	ldr	r0, [pc, #0]	; (8004aa0 <USBD_static_malloc+0x4>)
 8004a9e:	4770      	bx	lr
 8004aa0:	20001394 	.word	0x20001394

08004aa4 <USBD_static_free>:
}
 8004aa4:	4770      	bx	lr

08004aa6 <HAL_PCDEx_SetConnectionState>:
}
 8004aa6:	4770      	bx	lr

08004aa8 <__errno>:
 8004aa8:	4b01      	ldr	r3, [pc, #4]	; (8004ab0 <__errno+0x8>)
 8004aaa:	6818      	ldr	r0, [r3, #0]
 8004aac:	4770      	bx	lr
 8004aae:	bf00      	nop
 8004ab0:	2000017c 	.word	0x2000017c

08004ab4 <__libc_init_array>:
 8004ab4:	b570      	push	{r4, r5, r6, lr}
 8004ab6:	2600      	movs	r6, #0
 8004ab8:	4d0c      	ldr	r5, [pc, #48]	; (8004aec <__libc_init_array+0x38>)
 8004aba:	4c0d      	ldr	r4, [pc, #52]	; (8004af0 <__libc_init_array+0x3c>)
 8004abc:	1b64      	subs	r4, r4, r5
 8004abe:	10a4      	asrs	r4, r4, #2
 8004ac0:	42a6      	cmp	r6, r4
 8004ac2:	d109      	bne.n	8004ad8 <__libc_init_array+0x24>
 8004ac4:	f005 f884 	bl	8009bd0 <_init>
 8004ac8:	2600      	movs	r6, #0
 8004aca:	4d0a      	ldr	r5, [pc, #40]	; (8004af4 <__libc_init_array+0x40>)
 8004acc:	4c0a      	ldr	r4, [pc, #40]	; (8004af8 <__libc_init_array+0x44>)
 8004ace:	1b64      	subs	r4, r4, r5
 8004ad0:	10a4      	asrs	r4, r4, #2
 8004ad2:	42a6      	cmp	r6, r4
 8004ad4:	d105      	bne.n	8004ae2 <__libc_init_array+0x2e>
 8004ad6:	bd70      	pop	{r4, r5, r6, pc}
 8004ad8:	f855 3b04 	ldr.w	r3, [r5], #4
 8004adc:	4798      	blx	r3
 8004ade:	3601      	adds	r6, #1
 8004ae0:	e7ee      	b.n	8004ac0 <__libc_init_array+0xc>
 8004ae2:	f855 3b04 	ldr.w	r3, [r5], #4
 8004ae6:	4798      	blx	r3
 8004ae8:	3601      	adds	r6, #1
 8004aea:	e7f2      	b.n	8004ad2 <__libc_init_array+0x1e>
 8004aec:	0800a1cc 	.word	0x0800a1cc
 8004af0:	0800a1cc 	.word	0x0800a1cc
 8004af4:	0800a1cc 	.word	0x0800a1cc
 8004af8:	0800a1d0 	.word	0x0800a1d0

08004afc <memset>:
 8004afc:	4603      	mov	r3, r0
 8004afe:	4402      	add	r2, r0
 8004b00:	4293      	cmp	r3, r2
 8004b02:	d100      	bne.n	8004b06 <memset+0xa>
 8004b04:	4770      	bx	lr
 8004b06:	f803 1b01 	strb.w	r1, [r3], #1
 8004b0a:	e7f9      	b.n	8004b00 <memset+0x4>

08004b0c <__cvt>:
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004b12:	461f      	mov	r7, r3
 8004b14:	bfbb      	ittet	lt
 8004b16:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8004b1a:	461f      	movlt	r7, r3
 8004b1c:	2300      	movge	r3, #0
 8004b1e:	232d      	movlt	r3, #45	; 0x2d
 8004b20:	b088      	sub	sp, #32
 8004b22:	4614      	mov	r4, r2
 8004b24:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8004b26:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8004b28:	7013      	strb	r3, [r2, #0]
 8004b2a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8004b2c:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8004b30:	f023 0820 	bic.w	r8, r3, #32
 8004b34:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004b38:	d005      	beq.n	8004b46 <__cvt+0x3a>
 8004b3a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8004b3e:	d100      	bne.n	8004b42 <__cvt+0x36>
 8004b40:	3501      	adds	r5, #1
 8004b42:	2302      	movs	r3, #2
 8004b44:	e000      	b.n	8004b48 <__cvt+0x3c>
 8004b46:	2303      	movs	r3, #3
 8004b48:	aa07      	add	r2, sp, #28
 8004b4a:	9204      	str	r2, [sp, #16]
 8004b4c:	aa06      	add	r2, sp, #24
 8004b4e:	e9cd a202 	strd	sl, r2, [sp, #8]
 8004b52:	e9cd 3500 	strd	r3, r5, [sp]
 8004b56:	4622      	mov	r2, r4
 8004b58:	463b      	mov	r3, r7
 8004b5a:	f001 fe29 	bl	80067b0 <_dtoa_r>
 8004b5e:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8004b62:	4606      	mov	r6, r0
 8004b64:	d102      	bne.n	8004b6c <__cvt+0x60>
 8004b66:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004b68:	07db      	lsls	r3, r3, #31
 8004b6a:	d522      	bpl.n	8004bb2 <__cvt+0xa6>
 8004b6c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004b70:	eb06 0905 	add.w	r9, r6, r5
 8004b74:	d110      	bne.n	8004b98 <__cvt+0x8c>
 8004b76:	7833      	ldrb	r3, [r6, #0]
 8004b78:	2b30      	cmp	r3, #48	; 0x30
 8004b7a:	d10a      	bne.n	8004b92 <__cvt+0x86>
 8004b7c:	2200      	movs	r2, #0
 8004b7e:	2300      	movs	r3, #0
 8004b80:	4620      	mov	r0, r4
 8004b82:	4639      	mov	r1, r7
 8004b84:	f7fb ff10 	bl	80009a8 <__aeabi_dcmpeq>
 8004b88:	b918      	cbnz	r0, 8004b92 <__cvt+0x86>
 8004b8a:	f1c5 0501 	rsb	r5, r5, #1
 8004b8e:	f8ca 5000 	str.w	r5, [sl]
 8004b92:	f8da 3000 	ldr.w	r3, [sl]
 8004b96:	4499      	add	r9, r3
 8004b98:	2200      	movs	r2, #0
 8004b9a:	2300      	movs	r3, #0
 8004b9c:	4620      	mov	r0, r4
 8004b9e:	4639      	mov	r1, r7
 8004ba0:	f7fb ff02 	bl	80009a8 <__aeabi_dcmpeq>
 8004ba4:	b108      	cbz	r0, 8004baa <__cvt+0x9e>
 8004ba6:	f8cd 901c 	str.w	r9, [sp, #28]
 8004baa:	2230      	movs	r2, #48	; 0x30
 8004bac:	9b07      	ldr	r3, [sp, #28]
 8004bae:	454b      	cmp	r3, r9
 8004bb0:	d307      	bcc.n	8004bc2 <__cvt+0xb6>
 8004bb2:	4630      	mov	r0, r6
 8004bb4:	9b07      	ldr	r3, [sp, #28]
 8004bb6:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8004bb8:	1b9b      	subs	r3, r3, r6
 8004bba:	6013      	str	r3, [r2, #0]
 8004bbc:	b008      	add	sp, #32
 8004bbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004bc2:	1c59      	adds	r1, r3, #1
 8004bc4:	9107      	str	r1, [sp, #28]
 8004bc6:	701a      	strb	r2, [r3, #0]
 8004bc8:	e7f0      	b.n	8004bac <__cvt+0xa0>

08004bca <__exponent>:
 8004bca:	4603      	mov	r3, r0
 8004bcc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004bce:	2900      	cmp	r1, #0
 8004bd0:	f803 2b02 	strb.w	r2, [r3], #2
 8004bd4:	bfb6      	itet	lt
 8004bd6:	222d      	movlt	r2, #45	; 0x2d
 8004bd8:	222b      	movge	r2, #43	; 0x2b
 8004bda:	4249      	neglt	r1, r1
 8004bdc:	2909      	cmp	r1, #9
 8004bde:	7042      	strb	r2, [r0, #1]
 8004be0:	dd2b      	ble.n	8004c3a <__exponent+0x70>
 8004be2:	f10d 0407 	add.w	r4, sp, #7
 8004be6:	46a4      	mov	ip, r4
 8004be8:	270a      	movs	r7, #10
 8004bea:	fb91 f6f7 	sdiv	r6, r1, r7
 8004bee:	460a      	mov	r2, r1
 8004bf0:	46a6      	mov	lr, r4
 8004bf2:	fb07 1516 	mls	r5, r7, r6, r1
 8004bf6:	2a63      	cmp	r2, #99	; 0x63
 8004bf8:	f105 0530 	add.w	r5, r5, #48	; 0x30
 8004bfc:	4631      	mov	r1, r6
 8004bfe:	f104 34ff 	add.w	r4, r4, #4294967295
 8004c02:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8004c06:	dcf0      	bgt.n	8004bea <__exponent+0x20>
 8004c08:	3130      	adds	r1, #48	; 0x30
 8004c0a:	f1ae 0502 	sub.w	r5, lr, #2
 8004c0e:	f804 1c01 	strb.w	r1, [r4, #-1]
 8004c12:	4629      	mov	r1, r5
 8004c14:	1c44      	adds	r4, r0, #1
 8004c16:	4561      	cmp	r1, ip
 8004c18:	d30a      	bcc.n	8004c30 <__exponent+0x66>
 8004c1a:	f10d 0209 	add.w	r2, sp, #9
 8004c1e:	eba2 020e 	sub.w	r2, r2, lr
 8004c22:	4565      	cmp	r5, ip
 8004c24:	bf88      	it	hi
 8004c26:	2200      	movhi	r2, #0
 8004c28:	4413      	add	r3, r2
 8004c2a:	1a18      	subs	r0, r3, r0
 8004c2c:	b003      	add	sp, #12
 8004c2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004c30:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004c34:	f804 2f01 	strb.w	r2, [r4, #1]!
 8004c38:	e7ed      	b.n	8004c16 <__exponent+0x4c>
 8004c3a:	2330      	movs	r3, #48	; 0x30
 8004c3c:	3130      	adds	r1, #48	; 0x30
 8004c3e:	7083      	strb	r3, [r0, #2]
 8004c40:	70c1      	strb	r1, [r0, #3]
 8004c42:	1d03      	adds	r3, r0, #4
 8004c44:	e7f1      	b.n	8004c2a <__exponent+0x60>
	...

08004c48 <_printf_float>:
 8004c48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c4c:	b091      	sub	sp, #68	; 0x44
 8004c4e:	460c      	mov	r4, r1
 8004c50:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8004c54:	4616      	mov	r6, r2
 8004c56:	461f      	mov	r7, r3
 8004c58:	4605      	mov	r5, r0
 8004c5a:	f002 fefd 	bl	8007a58 <_localeconv_r>
 8004c5e:	6803      	ldr	r3, [r0, #0]
 8004c60:	4618      	mov	r0, r3
 8004c62:	9309      	str	r3, [sp, #36]	; 0x24
 8004c64:	f7fb fa74 	bl	8000150 <strlen>
 8004c68:	2300      	movs	r3, #0
 8004c6a:	930e      	str	r3, [sp, #56]	; 0x38
 8004c6c:	f8d8 3000 	ldr.w	r3, [r8]
 8004c70:	900a      	str	r0, [sp, #40]	; 0x28
 8004c72:	3307      	adds	r3, #7
 8004c74:	f023 0307 	bic.w	r3, r3, #7
 8004c78:	f103 0208 	add.w	r2, r3, #8
 8004c7c:	f894 9018 	ldrb.w	r9, [r4, #24]
 8004c80:	f8d4 b000 	ldr.w	fp, [r4]
 8004c84:	f8c8 2000 	str.w	r2, [r8]
 8004c88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c8c:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8004c90:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8004c94:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8004c98:	930b      	str	r3, [sp, #44]	; 0x2c
 8004c9a:	f04f 32ff 	mov.w	r2, #4294967295
 8004c9e:	4640      	mov	r0, r8
 8004ca0:	4b9c      	ldr	r3, [pc, #624]	; (8004f14 <_printf_float+0x2cc>)
 8004ca2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004ca4:	f7fb feb2 	bl	8000a0c <__aeabi_dcmpun>
 8004ca8:	bb70      	cbnz	r0, 8004d08 <_printf_float+0xc0>
 8004caa:	f04f 32ff 	mov.w	r2, #4294967295
 8004cae:	4640      	mov	r0, r8
 8004cb0:	4b98      	ldr	r3, [pc, #608]	; (8004f14 <_printf_float+0x2cc>)
 8004cb2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004cb4:	f7fb fe8c 	bl	80009d0 <__aeabi_dcmple>
 8004cb8:	bb30      	cbnz	r0, 8004d08 <_printf_float+0xc0>
 8004cba:	2200      	movs	r2, #0
 8004cbc:	2300      	movs	r3, #0
 8004cbe:	4640      	mov	r0, r8
 8004cc0:	4651      	mov	r1, sl
 8004cc2:	f7fb fe7b 	bl	80009bc <__aeabi_dcmplt>
 8004cc6:	b110      	cbz	r0, 8004cce <_printf_float+0x86>
 8004cc8:	232d      	movs	r3, #45	; 0x2d
 8004cca:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004cce:	4b92      	ldr	r3, [pc, #584]	; (8004f18 <_printf_float+0x2d0>)
 8004cd0:	4892      	ldr	r0, [pc, #584]	; (8004f1c <_printf_float+0x2d4>)
 8004cd2:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8004cd6:	bf94      	ite	ls
 8004cd8:	4698      	movls	r8, r3
 8004cda:	4680      	movhi	r8, r0
 8004cdc:	2303      	movs	r3, #3
 8004cde:	f04f 0a00 	mov.w	sl, #0
 8004ce2:	6123      	str	r3, [r4, #16]
 8004ce4:	f02b 0304 	bic.w	r3, fp, #4
 8004ce8:	6023      	str	r3, [r4, #0]
 8004cea:	4633      	mov	r3, r6
 8004cec:	4621      	mov	r1, r4
 8004cee:	4628      	mov	r0, r5
 8004cf0:	9700      	str	r7, [sp, #0]
 8004cf2:	aa0f      	add	r2, sp, #60	; 0x3c
 8004cf4:	f000 f9d4 	bl	80050a0 <_printf_common>
 8004cf8:	3001      	adds	r0, #1
 8004cfa:	f040 8090 	bne.w	8004e1e <_printf_float+0x1d6>
 8004cfe:	f04f 30ff 	mov.w	r0, #4294967295
 8004d02:	b011      	add	sp, #68	; 0x44
 8004d04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004d08:	4642      	mov	r2, r8
 8004d0a:	4653      	mov	r3, sl
 8004d0c:	4640      	mov	r0, r8
 8004d0e:	4651      	mov	r1, sl
 8004d10:	f7fb fe7c 	bl	8000a0c <__aeabi_dcmpun>
 8004d14:	b148      	cbz	r0, 8004d2a <_printf_float+0xe2>
 8004d16:	f1ba 0f00 	cmp.w	sl, #0
 8004d1a:	bfb8      	it	lt
 8004d1c:	232d      	movlt	r3, #45	; 0x2d
 8004d1e:	4880      	ldr	r0, [pc, #512]	; (8004f20 <_printf_float+0x2d8>)
 8004d20:	bfb8      	it	lt
 8004d22:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8004d26:	4b7f      	ldr	r3, [pc, #508]	; (8004f24 <_printf_float+0x2dc>)
 8004d28:	e7d3      	b.n	8004cd2 <_printf_float+0x8a>
 8004d2a:	6863      	ldr	r3, [r4, #4]
 8004d2c:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8004d30:	1c5a      	adds	r2, r3, #1
 8004d32:	d142      	bne.n	8004dba <_printf_float+0x172>
 8004d34:	2306      	movs	r3, #6
 8004d36:	6063      	str	r3, [r4, #4]
 8004d38:	2200      	movs	r2, #0
 8004d3a:	9206      	str	r2, [sp, #24]
 8004d3c:	aa0e      	add	r2, sp, #56	; 0x38
 8004d3e:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8004d42:	aa0d      	add	r2, sp, #52	; 0x34
 8004d44:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8004d48:	9203      	str	r2, [sp, #12]
 8004d4a:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8004d4e:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8004d52:	6023      	str	r3, [r4, #0]
 8004d54:	6863      	ldr	r3, [r4, #4]
 8004d56:	4642      	mov	r2, r8
 8004d58:	9300      	str	r3, [sp, #0]
 8004d5a:	4628      	mov	r0, r5
 8004d5c:	4653      	mov	r3, sl
 8004d5e:	910b      	str	r1, [sp, #44]	; 0x2c
 8004d60:	f7ff fed4 	bl	8004b0c <__cvt>
 8004d64:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004d66:	4680      	mov	r8, r0
 8004d68:	2947      	cmp	r1, #71	; 0x47
 8004d6a:	990d      	ldr	r1, [sp, #52]	; 0x34
 8004d6c:	d108      	bne.n	8004d80 <_printf_float+0x138>
 8004d6e:	1cc8      	adds	r0, r1, #3
 8004d70:	db02      	blt.n	8004d78 <_printf_float+0x130>
 8004d72:	6863      	ldr	r3, [r4, #4]
 8004d74:	4299      	cmp	r1, r3
 8004d76:	dd40      	ble.n	8004dfa <_printf_float+0x1b2>
 8004d78:	f1a9 0902 	sub.w	r9, r9, #2
 8004d7c:	fa5f f989 	uxtb.w	r9, r9
 8004d80:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8004d84:	d81f      	bhi.n	8004dc6 <_printf_float+0x17e>
 8004d86:	464a      	mov	r2, r9
 8004d88:	3901      	subs	r1, #1
 8004d8a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8004d8e:	910d      	str	r1, [sp, #52]	; 0x34
 8004d90:	f7ff ff1b 	bl	8004bca <__exponent>
 8004d94:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004d96:	4682      	mov	sl, r0
 8004d98:	1813      	adds	r3, r2, r0
 8004d9a:	2a01      	cmp	r2, #1
 8004d9c:	6123      	str	r3, [r4, #16]
 8004d9e:	dc02      	bgt.n	8004da6 <_printf_float+0x15e>
 8004da0:	6822      	ldr	r2, [r4, #0]
 8004da2:	07d2      	lsls	r2, r2, #31
 8004da4:	d501      	bpl.n	8004daa <_printf_float+0x162>
 8004da6:	3301      	adds	r3, #1
 8004da8:	6123      	str	r3, [r4, #16]
 8004daa:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d09b      	beq.n	8004cea <_printf_float+0xa2>
 8004db2:	232d      	movs	r3, #45	; 0x2d
 8004db4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004db8:	e797      	b.n	8004cea <_printf_float+0xa2>
 8004dba:	2947      	cmp	r1, #71	; 0x47
 8004dbc:	d1bc      	bne.n	8004d38 <_printf_float+0xf0>
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d1ba      	bne.n	8004d38 <_printf_float+0xf0>
 8004dc2:	2301      	movs	r3, #1
 8004dc4:	e7b7      	b.n	8004d36 <_printf_float+0xee>
 8004dc6:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8004dca:	d118      	bne.n	8004dfe <_printf_float+0x1b6>
 8004dcc:	2900      	cmp	r1, #0
 8004dce:	6863      	ldr	r3, [r4, #4]
 8004dd0:	dd0b      	ble.n	8004dea <_printf_float+0x1a2>
 8004dd2:	6121      	str	r1, [r4, #16]
 8004dd4:	b913      	cbnz	r3, 8004ddc <_printf_float+0x194>
 8004dd6:	6822      	ldr	r2, [r4, #0]
 8004dd8:	07d0      	lsls	r0, r2, #31
 8004dda:	d502      	bpl.n	8004de2 <_printf_float+0x19a>
 8004ddc:	3301      	adds	r3, #1
 8004dde:	440b      	add	r3, r1
 8004de0:	6123      	str	r3, [r4, #16]
 8004de2:	f04f 0a00 	mov.w	sl, #0
 8004de6:	65a1      	str	r1, [r4, #88]	; 0x58
 8004de8:	e7df      	b.n	8004daa <_printf_float+0x162>
 8004dea:	b913      	cbnz	r3, 8004df2 <_printf_float+0x1aa>
 8004dec:	6822      	ldr	r2, [r4, #0]
 8004dee:	07d2      	lsls	r2, r2, #31
 8004df0:	d501      	bpl.n	8004df6 <_printf_float+0x1ae>
 8004df2:	3302      	adds	r3, #2
 8004df4:	e7f4      	b.n	8004de0 <_printf_float+0x198>
 8004df6:	2301      	movs	r3, #1
 8004df8:	e7f2      	b.n	8004de0 <_printf_float+0x198>
 8004dfa:	f04f 0967 	mov.w	r9, #103	; 0x67
 8004dfe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004e00:	4299      	cmp	r1, r3
 8004e02:	db05      	blt.n	8004e10 <_printf_float+0x1c8>
 8004e04:	6823      	ldr	r3, [r4, #0]
 8004e06:	6121      	str	r1, [r4, #16]
 8004e08:	07d8      	lsls	r0, r3, #31
 8004e0a:	d5ea      	bpl.n	8004de2 <_printf_float+0x19a>
 8004e0c:	1c4b      	adds	r3, r1, #1
 8004e0e:	e7e7      	b.n	8004de0 <_printf_float+0x198>
 8004e10:	2900      	cmp	r1, #0
 8004e12:	bfcc      	ite	gt
 8004e14:	2201      	movgt	r2, #1
 8004e16:	f1c1 0202 	rsble	r2, r1, #2
 8004e1a:	4413      	add	r3, r2
 8004e1c:	e7e0      	b.n	8004de0 <_printf_float+0x198>
 8004e1e:	6823      	ldr	r3, [r4, #0]
 8004e20:	055a      	lsls	r2, r3, #21
 8004e22:	d407      	bmi.n	8004e34 <_printf_float+0x1ec>
 8004e24:	6923      	ldr	r3, [r4, #16]
 8004e26:	4642      	mov	r2, r8
 8004e28:	4631      	mov	r1, r6
 8004e2a:	4628      	mov	r0, r5
 8004e2c:	47b8      	blx	r7
 8004e2e:	3001      	adds	r0, #1
 8004e30:	d12b      	bne.n	8004e8a <_printf_float+0x242>
 8004e32:	e764      	b.n	8004cfe <_printf_float+0xb6>
 8004e34:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8004e38:	f240 80dd 	bls.w	8004ff6 <_printf_float+0x3ae>
 8004e3c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004e40:	2200      	movs	r2, #0
 8004e42:	2300      	movs	r3, #0
 8004e44:	f7fb fdb0 	bl	80009a8 <__aeabi_dcmpeq>
 8004e48:	2800      	cmp	r0, #0
 8004e4a:	d033      	beq.n	8004eb4 <_printf_float+0x26c>
 8004e4c:	2301      	movs	r3, #1
 8004e4e:	4631      	mov	r1, r6
 8004e50:	4628      	mov	r0, r5
 8004e52:	4a35      	ldr	r2, [pc, #212]	; (8004f28 <_printf_float+0x2e0>)
 8004e54:	47b8      	blx	r7
 8004e56:	3001      	adds	r0, #1
 8004e58:	f43f af51 	beq.w	8004cfe <_printf_float+0xb6>
 8004e5c:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004e60:	429a      	cmp	r2, r3
 8004e62:	db02      	blt.n	8004e6a <_printf_float+0x222>
 8004e64:	6823      	ldr	r3, [r4, #0]
 8004e66:	07d8      	lsls	r0, r3, #31
 8004e68:	d50f      	bpl.n	8004e8a <_printf_float+0x242>
 8004e6a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004e6e:	4631      	mov	r1, r6
 8004e70:	4628      	mov	r0, r5
 8004e72:	47b8      	blx	r7
 8004e74:	3001      	adds	r0, #1
 8004e76:	f43f af42 	beq.w	8004cfe <_printf_float+0xb6>
 8004e7a:	f04f 0800 	mov.w	r8, #0
 8004e7e:	f104 091a 	add.w	r9, r4, #26
 8004e82:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004e84:	3b01      	subs	r3, #1
 8004e86:	4543      	cmp	r3, r8
 8004e88:	dc09      	bgt.n	8004e9e <_printf_float+0x256>
 8004e8a:	6823      	ldr	r3, [r4, #0]
 8004e8c:	079b      	lsls	r3, r3, #30
 8004e8e:	f100 8102 	bmi.w	8005096 <_printf_float+0x44e>
 8004e92:	68e0      	ldr	r0, [r4, #12]
 8004e94:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004e96:	4298      	cmp	r0, r3
 8004e98:	bfb8      	it	lt
 8004e9a:	4618      	movlt	r0, r3
 8004e9c:	e731      	b.n	8004d02 <_printf_float+0xba>
 8004e9e:	2301      	movs	r3, #1
 8004ea0:	464a      	mov	r2, r9
 8004ea2:	4631      	mov	r1, r6
 8004ea4:	4628      	mov	r0, r5
 8004ea6:	47b8      	blx	r7
 8004ea8:	3001      	adds	r0, #1
 8004eaa:	f43f af28 	beq.w	8004cfe <_printf_float+0xb6>
 8004eae:	f108 0801 	add.w	r8, r8, #1
 8004eb2:	e7e6      	b.n	8004e82 <_printf_float+0x23a>
 8004eb4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	dc38      	bgt.n	8004f2c <_printf_float+0x2e4>
 8004eba:	2301      	movs	r3, #1
 8004ebc:	4631      	mov	r1, r6
 8004ebe:	4628      	mov	r0, r5
 8004ec0:	4a19      	ldr	r2, [pc, #100]	; (8004f28 <_printf_float+0x2e0>)
 8004ec2:	47b8      	blx	r7
 8004ec4:	3001      	adds	r0, #1
 8004ec6:	f43f af1a 	beq.w	8004cfe <_printf_float+0xb6>
 8004eca:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004ece:	4313      	orrs	r3, r2
 8004ed0:	d102      	bne.n	8004ed8 <_printf_float+0x290>
 8004ed2:	6823      	ldr	r3, [r4, #0]
 8004ed4:	07d9      	lsls	r1, r3, #31
 8004ed6:	d5d8      	bpl.n	8004e8a <_printf_float+0x242>
 8004ed8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004edc:	4631      	mov	r1, r6
 8004ede:	4628      	mov	r0, r5
 8004ee0:	47b8      	blx	r7
 8004ee2:	3001      	adds	r0, #1
 8004ee4:	f43f af0b 	beq.w	8004cfe <_printf_float+0xb6>
 8004ee8:	f04f 0900 	mov.w	r9, #0
 8004eec:	f104 0a1a 	add.w	sl, r4, #26
 8004ef0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004ef2:	425b      	negs	r3, r3
 8004ef4:	454b      	cmp	r3, r9
 8004ef6:	dc01      	bgt.n	8004efc <_printf_float+0x2b4>
 8004ef8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004efa:	e794      	b.n	8004e26 <_printf_float+0x1de>
 8004efc:	2301      	movs	r3, #1
 8004efe:	4652      	mov	r2, sl
 8004f00:	4631      	mov	r1, r6
 8004f02:	4628      	mov	r0, r5
 8004f04:	47b8      	blx	r7
 8004f06:	3001      	adds	r0, #1
 8004f08:	f43f aef9 	beq.w	8004cfe <_printf_float+0xb6>
 8004f0c:	f109 0901 	add.w	r9, r9, #1
 8004f10:	e7ee      	b.n	8004ef0 <_printf_float+0x2a8>
 8004f12:	bf00      	nop
 8004f14:	7fefffff 	.word	0x7fefffff
 8004f18:	08009d18 	.word	0x08009d18
 8004f1c:	08009d1c 	.word	0x08009d1c
 8004f20:	08009d24 	.word	0x08009d24
 8004f24:	08009d20 	.word	0x08009d20
 8004f28:	0800a119 	.word	0x0800a119
 8004f2c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004f2e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004f30:	429a      	cmp	r2, r3
 8004f32:	bfa8      	it	ge
 8004f34:	461a      	movge	r2, r3
 8004f36:	2a00      	cmp	r2, #0
 8004f38:	4691      	mov	r9, r2
 8004f3a:	dc37      	bgt.n	8004fac <_printf_float+0x364>
 8004f3c:	f04f 0b00 	mov.w	fp, #0
 8004f40:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004f44:	f104 021a 	add.w	r2, r4, #26
 8004f48:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8004f4c:	ebaa 0309 	sub.w	r3, sl, r9
 8004f50:	455b      	cmp	r3, fp
 8004f52:	dc33      	bgt.n	8004fbc <_printf_float+0x374>
 8004f54:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004f58:	429a      	cmp	r2, r3
 8004f5a:	db3b      	blt.n	8004fd4 <_printf_float+0x38c>
 8004f5c:	6823      	ldr	r3, [r4, #0]
 8004f5e:	07da      	lsls	r2, r3, #31
 8004f60:	d438      	bmi.n	8004fd4 <_printf_float+0x38c>
 8004f62:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004f64:	990d      	ldr	r1, [sp, #52]	; 0x34
 8004f66:	eba3 020a 	sub.w	r2, r3, sl
 8004f6a:	eba3 0901 	sub.w	r9, r3, r1
 8004f6e:	4591      	cmp	r9, r2
 8004f70:	bfa8      	it	ge
 8004f72:	4691      	movge	r9, r2
 8004f74:	f1b9 0f00 	cmp.w	r9, #0
 8004f78:	dc34      	bgt.n	8004fe4 <_printf_float+0x39c>
 8004f7a:	f04f 0800 	mov.w	r8, #0
 8004f7e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004f82:	f104 0a1a 	add.w	sl, r4, #26
 8004f86:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004f8a:	1a9b      	subs	r3, r3, r2
 8004f8c:	eba3 0309 	sub.w	r3, r3, r9
 8004f90:	4543      	cmp	r3, r8
 8004f92:	f77f af7a 	ble.w	8004e8a <_printf_float+0x242>
 8004f96:	2301      	movs	r3, #1
 8004f98:	4652      	mov	r2, sl
 8004f9a:	4631      	mov	r1, r6
 8004f9c:	4628      	mov	r0, r5
 8004f9e:	47b8      	blx	r7
 8004fa0:	3001      	adds	r0, #1
 8004fa2:	f43f aeac 	beq.w	8004cfe <_printf_float+0xb6>
 8004fa6:	f108 0801 	add.w	r8, r8, #1
 8004faa:	e7ec      	b.n	8004f86 <_printf_float+0x33e>
 8004fac:	4613      	mov	r3, r2
 8004fae:	4631      	mov	r1, r6
 8004fb0:	4642      	mov	r2, r8
 8004fb2:	4628      	mov	r0, r5
 8004fb4:	47b8      	blx	r7
 8004fb6:	3001      	adds	r0, #1
 8004fb8:	d1c0      	bne.n	8004f3c <_printf_float+0x2f4>
 8004fba:	e6a0      	b.n	8004cfe <_printf_float+0xb6>
 8004fbc:	2301      	movs	r3, #1
 8004fbe:	4631      	mov	r1, r6
 8004fc0:	4628      	mov	r0, r5
 8004fc2:	920b      	str	r2, [sp, #44]	; 0x2c
 8004fc4:	47b8      	blx	r7
 8004fc6:	3001      	adds	r0, #1
 8004fc8:	f43f ae99 	beq.w	8004cfe <_printf_float+0xb6>
 8004fcc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004fce:	f10b 0b01 	add.w	fp, fp, #1
 8004fd2:	e7b9      	b.n	8004f48 <_printf_float+0x300>
 8004fd4:	4631      	mov	r1, r6
 8004fd6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004fda:	4628      	mov	r0, r5
 8004fdc:	47b8      	blx	r7
 8004fde:	3001      	adds	r0, #1
 8004fe0:	d1bf      	bne.n	8004f62 <_printf_float+0x31a>
 8004fe2:	e68c      	b.n	8004cfe <_printf_float+0xb6>
 8004fe4:	464b      	mov	r3, r9
 8004fe6:	4631      	mov	r1, r6
 8004fe8:	4628      	mov	r0, r5
 8004fea:	eb08 020a 	add.w	r2, r8, sl
 8004fee:	47b8      	blx	r7
 8004ff0:	3001      	adds	r0, #1
 8004ff2:	d1c2      	bne.n	8004f7a <_printf_float+0x332>
 8004ff4:	e683      	b.n	8004cfe <_printf_float+0xb6>
 8004ff6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004ff8:	2a01      	cmp	r2, #1
 8004ffa:	dc01      	bgt.n	8005000 <_printf_float+0x3b8>
 8004ffc:	07db      	lsls	r3, r3, #31
 8004ffe:	d537      	bpl.n	8005070 <_printf_float+0x428>
 8005000:	2301      	movs	r3, #1
 8005002:	4642      	mov	r2, r8
 8005004:	4631      	mov	r1, r6
 8005006:	4628      	mov	r0, r5
 8005008:	47b8      	blx	r7
 800500a:	3001      	adds	r0, #1
 800500c:	f43f ae77 	beq.w	8004cfe <_printf_float+0xb6>
 8005010:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005014:	4631      	mov	r1, r6
 8005016:	4628      	mov	r0, r5
 8005018:	47b8      	blx	r7
 800501a:	3001      	adds	r0, #1
 800501c:	f43f ae6f 	beq.w	8004cfe <_printf_float+0xb6>
 8005020:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005024:	2200      	movs	r2, #0
 8005026:	2300      	movs	r3, #0
 8005028:	f7fb fcbe 	bl	80009a8 <__aeabi_dcmpeq>
 800502c:	b9d8      	cbnz	r0, 8005066 <_printf_float+0x41e>
 800502e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005030:	f108 0201 	add.w	r2, r8, #1
 8005034:	3b01      	subs	r3, #1
 8005036:	4631      	mov	r1, r6
 8005038:	4628      	mov	r0, r5
 800503a:	47b8      	blx	r7
 800503c:	3001      	adds	r0, #1
 800503e:	d10e      	bne.n	800505e <_printf_float+0x416>
 8005040:	e65d      	b.n	8004cfe <_printf_float+0xb6>
 8005042:	2301      	movs	r3, #1
 8005044:	464a      	mov	r2, r9
 8005046:	4631      	mov	r1, r6
 8005048:	4628      	mov	r0, r5
 800504a:	47b8      	blx	r7
 800504c:	3001      	adds	r0, #1
 800504e:	f43f ae56 	beq.w	8004cfe <_printf_float+0xb6>
 8005052:	f108 0801 	add.w	r8, r8, #1
 8005056:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005058:	3b01      	subs	r3, #1
 800505a:	4543      	cmp	r3, r8
 800505c:	dcf1      	bgt.n	8005042 <_printf_float+0x3fa>
 800505e:	4653      	mov	r3, sl
 8005060:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005064:	e6e0      	b.n	8004e28 <_printf_float+0x1e0>
 8005066:	f04f 0800 	mov.w	r8, #0
 800506a:	f104 091a 	add.w	r9, r4, #26
 800506e:	e7f2      	b.n	8005056 <_printf_float+0x40e>
 8005070:	2301      	movs	r3, #1
 8005072:	4642      	mov	r2, r8
 8005074:	e7df      	b.n	8005036 <_printf_float+0x3ee>
 8005076:	2301      	movs	r3, #1
 8005078:	464a      	mov	r2, r9
 800507a:	4631      	mov	r1, r6
 800507c:	4628      	mov	r0, r5
 800507e:	47b8      	blx	r7
 8005080:	3001      	adds	r0, #1
 8005082:	f43f ae3c 	beq.w	8004cfe <_printf_float+0xb6>
 8005086:	f108 0801 	add.w	r8, r8, #1
 800508a:	68e3      	ldr	r3, [r4, #12]
 800508c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800508e:	1a5b      	subs	r3, r3, r1
 8005090:	4543      	cmp	r3, r8
 8005092:	dcf0      	bgt.n	8005076 <_printf_float+0x42e>
 8005094:	e6fd      	b.n	8004e92 <_printf_float+0x24a>
 8005096:	f04f 0800 	mov.w	r8, #0
 800509a:	f104 0919 	add.w	r9, r4, #25
 800509e:	e7f4      	b.n	800508a <_printf_float+0x442>

080050a0 <_printf_common>:
 80050a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80050a4:	4616      	mov	r6, r2
 80050a6:	4699      	mov	r9, r3
 80050a8:	688a      	ldr	r2, [r1, #8]
 80050aa:	690b      	ldr	r3, [r1, #16]
 80050ac:	4607      	mov	r7, r0
 80050ae:	4293      	cmp	r3, r2
 80050b0:	bfb8      	it	lt
 80050b2:	4613      	movlt	r3, r2
 80050b4:	6033      	str	r3, [r6, #0]
 80050b6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80050ba:	460c      	mov	r4, r1
 80050bc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80050c0:	b10a      	cbz	r2, 80050c6 <_printf_common+0x26>
 80050c2:	3301      	adds	r3, #1
 80050c4:	6033      	str	r3, [r6, #0]
 80050c6:	6823      	ldr	r3, [r4, #0]
 80050c8:	0699      	lsls	r1, r3, #26
 80050ca:	bf42      	ittt	mi
 80050cc:	6833      	ldrmi	r3, [r6, #0]
 80050ce:	3302      	addmi	r3, #2
 80050d0:	6033      	strmi	r3, [r6, #0]
 80050d2:	6825      	ldr	r5, [r4, #0]
 80050d4:	f015 0506 	ands.w	r5, r5, #6
 80050d8:	d106      	bne.n	80050e8 <_printf_common+0x48>
 80050da:	f104 0a19 	add.w	sl, r4, #25
 80050de:	68e3      	ldr	r3, [r4, #12]
 80050e0:	6832      	ldr	r2, [r6, #0]
 80050e2:	1a9b      	subs	r3, r3, r2
 80050e4:	42ab      	cmp	r3, r5
 80050e6:	dc28      	bgt.n	800513a <_printf_common+0x9a>
 80050e8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80050ec:	1e13      	subs	r3, r2, #0
 80050ee:	6822      	ldr	r2, [r4, #0]
 80050f0:	bf18      	it	ne
 80050f2:	2301      	movne	r3, #1
 80050f4:	0692      	lsls	r2, r2, #26
 80050f6:	d42d      	bmi.n	8005154 <_printf_common+0xb4>
 80050f8:	4649      	mov	r1, r9
 80050fa:	4638      	mov	r0, r7
 80050fc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005100:	47c0      	blx	r8
 8005102:	3001      	adds	r0, #1
 8005104:	d020      	beq.n	8005148 <_printf_common+0xa8>
 8005106:	6823      	ldr	r3, [r4, #0]
 8005108:	68e5      	ldr	r5, [r4, #12]
 800510a:	f003 0306 	and.w	r3, r3, #6
 800510e:	2b04      	cmp	r3, #4
 8005110:	bf18      	it	ne
 8005112:	2500      	movne	r5, #0
 8005114:	6832      	ldr	r2, [r6, #0]
 8005116:	f04f 0600 	mov.w	r6, #0
 800511a:	68a3      	ldr	r3, [r4, #8]
 800511c:	bf08      	it	eq
 800511e:	1aad      	subeq	r5, r5, r2
 8005120:	6922      	ldr	r2, [r4, #16]
 8005122:	bf08      	it	eq
 8005124:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005128:	4293      	cmp	r3, r2
 800512a:	bfc4      	itt	gt
 800512c:	1a9b      	subgt	r3, r3, r2
 800512e:	18ed      	addgt	r5, r5, r3
 8005130:	341a      	adds	r4, #26
 8005132:	42b5      	cmp	r5, r6
 8005134:	d11a      	bne.n	800516c <_printf_common+0xcc>
 8005136:	2000      	movs	r0, #0
 8005138:	e008      	b.n	800514c <_printf_common+0xac>
 800513a:	2301      	movs	r3, #1
 800513c:	4652      	mov	r2, sl
 800513e:	4649      	mov	r1, r9
 8005140:	4638      	mov	r0, r7
 8005142:	47c0      	blx	r8
 8005144:	3001      	adds	r0, #1
 8005146:	d103      	bne.n	8005150 <_printf_common+0xb0>
 8005148:	f04f 30ff 	mov.w	r0, #4294967295
 800514c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005150:	3501      	adds	r5, #1
 8005152:	e7c4      	b.n	80050de <_printf_common+0x3e>
 8005154:	2030      	movs	r0, #48	; 0x30
 8005156:	18e1      	adds	r1, r4, r3
 8005158:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800515c:	1c5a      	adds	r2, r3, #1
 800515e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005162:	4422      	add	r2, r4
 8005164:	3302      	adds	r3, #2
 8005166:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800516a:	e7c5      	b.n	80050f8 <_printf_common+0x58>
 800516c:	2301      	movs	r3, #1
 800516e:	4622      	mov	r2, r4
 8005170:	4649      	mov	r1, r9
 8005172:	4638      	mov	r0, r7
 8005174:	47c0      	blx	r8
 8005176:	3001      	adds	r0, #1
 8005178:	d0e6      	beq.n	8005148 <_printf_common+0xa8>
 800517a:	3601      	adds	r6, #1
 800517c:	e7d9      	b.n	8005132 <_printf_common+0x92>
	...

08005180 <_printf_i>:
 8005180:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005184:	7e0f      	ldrb	r7, [r1, #24]
 8005186:	4691      	mov	r9, r2
 8005188:	2f78      	cmp	r7, #120	; 0x78
 800518a:	4680      	mov	r8, r0
 800518c:	460c      	mov	r4, r1
 800518e:	469a      	mov	sl, r3
 8005190:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005192:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005196:	d807      	bhi.n	80051a8 <_printf_i+0x28>
 8005198:	2f62      	cmp	r7, #98	; 0x62
 800519a:	d80a      	bhi.n	80051b2 <_printf_i+0x32>
 800519c:	2f00      	cmp	r7, #0
 800519e:	f000 80d9 	beq.w	8005354 <_printf_i+0x1d4>
 80051a2:	2f58      	cmp	r7, #88	; 0x58
 80051a4:	f000 80a4 	beq.w	80052f0 <_printf_i+0x170>
 80051a8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80051ac:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80051b0:	e03a      	b.n	8005228 <_printf_i+0xa8>
 80051b2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80051b6:	2b15      	cmp	r3, #21
 80051b8:	d8f6      	bhi.n	80051a8 <_printf_i+0x28>
 80051ba:	a101      	add	r1, pc, #4	; (adr r1, 80051c0 <_printf_i+0x40>)
 80051bc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80051c0:	08005219 	.word	0x08005219
 80051c4:	0800522d 	.word	0x0800522d
 80051c8:	080051a9 	.word	0x080051a9
 80051cc:	080051a9 	.word	0x080051a9
 80051d0:	080051a9 	.word	0x080051a9
 80051d4:	080051a9 	.word	0x080051a9
 80051d8:	0800522d 	.word	0x0800522d
 80051dc:	080051a9 	.word	0x080051a9
 80051e0:	080051a9 	.word	0x080051a9
 80051e4:	080051a9 	.word	0x080051a9
 80051e8:	080051a9 	.word	0x080051a9
 80051ec:	0800533b 	.word	0x0800533b
 80051f0:	0800525d 	.word	0x0800525d
 80051f4:	0800531d 	.word	0x0800531d
 80051f8:	080051a9 	.word	0x080051a9
 80051fc:	080051a9 	.word	0x080051a9
 8005200:	0800535d 	.word	0x0800535d
 8005204:	080051a9 	.word	0x080051a9
 8005208:	0800525d 	.word	0x0800525d
 800520c:	080051a9 	.word	0x080051a9
 8005210:	080051a9 	.word	0x080051a9
 8005214:	08005325 	.word	0x08005325
 8005218:	682b      	ldr	r3, [r5, #0]
 800521a:	1d1a      	adds	r2, r3, #4
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	602a      	str	r2, [r5, #0]
 8005220:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005224:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005228:	2301      	movs	r3, #1
 800522a:	e0a4      	b.n	8005376 <_printf_i+0x1f6>
 800522c:	6820      	ldr	r0, [r4, #0]
 800522e:	6829      	ldr	r1, [r5, #0]
 8005230:	0606      	lsls	r6, r0, #24
 8005232:	f101 0304 	add.w	r3, r1, #4
 8005236:	d50a      	bpl.n	800524e <_printf_i+0xce>
 8005238:	680e      	ldr	r6, [r1, #0]
 800523a:	602b      	str	r3, [r5, #0]
 800523c:	2e00      	cmp	r6, #0
 800523e:	da03      	bge.n	8005248 <_printf_i+0xc8>
 8005240:	232d      	movs	r3, #45	; 0x2d
 8005242:	4276      	negs	r6, r6
 8005244:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005248:	230a      	movs	r3, #10
 800524a:	485e      	ldr	r0, [pc, #376]	; (80053c4 <_printf_i+0x244>)
 800524c:	e019      	b.n	8005282 <_printf_i+0x102>
 800524e:	680e      	ldr	r6, [r1, #0]
 8005250:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005254:	602b      	str	r3, [r5, #0]
 8005256:	bf18      	it	ne
 8005258:	b236      	sxthne	r6, r6
 800525a:	e7ef      	b.n	800523c <_printf_i+0xbc>
 800525c:	682b      	ldr	r3, [r5, #0]
 800525e:	6820      	ldr	r0, [r4, #0]
 8005260:	1d19      	adds	r1, r3, #4
 8005262:	6029      	str	r1, [r5, #0]
 8005264:	0601      	lsls	r1, r0, #24
 8005266:	d501      	bpl.n	800526c <_printf_i+0xec>
 8005268:	681e      	ldr	r6, [r3, #0]
 800526a:	e002      	b.n	8005272 <_printf_i+0xf2>
 800526c:	0646      	lsls	r6, r0, #25
 800526e:	d5fb      	bpl.n	8005268 <_printf_i+0xe8>
 8005270:	881e      	ldrh	r6, [r3, #0]
 8005272:	2f6f      	cmp	r7, #111	; 0x6f
 8005274:	bf0c      	ite	eq
 8005276:	2308      	moveq	r3, #8
 8005278:	230a      	movne	r3, #10
 800527a:	4852      	ldr	r0, [pc, #328]	; (80053c4 <_printf_i+0x244>)
 800527c:	2100      	movs	r1, #0
 800527e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005282:	6865      	ldr	r5, [r4, #4]
 8005284:	2d00      	cmp	r5, #0
 8005286:	bfa8      	it	ge
 8005288:	6821      	ldrge	r1, [r4, #0]
 800528a:	60a5      	str	r5, [r4, #8]
 800528c:	bfa4      	itt	ge
 800528e:	f021 0104 	bicge.w	r1, r1, #4
 8005292:	6021      	strge	r1, [r4, #0]
 8005294:	b90e      	cbnz	r6, 800529a <_printf_i+0x11a>
 8005296:	2d00      	cmp	r5, #0
 8005298:	d04d      	beq.n	8005336 <_printf_i+0x1b6>
 800529a:	4615      	mov	r5, r2
 800529c:	fbb6 f1f3 	udiv	r1, r6, r3
 80052a0:	fb03 6711 	mls	r7, r3, r1, r6
 80052a4:	5dc7      	ldrb	r7, [r0, r7]
 80052a6:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80052aa:	4637      	mov	r7, r6
 80052ac:	42bb      	cmp	r3, r7
 80052ae:	460e      	mov	r6, r1
 80052b0:	d9f4      	bls.n	800529c <_printf_i+0x11c>
 80052b2:	2b08      	cmp	r3, #8
 80052b4:	d10b      	bne.n	80052ce <_printf_i+0x14e>
 80052b6:	6823      	ldr	r3, [r4, #0]
 80052b8:	07de      	lsls	r6, r3, #31
 80052ba:	d508      	bpl.n	80052ce <_printf_i+0x14e>
 80052bc:	6923      	ldr	r3, [r4, #16]
 80052be:	6861      	ldr	r1, [r4, #4]
 80052c0:	4299      	cmp	r1, r3
 80052c2:	bfde      	ittt	le
 80052c4:	2330      	movle	r3, #48	; 0x30
 80052c6:	f805 3c01 	strble.w	r3, [r5, #-1]
 80052ca:	f105 35ff 	addle.w	r5, r5, #4294967295
 80052ce:	1b52      	subs	r2, r2, r5
 80052d0:	6122      	str	r2, [r4, #16]
 80052d2:	464b      	mov	r3, r9
 80052d4:	4621      	mov	r1, r4
 80052d6:	4640      	mov	r0, r8
 80052d8:	f8cd a000 	str.w	sl, [sp]
 80052dc:	aa03      	add	r2, sp, #12
 80052de:	f7ff fedf 	bl	80050a0 <_printf_common>
 80052e2:	3001      	adds	r0, #1
 80052e4:	d14c      	bne.n	8005380 <_printf_i+0x200>
 80052e6:	f04f 30ff 	mov.w	r0, #4294967295
 80052ea:	b004      	add	sp, #16
 80052ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80052f0:	4834      	ldr	r0, [pc, #208]	; (80053c4 <_printf_i+0x244>)
 80052f2:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80052f6:	6829      	ldr	r1, [r5, #0]
 80052f8:	6823      	ldr	r3, [r4, #0]
 80052fa:	f851 6b04 	ldr.w	r6, [r1], #4
 80052fe:	6029      	str	r1, [r5, #0]
 8005300:	061d      	lsls	r5, r3, #24
 8005302:	d514      	bpl.n	800532e <_printf_i+0x1ae>
 8005304:	07df      	lsls	r7, r3, #31
 8005306:	bf44      	itt	mi
 8005308:	f043 0320 	orrmi.w	r3, r3, #32
 800530c:	6023      	strmi	r3, [r4, #0]
 800530e:	b91e      	cbnz	r6, 8005318 <_printf_i+0x198>
 8005310:	6823      	ldr	r3, [r4, #0]
 8005312:	f023 0320 	bic.w	r3, r3, #32
 8005316:	6023      	str	r3, [r4, #0]
 8005318:	2310      	movs	r3, #16
 800531a:	e7af      	b.n	800527c <_printf_i+0xfc>
 800531c:	6823      	ldr	r3, [r4, #0]
 800531e:	f043 0320 	orr.w	r3, r3, #32
 8005322:	6023      	str	r3, [r4, #0]
 8005324:	2378      	movs	r3, #120	; 0x78
 8005326:	4828      	ldr	r0, [pc, #160]	; (80053c8 <_printf_i+0x248>)
 8005328:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800532c:	e7e3      	b.n	80052f6 <_printf_i+0x176>
 800532e:	0659      	lsls	r1, r3, #25
 8005330:	bf48      	it	mi
 8005332:	b2b6      	uxthmi	r6, r6
 8005334:	e7e6      	b.n	8005304 <_printf_i+0x184>
 8005336:	4615      	mov	r5, r2
 8005338:	e7bb      	b.n	80052b2 <_printf_i+0x132>
 800533a:	682b      	ldr	r3, [r5, #0]
 800533c:	6826      	ldr	r6, [r4, #0]
 800533e:	1d18      	adds	r0, r3, #4
 8005340:	6961      	ldr	r1, [r4, #20]
 8005342:	6028      	str	r0, [r5, #0]
 8005344:	0635      	lsls	r5, r6, #24
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	d501      	bpl.n	800534e <_printf_i+0x1ce>
 800534a:	6019      	str	r1, [r3, #0]
 800534c:	e002      	b.n	8005354 <_printf_i+0x1d4>
 800534e:	0670      	lsls	r0, r6, #25
 8005350:	d5fb      	bpl.n	800534a <_printf_i+0x1ca>
 8005352:	8019      	strh	r1, [r3, #0]
 8005354:	2300      	movs	r3, #0
 8005356:	4615      	mov	r5, r2
 8005358:	6123      	str	r3, [r4, #16]
 800535a:	e7ba      	b.n	80052d2 <_printf_i+0x152>
 800535c:	682b      	ldr	r3, [r5, #0]
 800535e:	2100      	movs	r1, #0
 8005360:	1d1a      	adds	r2, r3, #4
 8005362:	602a      	str	r2, [r5, #0]
 8005364:	681d      	ldr	r5, [r3, #0]
 8005366:	6862      	ldr	r2, [r4, #4]
 8005368:	4628      	mov	r0, r5
 800536a:	f002 fba5 	bl	8007ab8 <memchr>
 800536e:	b108      	cbz	r0, 8005374 <_printf_i+0x1f4>
 8005370:	1b40      	subs	r0, r0, r5
 8005372:	6060      	str	r0, [r4, #4]
 8005374:	6863      	ldr	r3, [r4, #4]
 8005376:	6123      	str	r3, [r4, #16]
 8005378:	2300      	movs	r3, #0
 800537a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800537e:	e7a8      	b.n	80052d2 <_printf_i+0x152>
 8005380:	462a      	mov	r2, r5
 8005382:	4649      	mov	r1, r9
 8005384:	4640      	mov	r0, r8
 8005386:	6923      	ldr	r3, [r4, #16]
 8005388:	47d0      	blx	sl
 800538a:	3001      	adds	r0, #1
 800538c:	d0ab      	beq.n	80052e6 <_printf_i+0x166>
 800538e:	6823      	ldr	r3, [r4, #0]
 8005390:	079b      	lsls	r3, r3, #30
 8005392:	d413      	bmi.n	80053bc <_printf_i+0x23c>
 8005394:	68e0      	ldr	r0, [r4, #12]
 8005396:	9b03      	ldr	r3, [sp, #12]
 8005398:	4298      	cmp	r0, r3
 800539a:	bfb8      	it	lt
 800539c:	4618      	movlt	r0, r3
 800539e:	e7a4      	b.n	80052ea <_printf_i+0x16a>
 80053a0:	2301      	movs	r3, #1
 80053a2:	4632      	mov	r2, r6
 80053a4:	4649      	mov	r1, r9
 80053a6:	4640      	mov	r0, r8
 80053a8:	47d0      	blx	sl
 80053aa:	3001      	adds	r0, #1
 80053ac:	d09b      	beq.n	80052e6 <_printf_i+0x166>
 80053ae:	3501      	adds	r5, #1
 80053b0:	68e3      	ldr	r3, [r4, #12]
 80053b2:	9903      	ldr	r1, [sp, #12]
 80053b4:	1a5b      	subs	r3, r3, r1
 80053b6:	42ab      	cmp	r3, r5
 80053b8:	dcf2      	bgt.n	80053a0 <_printf_i+0x220>
 80053ba:	e7eb      	b.n	8005394 <_printf_i+0x214>
 80053bc:	2500      	movs	r5, #0
 80053be:	f104 0619 	add.w	r6, r4, #25
 80053c2:	e7f5      	b.n	80053b0 <_printf_i+0x230>
 80053c4:	08009d28 	.word	0x08009d28
 80053c8:	08009d39 	.word	0x08009d39

080053cc <_scanf_float>:
 80053cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80053d0:	b087      	sub	sp, #28
 80053d2:	9303      	str	r3, [sp, #12]
 80053d4:	688b      	ldr	r3, [r1, #8]
 80053d6:	4617      	mov	r7, r2
 80053d8:	1e5a      	subs	r2, r3, #1
 80053da:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80053de:	bf85      	ittet	hi
 80053e0:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80053e4:	195b      	addhi	r3, r3, r5
 80053e6:	2300      	movls	r3, #0
 80053e8:	9302      	strhi	r3, [sp, #8]
 80053ea:	bf88      	it	hi
 80053ec:	f240 135d 	movwhi	r3, #349	; 0x15d
 80053f0:	468b      	mov	fp, r1
 80053f2:	f04f 0500 	mov.w	r5, #0
 80053f6:	bf8c      	ite	hi
 80053f8:	608b      	strhi	r3, [r1, #8]
 80053fa:	9302      	strls	r3, [sp, #8]
 80053fc:	680b      	ldr	r3, [r1, #0]
 80053fe:	4680      	mov	r8, r0
 8005400:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8005404:	f84b 3b1c 	str.w	r3, [fp], #28
 8005408:	460c      	mov	r4, r1
 800540a:	465e      	mov	r6, fp
 800540c:	46aa      	mov	sl, r5
 800540e:	46a9      	mov	r9, r5
 8005410:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8005414:	9501      	str	r5, [sp, #4]
 8005416:	68a2      	ldr	r2, [r4, #8]
 8005418:	b152      	cbz	r2, 8005430 <_scanf_float+0x64>
 800541a:	683b      	ldr	r3, [r7, #0]
 800541c:	781b      	ldrb	r3, [r3, #0]
 800541e:	2b4e      	cmp	r3, #78	; 0x4e
 8005420:	d864      	bhi.n	80054ec <_scanf_float+0x120>
 8005422:	2b40      	cmp	r3, #64	; 0x40
 8005424:	d83c      	bhi.n	80054a0 <_scanf_float+0xd4>
 8005426:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800542a:	b2c8      	uxtb	r0, r1
 800542c:	280e      	cmp	r0, #14
 800542e:	d93a      	bls.n	80054a6 <_scanf_float+0xda>
 8005430:	f1b9 0f00 	cmp.w	r9, #0
 8005434:	d003      	beq.n	800543e <_scanf_float+0x72>
 8005436:	6823      	ldr	r3, [r4, #0]
 8005438:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800543c:	6023      	str	r3, [r4, #0]
 800543e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005442:	f1ba 0f01 	cmp.w	sl, #1
 8005446:	f200 8113 	bhi.w	8005670 <_scanf_float+0x2a4>
 800544a:	455e      	cmp	r6, fp
 800544c:	f200 8105 	bhi.w	800565a <_scanf_float+0x28e>
 8005450:	2501      	movs	r5, #1
 8005452:	4628      	mov	r0, r5
 8005454:	b007      	add	sp, #28
 8005456:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800545a:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800545e:	2a0d      	cmp	r2, #13
 8005460:	d8e6      	bhi.n	8005430 <_scanf_float+0x64>
 8005462:	a101      	add	r1, pc, #4	; (adr r1, 8005468 <_scanf_float+0x9c>)
 8005464:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8005468:	080055a7 	.word	0x080055a7
 800546c:	08005431 	.word	0x08005431
 8005470:	08005431 	.word	0x08005431
 8005474:	08005431 	.word	0x08005431
 8005478:	08005607 	.word	0x08005607
 800547c:	080055df 	.word	0x080055df
 8005480:	08005431 	.word	0x08005431
 8005484:	08005431 	.word	0x08005431
 8005488:	080055b5 	.word	0x080055b5
 800548c:	08005431 	.word	0x08005431
 8005490:	08005431 	.word	0x08005431
 8005494:	08005431 	.word	0x08005431
 8005498:	08005431 	.word	0x08005431
 800549c:	0800556d 	.word	0x0800556d
 80054a0:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 80054a4:	e7db      	b.n	800545e <_scanf_float+0x92>
 80054a6:	290e      	cmp	r1, #14
 80054a8:	d8c2      	bhi.n	8005430 <_scanf_float+0x64>
 80054aa:	a001      	add	r0, pc, #4	; (adr r0, 80054b0 <_scanf_float+0xe4>)
 80054ac:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80054b0:	0800555f 	.word	0x0800555f
 80054b4:	08005431 	.word	0x08005431
 80054b8:	0800555f 	.word	0x0800555f
 80054bc:	080055f3 	.word	0x080055f3
 80054c0:	08005431 	.word	0x08005431
 80054c4:	0800550d 	.word	0x0800550d
 80054c8:	08005549 	.word	0x08005549
 80054cc:	08005549 	.word	0x08005549
 80054d0:	08005549 	.word	0x08005549
 80054d4:	08005549 	.word	0x08005549
 80054d8:	08005549 	.word	0x08005549
 80054dc:	08005549 	.word	0x08005549
 80054e0:	08005549 	.word	0x08005549
 80054e4:	08005549 	.word	0x08005549
 80054e8:	08005549 	.word	0x08005549
 80054ec:	2b6e      	cmp	r3, #110	; 0x6e
 80054ee:	d809      	bhi.n	8005504 <_scanf_float+0x138>
 80054f0:	2b60      	cmp	r3, #96	; 0x60
 80054f2:	d8b2      	bhi.n	800545a <_scanf_float+0x8e>
 80054f4:	2b54      	cmp	r3, #84	; 0x54
 80054f6:	d077      	beq.n	80055e8 <_scanf_float+0x21c>
 80054f8:	2b59      	cmp	r3, #89	; 0x59
 80054fa:	d199      	bne.n	8005430 <_scanf_float+0x64>
 80054fc:	2d07      	cmp	r5, #7
 80054fe:	d197      	bne.n	8005430 <_scanf_float+0x64>
 8005500:	2508      	movs	r5, #8
 8005502:	e029      	b.n	8005558 <_scanf_float+0x18c>
 8005504:	2b74      	cmp	r3, #116	; 0x74
 8005506:	d06f      	beq.n	80055e8 <_scanf_float+0x21c>
 8005508:	2b79      	cmp	r3, #121	; 0x79
 800550a:	e7f6      	b.n	80054fa <_scanf_float+0x12e>
 800550c:	6821      	ldr	r1, [r4, #0]
 800550e:	05c8      	lsls	r0, r1, #23
 8005510:	d51a      	bpl.n	8005548 <_scanf_float+0x17c>
 8005512:	9b02      	ldr	r3, [sp, #8]
 8005514:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8005518:	6021      	str	r1, [r4, #0]
 800551a:	f109 0901 	add.w	r9, r9, #1
 800551e:	b11b      	cbz	r3, 8005528 <_scanf_float+0x15c>
 8005520:	3b01      	subs	r3, #1
 8005522:	3201      	adds	r2, #1
 8005524:	9302      	str	r3, [sp, #8]
 8005526:	60a2      	str	r2, [r4, #8]
 8005528:	68a3      	ldr	r3, [r4, #8]
 800552a:	3b01      	subs	r3, #1
 800552c:	60a3      	str	r3, [r4, #8]
 800552e:	6923      	ldr	r3, [r4, #16]
 8005530:	3301      	adds	r3, #1
 8005532:	6123      	str	r3, [r4, #16]
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	3b01      	subs	r3, #1
 8005538:	2b00      	cmp	r3, #0
 800553a:	607b      	str	r3, [r7, #4]
 800553c:	f340 8084 	ble.w	8005648 <_scanf_float+0x27c>
 8005540:	683b      	ldr	r3, [r7, #0]
 8005542:	3301      	adds	r3, #1
 8005544:	603b      	str	r3, [r7, #0]
 8005546:	e766      	b.n	8005416 <_scanf_float+0x4a>
 8005548:	eb1a 0f05 	cmn.w	sl, r5
 800554c:	f47f af70 	bne.w	8005430 <_scanf_float+0x64>
 8005550:	6822      	ldr	r2, [r4, #0]
 8005552:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8005556:	6022      	str	r2, [r4, #0]
 8005558:	f806 3b01 	strb.w	r3, [r6], #1
 800555c:	e7e4      	b.n	8005528 <_scanf_float+0x15c>
 800555e:	6822      	ldr	r2, [r4, #0]
 8005560:	0610      	lsls	r0, r2, #24
 8005562:	f57f af65 	bpl.w	8005430 <_scanf_float+0x64>
 8005566:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800556a:	e7f4      	b.n	8005556 <_scanf_float+0x18a>
 800556c:	f1ba 0f00 	cmp.w	sl, #0
 8005570:	d10e      	bne.n	8005590 <_scanf_float+0x1c4>
 8005572:	f1b9 0f00 	cmp.w	r9, #0
 8005576:	d10e      	bne.n	8005596 <_scanf_float+0x1ca>
 8005578:	6822      	ldr	r2, [r4, #0]
 800557a:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800557e:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8005582:	d108      	bne.n	8005596 <_scanf_float+0x1ca>
 8005584:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8005588:	f04f 0a01 	mov.w	sl, #1
 800558c:	6022      	str	r2, [r4, #0]
 800558e:	e7e3      	b.n	8005558 <_scanf_float+0x18c>
 8005590:	f1ba 0f02 	cmp.w	sl, #2
 8005594:	d055      	beq.n	8005642 <_scanf_float+0x276>
 8005596:	2d01      	cmp	r5, #1
 8005598:	d002      	beq.n	80055a0 <_scanf_float+0x1d4>
 800559a:	2d04      	cmp	r5, #4
 800559c:	f47f af48 	bne.w	8005430 <_scanf_float+0x64>
 80055a0:	3501      	adds	r5, #1
 80055a2:	b2ed      	uxtb	r5, r5
 80055a4:	e7d8      	b.n	8005558 <_scanf_float+0x18c>
 80055a6:	f1ba 0f01 	cmp.w	sl, #1
 80055aa:	f47f af41 	bne.w	8005430 <_scanf_float+0x64>
 80055ae:	f04f 0a02 	mov.w	sl, #2
 80055b2:	e7d1      	b.n	8005558 <_scanf_float+0x18c>
 80055b4:	b97d      	cbnz	r5, 80055d6 <_scanf_float+0x20a>
 80055b6:	f1b9 0f00 	cmp.w	r9, #0
 80055ba:	f47f af3c 	bne.w	8005436 <_scanf_float+0x6a>
 80055be:	6822      	ldr	r2, [r4, #0]
 80055c0:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80055c4:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80055c8:	f47f af39 	bne.w	800543e <_scanf_float+0x72>
 80055cc:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80055d0:	2501      	movs	r5, #1
 80055d2:	6022      	str	r2, [r4, #0]
 80055d4:	e7c0      	b.n	8005558 <_scanf_float+0x18c>
 80055d6:	2d03      	cmp	r5, #3
 80055d8:	d0e2      	beq.n	80055a0 <_scanf_float+0x1d4>
 80055da:	2d05      	cmp	r5, #5
 80055dc:	e7de      	b.n	800559c <_scanf_float+0x1d0>
 80055de:	2d02      	cmp	r5, #2
 80055e0:	f47f af26 	bne.w	8005430 <_scanf_float+0x64>
 80055e4:	2503      	movs	r5, #3
 80055e6:	e7b7      	b.n	8005558 <_scanf_float+0x18c>
 80055e8:	2d06      	cmp	r5, #6
 80055ea:	f47f af21 	bne.w	8005430 <_scanf_float+0x64>
 80055ee:	2507      	movs	r5, #7
 80055f0:	e7b2      	b.n	8005558 <_scanf_float+0x18c>
 80055f2:	6822      	ldr	r2, [r4, #0]
 80055f4:	0591      	lsls	r1, r2, #22
 80055f6:	f57f af1b 	bpl.w	8005430 <_scanf_float+0x64>
 80055fa:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 80055fe:	6022      	str	r2, [r4, #0]
 8005600:	f8cd 9004 	str.w	r9, [sp, #4]
 8005604:	e7a8      	b.n	8005558 <_scanf_float+0x18c>
 8005606:	6822      	ldr	r2, [r4, #0]
 8005608:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800560c:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8005610:	d006      	beq.n	8005620 <_scanf_float+0x254>
 8005612:	0550      	lsls	r0, r2, #21
 8005614:	f57f af0c 	bpl.w	8005430 <_scanf_float+0x64>
 8005618:	f1b9 0f00 	cmp.w	r9, #0
 800561c:	f43f af0f 	beq.w	800543e <_scanf_float+0x72>
 8005620:	0591      	lsls	r1, r2, #22
 8005622:	bf58      	it	pl
 8005624:	9901      	ldrpl	r1, [sp, #4]
 8005626:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800562a:	bf58      	it	pl
 800562c:	eba9 0101 	subpl.w	r1, r9, r1
 8005630:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8005634:	f04f 0900 	mov.w	r9, #0
 8005638:	bf58      	it	pl
 800563a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800563e:	6022      	str	r2, [r4, #0]
 8005640:	e78a      	b.n	8005558 <_scanf_float+0x18c>
 8005642:	f04f 0a03 	mov.w	sl, #3
 8005646:	e787      	b.n	8005558 <_scanf_float+0x18c>
 8005648:	4639      	mov	r1, r7
 800564a:	4640      	mov	r0, r8
 800564c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8005650:	4798      	blx	r3
 8005652:	2800      	cmp	r0, #0
 8005654:	f43f aedf 	beq.w	8005416 <_scanf_float+0x4a>
 8005658:	e6ea      	b.n	8005430 <_scanf_float+0x64>
 800565a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800565e:	463a      	mov	r2, r7
 8005660:	4640      	mov	r0, r8
 8005662:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005666:	4798      	blx	r3
 8005668:	6923      	ldr	r3, [r4, #16]
 800566a:	3b01      	subs	r3, #1
 800566c:	6123      	str	r3, [r4, #16]
 800566e:	e6ec      	b.n	800544a <_scanf_float+0x7e>
 8005670:	1e6b      	subs	r3, r5, #1
 8005672:	2b06      	cmp	r3, #6
 8005674:	d825      	bhi.n	80056c2 <_scanf_float+0x2f6>
 8005676:	2d02      	cmp	r5, #2
 8005678:	d836      	bhi.n	80056e8 <_scanf_float+0x31c>
 800567a:	455e      	cmp	r6, fp
 800567c:	f67f aee8 	bls.w	8005450 <_scanf_float+0x84>
 8005680:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005684:	463a      	mov	r2, r7
 8005686:	4640      	mov	r0, r8
 8005688:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800568c:	4798      	blx	r3
 800568e:	6923      	ldr	r3, [r4, #16]
 8005690:	3b01      	subs	r3, #1
 8005692:	6123      	str	r3, [r4, #16]
 8005694:	e7f1      	b.n	800567a <_scanf_float+0x2ae>
 8005696:	9802      	ldr	r0, [sp, #8]
 8005698:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800569c:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 80056a0:	463a      	mov	r2, r7
 80056a2:	9002      	str	r0, [sp, #8]
 80056a4:	4640      	mov	r0, r8
 80056a6:	4798      	blx	r3
 80056a8:	6923      	ldr	r3, [r4, #16]
 80056aa:	3b01      	subs	r3, #1
 80056ac:	6123      	str	r3, [r4, #16]
 80056ae:	f10a 3aff 	add.w	sl, sl, #4294967295
 80056b2:	fa5f fa8a 	uxtb.w	sl, sl
 80056b6:	f1ba 0f02 	cmp.w	sl, #2
 80056ba:	d1ec      	bne.n	8005696 <_scanf_float+0x2ca>
 80056bc:	3d03      	subs	r5, #3
 80056be:	b2ed      	uxtb	r5, r5
 80056c0:	1b76      	subs	r6, r6, r5
 80056c2:	6823      	ldr	r3, [r4, #0]
 80056c4:	05da      	lsls	r2, r3, #23
 80056c6:	d52f      	bpl.n	8005728 <_scanf_float+0x35c>
 80056c8:	055b      	lsls	r3, r3, #21
 80056ca:	d510      	bpl.n	80056ee <_scanf_float+0x322>
 80056cc:	455e      	cmp	r6, fp
 80056ce:	f67f aebf 	bls.w	8005450 <_scanf_float+0x84>
 80056d2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80056d6:	463a      	mov	r2, r7
 80056d8:	4640      	mov	r0, r8
 80056da:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80056de:	4798      	blx	r3
 80056e0:	6923      	ldr	r3, [r4, #16]
 80056e2:	3b01      	subs	r3, #1
 80056e4:	6123      	str	r3, [r4, #16]
 80056e6:	e7f1      	b.n	80056cc <_scanf_float+0x300>
 80056e8:	46aa      	mov	sl, r5
 80056ea:	9602      	str	r6, [sp, #8]
 80056ec:	e7df      	b.n	80056ae <_scanf_float+0x2e2>
 80056ee:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80056f2:	6923      	ldr	r3, [r4, #16]
 80056f4:	2965      	cmp	r1, #101	; 0x65
 80056f6:	f103 33ff 	add.w	r3, r3, #4294967295
 80056fa:	f106 35ff 	add.w	r5, r6, #4294967295
 80056fe:	6123      	str	r3, [r4, #16]
 8005700:	d00c      	beq.n	800571c <_scanf_float+0x350>
 8005702:	2945      	cmp	r1, #69	; 0x45
 8005704:	d00a      	beq.n	800571c <_scanf_float+0x350>
 8005706:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800570a:	463a      	mov	r2, r7
 800570c:	4640      	mov	r0, r8
 800570e:	4798      	blx	r3
 8005710:	6923      	ldr	r3, [r4, #16]
 8005712:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8005716:	3b01      	subs	r3, #1
 8005718:	1eb5      	subs	r5, r6, #2
 800571a:	6123      	str	r3, [r4, #16]
 800571c:	463a      	mov	r2, r7
 800571e:	4640      	mov	r0, r8
 8005720:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005724:	4798      	blx	r3
 8005726:	462e      	mov	r6, r5
 8005728:	6825      	ldr	r5, [r4, #0]
 800572a:	f015 0510 	ands.w	r5, r5, #16
 800572e:	d155      	bne.n	80057dc <_scanf_float+0x410>
 8005730:	7035      	strb	r5, [r6, #0]
 8005732:	6823      	ldr	r3, [r4, #0]
 8005734:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005738:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800573c:	d11b      	bne.n	8005776 <_scanf_float+0x3aa>
 800573e:	9b01      	ldr	r3, [sp, #4]
 8005740:	454b      	cmp	r3, r9
 8005742:	eba3 0209 	sub.w	r2, r3, r9
 8005746:	d123      	bne.n	8005790 <_scanf_float+0x3c4>
 8005748:	2200      	movs	r2, #0
 800574a:	4659      	mov	r1, fp
 800574c:	4640      	mov	r0, r8
 800574e:	f000 fefb 	bl	8006548 <_strtod_r>
 8005752:	6822      	ldr	r2, [r4, #0]
 8005754:	9b03      	ldr	r3, [sp, #12]
 8005756:	f012 0f02 	tst.w	r2, #2
 800575a:	4606      	mov	r6, r0
 800575c:	460f      	mov	r7, r1
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	d021      	beq.n	80057a6 <_scanf_float+0x3da>
 8005762:	1d1a      	adds	r2, r3, #4
 8005764:	9903      	ldr	r1, [sp, #12]
 8005766:	600a      	str	r2, [r1, #0]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	e9c3 6700 	strd	r6, r7, [r3]
 800576e:	68e3      	ldr	r3, [r4, #12]
 8005770:	3301      	adds	r3, #1
 8005772:	60e3      	str	r3, [r4, #12]
 8005774:	e66d      	b.n	8005452 <_scanf_float+0x86>
 8005776:	9b04      	ldr	r3, [sp, #16]
 8005778:	2b00      	cmp	r3, #0
 800577a:	d0e5      	beq.n	8005748 <_scanf_float+0x37c>
 800577c:	9905      	ldr	r1, [sp, #20]
 800577e:	230a      	movs	r3, #10
 8005780:	462a      	mov	r2, r5
 8005782:	4640      	mov	r0, r8
 8005784:	3101      	adds	r1, #1
 8005786:	f000 ff61 	bl	800664c <_strtol_r>
 800578a:	9b04      	ldr	r3, [sp, #16]
 800578c:	9e05      	ldr	r6, [sp, #20]
 800578e:	1ac2      	subs	r2, r0, r3
 8005790:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8005794:	429e      	cmp	r6, r3
 8005796:	bf28      	it	cs
 8005798:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800579c:	4630      	mov	r0, r6
 800579e:	4910      	ldr	r1, [pc, #64]	; (80057e0 <_scanf_float+0x414>)
 80057a0:	f000 f826 	bl	80057f0 <siprintf>
 80057a4:	e7d0      	b.n	8005748 <_scanf_float+0x37c>
 80057a6:	f012 0f04 	tst.w	r2, #4
 80057aa:	f103 0204 	add.w	r2, r3, #4
 80057ae:	d1d9      	bne.n	8005764 <_scanf_float+0x398>
 80057b0:	f8dd c00c 	ldr.w	ip, [sp, #12]
 80057b4:	f8cc 2000 	str.w	r2, [ip]
 80057b8:	f8d3 8000 	ldr.w	r8, [r3]
 80057bc:	4602      	mov	r2, r0
 80057be:	460b      	mov	r3, r1
 80057c0:	f7fb f924 	bl	8000a0c <__aeabi_dcmpun>
 80057c4:	b128      	cbz	r0, 80057d2 <_scanf_float+0x406>
 80057c6:	4807      	ldr	r0, [pc, #28]	; (80057e4 <_scanf_float+0x418>)
 80057c8:	f000 f80e 	bl	80057e8 <nanf>
 80057cc:	f8c8 0000 	str.w	r0, [r8]
 80057d0:	e7cd      	b.n	800576e <_scanf_float+0x3a2>
 80057d2:	4630      	mov	r0, r6
 80057d4:	4639      	mov	r1, r7
 80057d6:	f7fb f977 	bl	8000ac8 <__aeabi_d2f>
 80057da:	e7f7      	b.n	80057cc <_scanf_float+0x400>
 80057dc:	2500      	movs	r5, #0
 80057de:	e638      	b.n	8005452 <_scanf_float+0x86>
 80057e0:	08009d4a 	.word	0x08009d4a
 80057e4:	0800a16b 	.word	0x0800a16b

080057e8 <nanf>:
 80057e8:	4800      	ldr	r0, [pc, #0]	; (80057ec <nanf+0x4>)
 80057ea:	4770      	bx	lr
 80057ec:	7fc00000 	.word	0x7fc00000

080057f0 <siprintf>:
 80057f0:	b40e      	push	{r1, r2, r3}
 80057f2:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80057f6:	b500      	push	{lr}
 80057f8:	b09c      	sub	sp, #112	; 0x70
 80057fa:	ab1d      	add	r3, sp, #116	; 0x74
 80057fc:	9002      	str	r0, [sp, #8]
 80057fe:	9006      	str	r0, [sp, #24]
 8005800:	9107      	str	r1, [sp, #28]
 8005802:	9104      	str	r1, [sp, #16]
 8005804:	4808      	ldr	r0, [pc, #32]	; (8005828 <siprintf+0x38>)
 8005806:	4909      	ldr	r1, [pc, #36]	; (800582c <siprintf+0x3c>)
 8005808:	f853 2b04 	ldr.w	r2, [r3], #4
 800580c:	9105      	str	r1, [sp, #20]
 800580e:	6800      	ldr	r0, [r0, #0]
 8005810:	a902      	add	r1, sp, #8
 8005812:	9301      	str	r3, [sp, #4]
 8005814:	f002 ff70 	bl	80086f8 <_svfiprintf_r>
 8005818:	2200      	movs	r2, #0
 800581a:	9b02      	ldr	r3, [sp, #8]
 800581c:	701a      	strb	r2, [r3, #0]
 800581e:	b01c      	add	sp, #112	; 0x70
 8005820:	f85d eb04 	ldr.w	lr, [sp], #4
 8005824:	b003      	add	sp, #12
 8005826:	4770      	bx	lr
 8005828:	2000017c 	.word	0x2000017c
 800582c:	ffff0208 	.word	0xffff0208

08005830 <siscanf>:
 8005830:	b40e      	push	{r1, r2, r3}
 8005832:	f44f 7201 	mov.w	r2, #516	; 0x204
 8005836:	b530      	push	{r4, r5, lr}
 8005838:	b09c      	sub	sp, #112	; 0x70
 800583a:	ac1f      	add	r4, sp, #124	; 0x7c
 800583c:	f854 5b04 	ldr.w	r5, [r4], #4
 8005840:	f8ad 2014 	strh.w	r2, [sp, #20]
 8005844:	9002      	str	r0, [sp, #8]
 8005846:	9006      	str	r0, [sp, #24]
 8005848:	f7fa fc82 	bl	8000150 <strlen>
 800584c:	4b0b      	ldr	r3, [pc, #44]	; (800587c <siscanf+0x4c>)
 800584e:	9003      	str	r0, [sp, #12]
 8005850:	930b      	str	r3, [sp, #44]	; 0x2c
 8005852:	2300      	movs	r3, #0
 8005854:	930f      	str	r3, [sp, #60]	; 0x3c
 8005856:	9314      	str	r3, [sp, #80]	; 0x50
 8005858:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800585c:	9007      	str	r0, [sp, #28]
 800585e:	4808      	ldr	r0, [pc, #32]	; (8005880 <siscanf+0x50>)
 8005860:	f8ad 3016 	strh.w	r3, [sp, #22]
 8005864:	462a      	mov	r2, r5
 8005866:	4623      	mov	r3, r4
 8005868:	a902      	add	r1, sp, #8
 800586a:	6800      	ldr	r0, [r0, #0]
 800586c:	9401      	str	r4, [sp, #4]
 800586e:	f003 f89d 	bl	80089ac <__ssvfiscanf_r>
 8005872:	b01c      	add	sp, #112	; 0x70
 8005874:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005878:	b003      	add	sp, #12
 800587a:	4770      	bx	lr
 800587c:	080058a7 	.word	0x080058a7
 8005880:	2000017c 	.word	0x2000017c

08005884 <__sread>:
 8005884:	b510      	push	{r4, lr}
 8005886:	460c      	mov	r4, r1
 8005888:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800588c:	f003 fb5a 	bl	8008f44 <_read_r>
 8005890:	2800      	cmp	r0, #0
 8005892:	bfab      	itete	ge
 8005894:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005896:	89a3      	ldrhlt	r3, [r4, #12]
 8005898:	181b      	addge	r3, r3, r0
 800589a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800589e:	bfac      	ite	ge
 80058a0:	6563      	strge	r3, [r4, #84]	; 0x54
 80058a2:	81a3      	strhlt	r3, [r4, #12]
 80058a4:	bd10      	pop	{r4, pc}

080058a6 <__seofread>:
 80058a6:	2000      	movs	r0, #0
 80058a8:	4770      	bx	lr

080058aa <__swrite>:
 80058aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80058ae:	461f      	mov	r7, r3
 80058b0:	898b      	ldrh	r3, [r1, #12]
 80058b2:	4605      	mov	r5, r0
 80058b4:	05db      	lsls	r3, r3, #23
 80058b6:	460c      	mov	r4, r1
 80058b8:	4616      	mov	r6, r2
 80058ba:	d505      	bpl.n	80058c8 <__swrite+0x1e>
 80058bc:	2302      	movs	r3, #2
 80058be:	2200      	movs	r2, #0
 80058c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80058c4:	f002 f8cc 	bl	8007a60 <_lseek_r>
 80058c8:	89a3      	ldrh	r3, [r4, #12]
 80058ca:	4632      	mov	r2, r6
 80058cc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80058d0:	81a3      	strh	r3, [r4, #12]
 80058d2:	4628      	mov	r0, r5
 80058d4:	463b      	mov	r3, r7
 80058d6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80058da:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80058de:	f000 beb7 	b.w	8006650 <_write_r>

080058e2 <__sseek>:
 80058e2:	b510      	push	{r4, lr}
 80058e4:	460c      	mov	r4, r1
 80058e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80058ea:	f002 f8b9 	bl	8007a60 <_lseek_r>
 80058ee:	1c43      	adds	r3, r0, #1
 80058f0:	89a3      	ldrh	r3, [r4, #12]
 80058f2:	bf15      	itete	ne
 80058f4:	6560      	strne	r0, [r4, #84]	; 0x54
 80058f6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80058fa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80058fe:	81a3      	strheq	r3, [r4, #12]
 8005900:	bf18      	it	ne
 8005902:	81a3      	strhne	r3, [r4, #12]
 8005904:	bd10      	pop	{r4, pc}

08005906 <__sclose>:
 8005906:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800590a:	f000 beb3 	b.w	8006674 <_close_r>

0800590e <strncmp>:
 800590e:	4603      	mov	r3, r0
 8005910:	b510      	push	{r4, lr}
 8005912:	b172      	cbz	r2, 8005932 <strncmp+0x24>
 8005914:	3901      	subs	r1, #1
 8005916:	1884      	adds	r4, r0, r2
 8005918:	f813 0b01 	ldrb.w	r0, [r3], #1
 800591c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8005920:	4290      	cmp	r0, r2
 8005922:	d101      	bne.n	8005928 <strncmp+0x1a>
 8005924:	42a3      	cmp	r3, r4
 8005926:	d101      	bne.n	800592c <strncmp+0x1e>
 8005928:	1a80      	subs	r0, r0, r2
 800592a:	bd10      	pop	{r4, pc}
 800592c:	2800      	cmp	r0, #0
 800592e:	d1f3      	bne.n	8005918 <strncmp+0xa>
 8005930:	e7fa      	b.n	8005928 <strncmp+0x1a>
 8005932:	4610      	mov	r0, r2
 8005934:	e7f9      	b.n	800592a <strncmp+0x1c>

08005936 <sulp>:
 8005936:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800593a:	460f      	mov	r7, r1
 800593c:	4690      	mov	r8, r2
 800593e:	f002 fc47 	bl	80081d0 <__ulp>
 8005942:	4604      	mov	r4, r0
 8005944:	460d      	mov	r5, r1
 8005946:	f1b8 0f00 	cmp.w	r8, #0
 800594a:	d011      	beq.n	8005970 <sulp+0x3a>
 800594c:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8005950:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8005954:	2b00      	cmp	r3, #0
 8005956:	dd0b      	ble.n	8005970 <sulp+0x3a>
 8005958:	2400      	movs	r4, #0
 800595a:	051b      	lsls	r3, r3, #20
 800595c:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8005960:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8005964:	4622      	mov	r2, r4
 8005966:	462b      	mov	r3, r5
 8005968:	f7fa fdb6 	bl	80004d8 <__aeabi_dmul>
 800596c:	4604      	mov	r4, r0
 800596e:	460d      	mov	r5, r1
 8005970:	4620      	mov	r0, r4
 8005972:	4629      	mov	r1, r5
 8005974:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08005978 <_strtod_l>:
 8005978:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800597c:	469b      	mov	fp, r3
 800597e:	2300      	movs	r3, #0
 8005980:	b09f      	sub	sp, #124	; 0x7c
 8005982:	931a      	str	r3, [sp, #104]	; 0x68
 8005984:	4b9e      	ldr	r3, [pc, #632]	; (8005c00 <_strtod_l+0x288>)
 8005986:	4682      	mov	sl, r0
 8005988:	681f      	ldr	r7, [r3, #0]
 800598a:	460e      	mov	r6, r1
 800598c:	4638      	mov	r0, r7
 800598e:	9215      	str	r2, [sp, #84]	; 0x54
 8005990:	f7fa fbde 	bl	8000150 <strlen>
 8005994:	f04f 0800 	mov.w	r8, #0
 8005998:	4604      	mov	r4, r0
 800599a:	f04f 0900 	mov.w	r9, #0
 800599e:	9619      	str	r6, [sp, #100]	; 0x64
 80059a0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80059a2:	781a      	ldrb	r2, [r3, #0]
 80059a4:	2a2b      	cmp	r2, #43	; 0x2b
 80059a6:	d04c      	beq.n	8005a42 <_strtod_l+0xca>
 80059a8:	d83a      	bhi.n	8005a20 <_strtod_l+0xa8>
 80059aa:	2a0d      	cmp	r2, #13
 80059ac:	d833      	bhi.n	8005a16 <_strtod_l+0x9e>
 80059ae:	2a08      	cmp	r2, #8
 80059b0:	d833      	bhi.n	8005a1a <_strtod_l+0xa2>
 80059b2:	2a00      	cmp	r2, #0
 80059b4:	d03d      	beq.n	8005a32 <_strtod_l+0xba>
 80059b6:	2300      	movs	r3, #0
 80059b8:	930a      	str	r3, [sp, #40]	; 0x28
 80059ba:	9d19      	ldr	r5, [sp, #100]	; 0x64
 80059bc:	782b      	ldrb	r3, [r5, #0]
 80059be:	2b30      	cmp	r3, #48	; 0x30
 80059c0:	f040 80aa 	bne.w	8005b18 <_strtod_l+0x1a0>
 80059c4:	786b      	ldrb	r3, [r5, #1]
 80059c6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80059ca:	2b58      	cmp	r3, #88	; 0x58
 80059cc:	d166      	bne.n	8005a9c <_strtod_l+0x124>
 80059ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80059d0:	4650      	mov	r0, sl
 80059d2:	9301      	str	r3, [sp, #4]
 80059d4:	ab1a      	add	r3, sp, #104	; 0x68
 80059d6:	9300      	str	r3, [sp, #0]
 80059d8:	4a8a      	ldr	r2, [pc, #552]	; (8005c04 <_strtod_l+0x28c>)
 80059da:	f8cd b008 	str.w	fp, [sp, #8]
 80059de:	ab1b      	add	r3, sp, #108	; 0x6c
 80059e0:	a919      	add	r1, sp, #100	; 0x64
 80059e2:	f001 fd3b 	bl	800745c <__gethex>
 80059e6:	f010 0607 	ands.w	r6, r0, #7
 80059ea:	4604      	mov	r4, r0
 80059ec:	d005      	beq.n	80059fa <_strtod_l+0x82>
 80059ee:	2e06      	cmp	r6, #6
 80059f0:	d129      	bne.n	8005a46 <_strtod_l+0xce>
 80059f2:	2300      	movs	r3, #0
 80059f4:	3501      	adds	r5, #1
 80059f6:	9519      	str	r5, [sp, #100]	; 0x64
 80059f8:	930a      	str	r3, [sp, #40]	; 0x28
 80059fa:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	f040 858a 	bne.w	8006516 <_strtod_l+0xb9e>
 8005a02:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005a04:	b1d3      	cbz	r3, 8005a3c <_strtod_l+0xc4>
 8005a06:	4642      	mov	r2, r8
 8005a08:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8005a0c:	4610      	mov	r0, r2
 8005a0e:	4619      	mov	r1, r3
 8005a10:	b01f      	add	sp, #124	; 0x7c
 8005a12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a16:	2a20      	cmp	r2, #32
 8005a18:	d1cd      	bne.n	80059b6 <_strtod_l+0x3e>
 8005a1a:	3301      	adds	r3, #1
 8005a1c:	9319      	str	r3, [sp, #100]	; 0x64
 8005a1e:	e7bf      	b.n	80059a0 <_strtod_l+0x28>
 8005a20:	2a2d      	cmp	r2, #45	; 0x2d
 8005a22:	d1c8      	bne.n	80059b6 <_strtod_l+0x3e>
 8005a24:	2201      	movs	r2, #1
 8005a26:	920a      	str	r2, [sp, #40]	; 0x28
 8005a28:	1c5a      	adds	r2, r3, #1
 8005a2a:	9219      	str	r2, [sp, #100]	; 0x64
 8005a2c:	785b      	ldrb	r3, [r3, #1]
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d1c3      	bne.n	80059ba <_strtod_l+0x42>
 8005a32:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005a34:	9619      	str	r6, [sp, #100]	; 0x64
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	f040 856b 	bne.w	8006512 <_strtod_l+0xb9a>
 8005a3c:	4642      	mov	r2, r8
 8005a3e:	464b      	mov	r3, r9
 8005a40:	e7e4      	b.n	8005a0c <_strtod_l+0x94>
 8005a42:	2200      	movs	r2, #0
 8005a44:	e7ef      	b.n	8005a26 <_strtod_l+0xae>
 8005a46:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8005a48:	b13a      	cbz	r2, 8005a5a <_strtod_l+0xe2>
 8005a4a:	2135      	movs	r1, #53	; 0x35
 8005a4c:	a81c      	add	r0, sp, #112	; 0x70
 8005a4e:	f002 fcc3 	bl	80083d8 <__copybits>
 8005a52:	4650      	mov	r0, sl
 8005a54:	991a      	ldr	r1, [sp, #104]	; 0x68
 8005a56:	f002 f88b 	bl	8007b70 <_Bfree>
 8005a5a:	3e01      	subs	r6, #1
 8005a5c:	2e04      	cmp	r6, #4
 8005a5e:	d806      	bhi.n	8005a6e <_strtod_l+0xf6>
 8005a60:	e8df f006 	tbb	[pc, r6]
 8005a64:	1714030a 	.word	0x1714030a
 8005a68:	0a          	.byte	0x0a
 8005a69:	00          	.byte	0x00
 8005a6a:	e9dd 891c 	ldrd	r8, r9, [sp, #112]	; 0x70
 8005a6e:	0721      	lsls	r1, r4, #28
 8005a70:	d5c3      	bpl.n	80059fa <_strtod_l+0x82>
 8005a72:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 8005a76:	e7c0      	b.n	80059fa <_strtod_l+0x82>
 8005a78:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8005a7a:	e9dd 831c 	ldrd	r8, r3, [sp, #112]	; 0x70
 8005a7e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8005a82:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8005a86:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8005a8a:	e7f0      	b.n	8005a6e <_strtod_l+0xf6>
 8005a8c:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8005c08 <_strtod_l+0x290>
 8005a90:	e7ed      	b.n	8005a6e <_strtod_l+0xf6>
 8005a92:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8005a96:	f04f 38ff 	mov.w	r8, #4294967295
 8005a9a:	e7e8      	b.n	8005a6e <_strtod_l+0xf6>
 8005a9c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005a9e:	1c5a      	adds	r2, r3, #1
 8005aa0:	9219      	str	r2, [sp, #100]	; 0x64
 8005aa2:	785b      	ldrb	r3, [r3, #1]
 8005aa4:	2b30      	cmp	r3, #48	; 0x30
 8005aa6:	d0f9      	beq.n	8005a9c <_strtod_l+0x124>
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d0a6      	beq.n	80059fa <_strtod_l+0x82>
 8005aac:	2301      	movs	r3, #1
 8005aae:	9307      	str	r3, [sp, #28]
 8005ab0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005ab2:	220a      	movs	r2, #10
 8005ab4:	9308      	str	r3, [sp, #32]
 8005ab6:	2300      	movs	r3, #0
 8005ab8:	469b      	mov	fp, r3
 8005aba:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8005abe:	9819      	ldr	r0, [sp, #100]	; 0x64
 8005ac0:	7805      	ldrb	r5, [r0, #0]
 8005ac2:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 8005ac6:	b2d9      	uxtb	r1, r3
 8005ac8:	2909      	cmp	r1, #9
 8005aca:	d927      	bls.n	8005b1c <_strtod_l+0x1a4>
 8005acc:	4622      	mov	r2, r4
 8005ace:	4639      	mov	r1, r7
 8005ad0:	f7ff ff1d 	bl	800590e <strncmp>
 8005ad4:	2800      	cmp	r0, #0
 8005ad6:	d033      	beq.n	8005b40 <_strtod_l+0x1c8>
 8005ad8:	2000      	movs	r0, #0
 8005ada:	462a      	mov	r2, r5
 8005adc:	465c      	mov	r4, fp
 8005ade:	4603      	mov	r3, r0
 8005ae0:	9004      	str	r0, [sp, #16]
 8005ae2:	2a65      	cmp	r2, #101	; 0x65
 8005ae4:	d001      	beq.n	8005aea <_strtod_l+0x172>
 8005ae6:	2a45      	cmp	r2, #69	; 0x45
 8005ae8:	d114      	bne.n	8005b14 <_strtod_l+0x19c>
 8005aea:	b91c      	cbnz	r4, 8005af4 <_strtod_l+0x17c>
 8005aec:	9a07      	ldr	r2, [sp, #28]
 8005aee:	4302      	orrs	r2, r0
 8005af0:	d09f      	beq.n	8005a32 <_strtod_l+0xba>
 8005af2:	2400      	movs	r4, #0
 8005af4:	9e19      	ldr	r6, [sp, #100]	; 0x64
 8005af6:	1c72      	adds	r2, r6, #1
 8005af8:	9219      	str	r2, [sp, #100]	; 0x64
 8005afa:	7872      	ldrb	r2, [r6, #1]
 8005afc:	2a2b      	cmp	r2, #43	; 0x2b
 8005afe:	d079      	beq.n	8005bf4 <_strtod_l+0x27c>
 8005b00:	2a2d      	cmp	r2, #45	; 0x2d
 8005b02:	f000 8083 	beq.w	8005c0c <_strtod_l+0x294>
 8005b06:	2700      	movs	r7, #0
 8005b08:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8005b0c:	2909      	cmp	r1, #9
 8005b0e:	f240 8083 	bls.w	8005c18 <_strtod_l+0x2a0>
 8005b12:	9619      	str	r6, [sp, #100]	; 0x64
 8005b14:	2500      	movs	r5, #0
 8005b16:	e09f      	b.n	8005c58 <_strtod_l+0x2e0>
 8005b18:	2300      	movs	r3, #0
 8005b1a:	e7c8      	b.n	8005aae <_strtod_l+0x136>
 8005b1c:	f1bb 0f08 	cmp.w	fp, #8
 8005b20:	bfd5      	itete	le
 8005b22:	9906      	ldrle	r1, [sp, #24]
 8005b24:	9905      	ldrgt	r1, [sp, #20]
 8005b26:	fb02 3301 	mlale	r3, r2, r1, r3
 8005b2a:	fb02 3301 	mlagt	r3, r2, r1, r3
 8005b2e:	f100 0001 	add.w	r0, r0, #1
 8005b32:	bfd4      	ite	le
 8005b34:	9306      	strle	r3, [sp, #24]
 8005b36:	9305      	strgt	r3, [sp, #20]
 8005b38:	f10b 0b01 	add.w	fp, fp, #1
 8005b3c:	9019      	str	r0, [sp, #100]	; 0x64
 8005b3e:	e7be      	b.n	8005abe <_strtod_l+0x146>
 8005b40:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005b42:	191a      	adds	r2, r3, r4
 8005b44:	9219      	str	r2, [sp, #100]	; 0x64
 8005b46:	5d1a      	ldrb	r2, [r3, r4]
 8005b48:	f1bb 0f00 	cmp.w	fp, #0
 8005b4c:	d036      	beq.n	8005bbc <_strtod_l+0x244>
 8005b4e:	465c      	mov	r4, fp
 8005b50:	9004      	str	r0, [sp, #16]
 8005b52:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8005b56:	2b09      	cmp	r3, #9
 8005b58:	d912      	bls.n	8005b80 <_strtod_l+0x208>
 8005b5a:	2301      	movs	r3, #1
 8005b5c:	e7c1      	b.n	8005ae2 <_strtod_l+0x16a>
 8005b5e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005b60:	3001      	adds	r0, #1
 8005b62:	1c5a      	adds	r2, r3, #1
 8005b64:	9219      	str	r2, [sp, #100]	; 0x64
 8005b66:	785a      	ldrb	r2, [r3, #1]
 8005b68:	2a30      	cmp	r2, #48	; 0x30
 8005b6a:	d0f8      	beq.n	8005b5e <_strtod_l+0x1e6>
 8005b6c:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8005b70:	2b08      	cmp	r3, #8
 8005b72:	f200 84d5 	bhi.w	8006520 <_strtod_l+0xba8>
 8005b76:	9004      	str	r0, [sp, #16]
 8005b78:	2000      	movs	r0, #0
 8005b7a:	4604      	mov	r4, r0
 8005b7c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005b7e:	9308      	str	r3, [sp, #32]
 8005b80:	3a30      	subs	r2, #48	; 0x30
 8005b82:	f100 0301 	add.w	r3, r0, #1
 8005b86:	d013      	beq.n	8005bb0 <_strtod_l+0x238>
 8005b88:	9904      	ldr	r1, [sp, #16]
 8005b8a:	1905      	adds	r5, r0, r4
 8005b8c:	4419      	add	r1, r3
 8005b8e:	9104      	str	r1, [sp, #16]
 8005b90:	4623      	mov	r3, r4
 8005b92:	210a      	movs	r1, #10
 8005b94:	42ab      	cmp	r3, r5
 8005b96:	d113      	bne.n	8005bc0 <_strtod_l+0x248>
 8005b98:	1823      	adds	r3, r4, r0
 8005b9a:	2b08      	cmp	r3, #8
 8005b9c:	f104 0401 	add.w	r4, r4, #1
 8005ba0:	4404      	add	r4, r0
 8005ba2:	dc1b      	bgt.n	8005bdc <_strtod_l+0x264>
 8005ba4:	230a      	movs	r3, #10
 8005ba6:	9906      	ldr	r1, [sp, #24]
 8005ba8:	fb03 2301 	mla	r3, r3, r1, r2
 8005bac:	9306      	str	r3, [sp, #24]
 8005bae:	2300      	movs	r3, #0
 8005bb0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8005bb2:	4618      	mov	r0, r3
 8005bb4:	1c51      	adds	r1, r2, #1
 8005bb6:	9119      	str	r1, [sp, #100]	; 0x64
 8005bb8:	7852      	ldrb	r2, [r2, #1]
 8005bba:	e7ca      	b.n	8005b52 <_strtod_l+0x1da>
 8005bbc:	4658      	mov	r0, fp
 8005bbe:	e7d3      	b.n	8005b68 <_strtod_l+0x1f0>
 8005bc0:	2b08      	cmp	r3, #8
 8005bc2:	dc04      	bgt.n	8005bce <_strtod_l+0x256>
 8005bc4:	9f06      	ldr	r7, [sp, #24]
 8005bc6:	434f      	muls	r7, r1
 8005bc8:	9706      	str	r7, [sp, #24]
 8005bca:	3301      	adds	r3, #1
 8005bcc:	e7e2      	b.n	8005b94 <_strtod_l+0x21c>
 8005bce:	1c5f      	adds	r7, r3, #1
 8005bd0:	2f10      	cmp	r7, #16
 8005bd2:	bfde      	ittt	le
 8005bd4:	9f05      	ldrle	r7, [sp, #20]
 8005bd6:	434f      	mulle	r7, r1
 8005bd8:	9705      	strle	r7, [sp, #20]
 8005bda:	e7f6      	b.n	8005bca <_strtod_l+0x252>
 8005bdc:	2c10      	cmp	r4, #16
 8005bde:	bfdf      	itttt	le
 8005be0:	230a      	movle	r3, #10
 8005be2:	9905      	ldrle	r1, [sp, #20]
 8005be4:	fb03 2301 	mlale	r3, r3, r1, r2
 8005be8:	9305      	strle	r3, [sp, #20]
 8005bea:	e7e0      	b.n	8005bae <_strtod_l+0x236>
 8005bec:	2300      	movs	r3, #0
 8005bee:	9304      	str	r3, [sp, #16]
 8005bf0:	2301      	movs	r3, #1
 8005bf2:	e77b      	b.n	8005aec <_strtod_l+0x174>
 8005bf4:	2700      	movs	r7, #0
 8005bf6:	1cb2      	adds	r2, r6, #2
 8005bf8:	9219      	str	r2, [sp, #100]	; 0x64
 8005bfa:	78b2      	ldrb	r2, [r6, #2]
 8005bfc:	e784      	b.n	8005b08 <_strtod_l+0x190>
 8005bfe:	bf00      	nop
 8005c00:	08009f98 	.word	0x08009f98
 8005c04:	08009d50 	.word	0x08009d50
 8005c08:	7ff00000 	.word	0x7ff00000
 8005c0c:	2701      	movs	r7, #1
 8005c0e:	e7f2      	b.n	8005bf6 <_strtod_l+0x27e>
 8005c10:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8005c12:	1c51      	adds	r1, r2, #1
 8005c14:	9119      	str	r1, [sp, #100]	; 0x64
 8005c16:	7852      	ldrb	r2, [r2, #1]
 8005c18:	2a30      	cmp	r2, #48	; 0x30
 8005c1a:	d0f9      	beq.n	8005c10 <_strtod_l+0x298>
 8005c1c:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8005c20:	2908      	cmp	r1, #8
 8005c22:	f63f af77 	bhi.w	8005b14 <_strtod_l+0x19c>
 8005c26:	f04f 0e0a 	mov.w	lr, #10
 8005c2a:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 8005c2e:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8005c30:	9209      	str	r2, [sp, #36]	; 0x24
 8005c32:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8005c34:	1c51      	adds	r1, r2, #1
 8005c36:	9119      	str	r1, [sp, #100]	; 0x64
 8005c38:	7852      	ldrb	r2, [r2, #1]
 8005c3a:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 8005c3e:	2d09      	cmp	r5, #9
 8005c40:	d935      	bls.n	8005cae <_strtod_l+0x336>
 8005c42:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8005c44:	1b49      	subs	r1, r1, r5
 8005c46:	2908      	cmp	r1, #8
 8005c48:	f644 651f 	movw	r5, #19999	; 0x4e1f
 8005c4c:	dc02      	bgt.n	8005c54 <_strtod_l+0x2dc>
 8005c4e:	4565      	cmp	r5, ip
 8005c50:	bfa8      	it	ge
 8005c52:	4665      	movge	r5, ip
 8005c54:	b107      	cbz	r7, 8005c58 <_strtod_l+0x2e0>
 8005c56:	426d      	negs	r5, r5
 8005c58:	2c00      	cmp	r4, #0
 8005c5a:	d14c      	bne.n	8005cf6 <_strtod_l+0x37e>
 8005c5c:	9907      	ldr	r1, [sp, #28]
 8005c5e:	4301      	orrs	r1, r0
 8005c60:	f47f aecb 	bne.w	80059fa <_strtod_l+0x82>
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	f47f aee4 	bne.w	8005a32 <_strtod_l+0xba>
 8005c6a:	2a69      	cmp	r2, #105	; 0x69
 8005c6c:	d026      	beq.n	8005cbc <_strtod_l+0x344>
 8005c6e:	dc23      	bgt.n	8005cb8 <_strtod_l+0x340>
 8005c70:	2a49      	cmp	r2, #73	; 0x49
 8005c72:	d023      	beq.n	8005cbc <_strtod_l+0x344>
 8005c74:	2a4e      	cmp	r2, #78	; 0x4e
 8005c76:	f47f aedc 	bne.w	8005a32 <_strtod_l+0xba>
 8005c7a:	499d      	ldr	r1, [pc, #628]	; (8005ef0 <_strtod_l+0x578>)
 8005c7c:	a819      	add	r0, sp, #100	; 0x64
 8005c7e:	f001 fe3b 	bl	80078f8 <__match>
 8005c82:	2800      	cmp	r0, #0
 8005c84:	f43f aed5 	beq.w	8005a32 <_strtod_l+0xba>
 8005c88:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005c8a:	781b      	ldrb	r3, [r3, #0]
 8005c8c:	2b28      	cmp	r3, #40	; 0x28
 8005c8e:	d12c      	bne.n	8005cea <_strtod_l+0x372>
 8005c90:	4998      	ldr	r1, [pc, #608]	; (8005ef4 <_strtod_l+0x57c>)
 8005c92:	aa1c      	add	r2, sp, #112	; 0x70
 8005c94:	a819      	add	r0, sp, #100	; 0x64
 8005c96:	f001 fe43 	bl	8007920 <__hexnan>
 8005c9a:	2805      	cmp	r0, #5
 8005c9c:	d125      	bne.n	8005cea <_strtod_l+0x372>
 8005c9e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8005ca0:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 8005ca4:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8005ca8:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8005cac:	e6a5      	b.n	80059fa <_strtod_l+0x82>
 8005cae:	fb0e 2c0c 	mla	ip, lr, ip, r2
 8005cb2:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 8005cb6:	e7bc      	b.n	8005c32 <_strtod_l+0x2ba>
 8005cb8:	2a6e      	cmp	r2, #110	; 0x6e
 8005cba:	e7dc      	b.n	8005c76 <_strtod_l+0x2fe>
 8005cbc:	498e      	ldr	r1, [pc, #568]	; (8005ef8 <_strtod_l+0x580>)
 8005cbe:	a819      	add	r0, sp, #100	; 0x64
 8005cc0:	f001 fe1a 	bl	80078f8 <__match>
 8005cc4:	2800      	cmp	r0, #0
 8005cc6:	f43f aeb4 	beq.w	8005a32 <_strtod_l+0xba>
 8005cca:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005ccc:	498b      	ldr	r1, [pc, #556]	; (8005efc <_strtod_l+0x584>)
 8005cce:	3b01      	subs	r3, #1
 8005cd0:	a819      	add	r0, sp, #100	; 0x64
 8005cd2:	9319      	str	r3, [sp, #100]	; 0x64
 8005cd4:	f001 fe10 	bl	80078f8 <__match>
 8005cd8:	b910      	cbnz	r0, 8005ce0 <_strtod_l+0x368>
 8005cda:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005cdc:	3301      	adds	r3, #1
 8005cde:	9319      	str	r3, [sp, #100]	; 0x64
 8005ce0:	f04f 0800 	mov.w	r8, #0
 8005ce4:	f8df 9218 	ldr.w	r9, [pc, #536]	; 8005f00 <_strtod_l+0x588>
 8005ce8:	e687      	b.n	80059fa <_strtod_l+0x82>
 8005cea:	4886      	ldr	r0, [pc, #536]	; (8005f04 <_strtod_l+0x58c>)
 8005cec:	f003 f93c 	bl	8008f68 <nan>
 8005cf0:	4680      	mov	r8, r0
 8005cf2:	4689      	mov	r9, r1
 8005cf4:	e681      	b.n	80059fa <_strtod_l+0x82>
 8005cf6:	9b04      	ldr	r3, [sp, #16]
 8005cf8:	f1bb 0f00 	cmp.w	fp, #0
 8005cfc:	bf08      	it	eq
 8005cfe:	46a3      	moveq	fp, r4
 8005d00:	1aeb      	subs	r3, r5, r3
 8005d02:	2c10      	cmp	r4, #16
 8005d04:	9806      	ldr	r0, [sp, #24]
 8005d06:	4626      	mov	r6, r4
 8005d08:	9307      	str	r3, [sp, #28]
 8005d0a:	bfa8      	it	ge
 8005d0c:	2610      	movge	r6, #16
 8005d0e:	f7fa fb69 	bl	80003e4 <__aeabi_ui2d>
 8005d12:	2c09      	cmp	r4, #9
 8005d14:	4680      	mov	r8, r0
 8005d16:	4689      	mov	r9, r1
 8005d18:	dd13      	ble.n	8005d42 <_strtod_l+0x3ca>
 8005d1a:	4b7b      	ldr	r3, [pc, #492]	; (8005f08 <_strtod_l+0x590>)
 8005d1c:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8005d20:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8005d24:	f7fa fbd8 	bl	80004d8 <__aeabi_dmul>
 8005d28:	4680      	mov	r8, r0
 8005d2a:	9805      	ldr	r0, [sp, #20]
 8005d2c:	4689      	mov	r9, r1
 8005d2e:	f7fa fb59 	bl	80003e4 <__aeabi_ui2d>
 8005d32:	4602      	mov	r2, r0
 8005d34:	460b      	mov	r3, r1
 8005d36:	4640      	mov	r0, r8
 8005d38:	4649      	mov	r1, r9
 8005d3a:	f7fa fa17 	bl	800016c <__adddf3>
 8005d3e:	4680      	mov	r8, r0
 8005d40:	4689      	mov	r9, r1
 8005d42:	2c0f      	cmp	r4, #15
 8005d44:	dc36      	bgt.n	8005db4 <_strtod_l+0x43c>
 8005d46:	9b07      	ldr	r3, [sp, #28]
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	f43f ae56 	beq.w	80059fa <_strtod_l+0x82>
 8005d4e:	dd22      	ble.n	8005d96 <_strtod_l+0x41e>
 8005d50:	2b16      	cmp	r3, #22
 8005d52:	dc09      	bgt.n	8005d68 <_strtod_l+0x3f0>
 8005d54:	496c      	ldr	r1, [pc, #432]	; (8005f08 <_strtod_l+0x590>)
 8005d56:	4642      	mov	r2, r8
 8005d58:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8005d5c:	464b      	mov	r3, r9
 8005d5e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005d62:	f7fa fbb9 	bl	80004d8 <__aeabi_dmul>
 8005d66:	e7c3      	b.n	8005cf0 <_strtod_l+0x378>
 8005d68:	9a07      	ldr	r2, [sp, #28]
 8005d6a:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 8005d6e:	4293      	cmp	r3, r2
 8005d70:	db20      	blt.n	8005db4 <_strtod_l+0x43c>
 8005d72:	4d65      	ldr	r5, [pc, #404]	; (8005f08 <_strtod_l+0x590>)
 8005d74:	f1c4 040f 	rsb	r4, r4, #15
 8005d78:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8005d7c:	4642      	mov	r2, r8
 8005d7e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005d82:	464b      	mov	r3, r9
 8005d84:	f7fa fba8 	bl	80004d8 <__aeabi_dmul>
 8005d88:	9b07      	ldr	r3, [sp, #28]
 8005d8a:	1b1c      	subs	r4, r3, r4
 8005d8c:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8005d90:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005d94:	e7e5      	b.n	8005d62 <_strtod_l+0x3ea>
 8005d96:	9b07      	ldr	r3, [sp, #28]
 8005d98:	3316      	adds	r3, #22
 8005d9a:	db0b      	blt.n	8005db4 <_strtod_l+0x43c>
 8005d9c:	9b04      	ldr	r3, [sp, #16]
 8005d9e:	4640      	mov	r0, r8
 8005da0:	1b5d      	subs	r5, r3, r5
 8005da2:	4b59      	ldr	r3, [pc, #356]	; (8005f08 <_strtod_l+0x590>)
 8005da4:	4649      	mov	r1, r9
 8005da6:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8005daa:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005dae:	f7fa fcbd 	bl	800072c <__aeabi_ddiv>
 8005db2:	e79d      	b.n	8005cf0 <_strtod_l+0x378>
 8005db4:	9b07      	ldr	r3, [sp, #28]
 8005db6:	1ba6      	subs	r6, r4, r6
 8005db8:	441e      	add	r6, r3
 8005dba:	2e00      	cmp	r6, #0
 8005dbc:	dd74      	ble.n	8005ea8 <_strtod_l+0x530>
 8005dbe:	f016 030f 	ands.w	r3, r6, #15
 8005dc2:	d00a      	beq.n	8005dda <_strtod_l+0x462>
 8005dc4:	4950      	ldr	r1, [pc, #320]	; (8005f08 <_strtod_l+0x590>)
 8005dc6:	4642      	mov	r2, r8
 8005dc8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8005dcc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005dd0:	464b      	mov	r3, r9
 8005dd2:	f7fa fb81 	bl	80004d8 <__aeabi_dmul>
 8005dd6:	4680      	mov	r8, r0
 8005dd8:	4689      	mov	r9, r1
 8005dda:	f036 060f 	bics.w	r6, r6, #15
 8005dde:	d052      	beq.n	8005e86 <_strtod_l+0x50e>
 8005de0:	f5b6 7f9a 	cmp.w	r6, #308	; 0x134
 8005de4:	dd27      	ble.n	8005e36 <_strtod_l+0x4be>
 8005de6:	f04f 0b00 	mov.w	fp, #0
 8005dea:	f8cd b010 	str.w	fp, [sp, #16]
 8005dee:	f8cd b020 	str.w	fp, [sp, #32]
 8005df2:	f8cd b018 	str.w	fp, [sp, #24]
 8005df6:	2322      	movs	r3, #34	; 0x22
 8005df8:	f04f 0800 	mov.w	r8, #0
 8005dfc:	f8df 9100 	ldr.w	r9, [pc, #256]	; 8005f00 <_strtod_l+0x588>
 8005e00:	f8ca 3000 	str.w	r3, [sl]
 8005e04:	9b08      	ldr	r3, [sp, #32]
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	f43f adf7 	beq.w	80059fa <_strtod_l+0x82>
 8005e0c:	4650      	mov	r0, sl
 8005e0e:	991a      	ldr	r1, [sp, #104]	; 0x68
 8005e10:	f001 feae 	bl	8007b70 <_Bfree>
 8005e14:	4650      	mov	r0, sl
 8005e16:	9906      	ldr	r1, [sp, #24]
 8005e18:	f001 feaa 	bl	8007b70 <_Bfree>
 8005e1c:	4650      	mov	r0, sl
 8005e1e:	9904      	ldr	r1, [sp, #16]
 8005e20:	f001 fea6 	bl	8007b70 <_Bfree>
 8005e24:	4650      	mov	r0, sl
 8005e26:	9908      	ldr	r1, [sp, #32]
 8005e28:	f001 fea2 	bl	8007b70 <_Bfree>
 8005e2c:	4659      	mov	r1, fp
 8005e2e:	4650      	mov	r0, sl
 8005e30:	f001 fe9e 	bl	8007b70 <_Bfree>
 8005e34:	e5e1      	b.n	80059fa <_strtod_l+0x82>
 8005e36:	4b35      	ldr	r3, [pc, #212]	; (8005f0c <_strtod_l+0x594>)
 8005e38:	4640      	mov	r0, r8
 8005e3a:	9305      	str	r3, [sp, #20]
 8005e3c:	2300      	movs	r3, #0
 8005e3e:	4649      	mov	r1, r9
 8005e40:	461f      	mov	r7, r3
 8005e42:	1136      	asrs	r6, r6, #4
 8005e44:	2e01      	cmp	r6, #1
 8005e46:	dc21      	bgt.n	8005e8c <_strtod_l+0x514>
 8005e48:	b10b      	cbz	r3, 8005e4e <_strtod_l+0x4d6>
 8005e4a:	4680      	mov	r8, r0
 8005e4c:	4689      	mov	r9, r1
 8005e4e:	4b2f      	ldr	r3, [pc, #188]	; (8005f0c <_strtod_l+0x594>)
 8005e50:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8005e54:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8005e58:	4642      	mov	r2, r8
 8005e5a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005e5e:	464b      	mov	r3, r9
 8005e60:	f7fa fb3a 	bl	80004d8 <__aeabi_dmul>
 8005e64:	4b26      	ldr	r3, [pc, #152]	; (8005f00 <_strtod_l+0x588>)
 8005e66:	460a      	mov	r2, r1
 8005e68:	400b      	ands	r3, r1
 8005e6a:	4929      	ldr	r1, [pc, #164]	; (8005f10 <_strtod_l+0x598>)
 8005e6c:	4680      	mov	r8, r0
 8005e6e:	428b      	cmp	r3, r1
 8005e70:	d8b9      	bhi.n	8005de6 <_strtod_l+0x46e>
 8005e72:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8005e76:	428b      	cmp	r3, r1
 8005e78:	bf86      	itte	hi
 8005e7a:	f04f 38ff 	movhi.w	r8, #4294967295
 8005e7e:	f8df 9094 	ldrhi.w	r9, [pc, #148]	; 8005f14 <_strtod_l+0x59c>
 8005e82:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 8005e86:	2300      	movs	r3, #0
 8005e88:	9305      	str	r3, [sp, #20]
 8005e8a:	e07f      	b.n	8005f8c <_strtod_l+0x614>
 8005e8c:	07f2      	lsls	r2, r6, #31
 8005e8e:	d505      	bpl.n	8005e9c <_strtod_l+0x524>
 8005e90:	9b05      	ldr	r3, [sp, #20]
 8005e92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e96:	f7fa fb1f 	bl	80004d8 <__aeabi_dmul>
 8005e9a:	2301      	movs	r3, #1
 8005e9c:	9a05      	ldr	r2, [sp, #20]
 8005e9e:	3701      	adds	r7, #1
 8005ea0:	3208      	adds	r2, #8
 8005ea2:	1076      	asrs	r6, r6, #1
 8005ea4:	9205      	str	r2, [sp, #20]
 8005ea6:	e7cd      	b.n	8005e44 <_strtod_l+0x4cc>
 8005ea8:	d0ed      	beq.n	8005e86 <_strtod_l+0x50e>
 8005eaa:	4276      	negs	r6, r6
 8005eac:	f016 020f 	ands.w	r2, r6, #15
 8005eb0:	d00a      	beq.n	8005ec8 <_strtod_l+0x550>
 8005eb2:	4b15      	ldr	r3, [pc, #84]	; (8005f08 <_strtod_l+0x590>)
 8005eb4:	4640      	mov	r0, r8
 8005eb6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005eba:	4649      	mov	r1, r9
 8005ebc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ec0:	f7fa fc34 	bl	800072c <__aeabi_ddiv>
 8005ec4:	4680      	mov	r8, r0
 8005ec6:	4689      	mov	r9, r1
 8005ec8:	1136      	asrs	r6, r6, #4
 8005eca:	d0dc      	beq.n	8005e86 <_strtod_l+0x50e>
 8005ecc:	2e1f      	cmp	r6, #31
 8005ece:	dd23      	ble.n	8005f18 <_strtod_l+0x5a0>
 8005ed0:	f04f 0b00 	mov.w	fp, #0
 8005ed4:	f8cd b010 	str.w	fp, [sp, #16]
 8005ed8:	f8cd b020 	str.w	fp, [sp, #32]
 8005edc:	f8cd b018 	str.w	fp, [sp, #24]
 8005ee0:	2322      	movs	r3, #34	; 0x22
 8005ee2:	f04f 0800 	mov.w	r8, #0
 8005ee6:	f04f 0900 	mov.w	r9, #0
 8005eea:	f8ca 3000 	str.w	r3, [sl]
 8005eee:	e789      	b.n	8005e04 <_strtod_l+0x48c>
 8005ef0:	08009d25 	.word	0x08009d25
 8005ef4:	08009d64 	.word	0x08009d64
 8005ef8:	08009d1d 	.word	0x08009d1d
 8005efc:	08009ea4 	.word	0x08009ea4
 8005f00:	7ff00000 	.word	0x7ff00000
 8005f04:	0800a16b 	.word	0x0800a16b
 8005f08:	0800a030 	.word	0x0800a030
 8005f0c:	0800a008 	.word	0x0800a008
 8005f10:	7ca00000 	.word	0x7ca00000
 8005f14:	7fefffff 	.word	0x7fefffff
 8005f18:	f016 0310 	ands.w	r3, r6, #16
 8005f1c:	bf18      	it	ne
 8005f1e:	236a      	movne	r3, #106	; 0x6a
 8005f20:	4640      	mov	r0, r8
 8005f22:	9305      	str	r3, [sp, #20]
 8005f24:	4649      	mov	r1, r9
 8005f26:	2300      	movs	r3, #0
 8005f28:	4fb0      	ldr	r7, [pc, #704]	; (80061ec <_strtod_l+0x874>)
 8005f2a:	07f2      	lsls	r2, r6, #31
 8005f2c:	d504      	bpl.n	8005f38 <_strtod_l+0x5c0>
 8005f2e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005f32:	f7fa fad1 	bl	80004d8 <__aeabi_dmul>
 8005f36:	2301      	movs	r3, #1
 8005f38:	1076      	asrs	r6, r6, #1
 8005f3a:	f107 0708 	add.w	r7, r7, #8
 8005f3e:	d1f4      	bne.n	8005f2a <_strtod_l+0x5b2>
 8005f40:	b10b      	cbz	r3, 8005f46 <_strtod_l+0x5ce>
 8005f42:	4680      	mov	r8, r0
 8005f44:	4689      	mov	r9, r1
 8005f46:	9b05      	ldr	r3, [sp, #20]
 8005f48:	b1c3      	cbz	r3, 8005f7c <_strtod_l+0x604>
 8005f4a:	f3c9 520a 	ubfx	r2, r9, #20, #11
 8005f4e:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	4649      	mov	r1, r9
 8005f56:	dd11      	ble.n	8005f7c <_strtod_l+0x604>
 8005f58:	2b1f      	cmp	r3, #31
 8005f5a:	f340 8127 	ble.w	80061ac <_strtod_l+0x834>
 8005f5e:	2b34      	cmp	r3, #52	; 0x34
 8005f60:	bfd8      	it	le
 8005f62:	f04f 33ff 	movle.w	r3, #4294967295
 8005f66:	f04f 0800 	mov.w	r8, #0
 8005f6a:	bfcf      	iteee	gt
 8005f6c:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8005f70:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8005f74:	fa03 f202 	lslle.w	r2, r3, r2
 8005f78:	ea02 0901 	andle.w	r9, r2, r1
 8005f7c:	2200      	movs	r2, #0
 8005f7e:	2300      	movs	r3, #0
 8005f80:	4640      	mov	r0, r8
 8005f82:	4649      	mov	r1, r9
 8005f84:	f7fa fd10 	bl	80009a8 <__aeabi_dcmpeq>
 8005f88:	2800      	cmp	r0, #0
 8005f8a:	d1a1      	bne.n	8005ed0 <_strtod_l+0x558>
 8005f8c:	9b06      	ldr	r3, [sp, #24]
 8005f8e:	465a      	mov	r2, fp
 8005f90:	9300      	str	r3, [sp, #0]
 8005f92:	4650      	mov	r0, sl
 8005f94:	4623      	mov	r3, r4
 8005f96:	9908      	ldr	r1, [sp, #32]
 8005f98:	f001 fe52 	bl	8007c40 <__s2b>
 8005f9c:	9008      	str	r0, [sp, #32]
 8005f9e:	2800      	cmp	r0, #0
 8005fa0:	f43f af21 	beq.w	8005de6 <_strtod_l+0x46e>
 8005fa4:	9b04      	ldr	r3, [sp, #16]
 8005fa6:	f04f 0b00 	mov.w	fp, #0
 8005faa:	1b5d      	subs	r5, r3, r5
 8005fac:	9b07      	ldr	r3, [sp, #28]
 8005fae:	f8cd b010 	str.w	fp, [sp, #16]
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	bfb4      	ite	lt
 8005fb6:	462b      	movlt	r3, r5
 8005fb8:	2300      	movge	r3, #0
 8005fba:	930e      	str	r3, [sp, #56]	; 0x38
 8005fbc:	9b07      	ldr	r3, [sp, #28]
 8005fbe:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8005fc2:	9314      	str	r3, [sp, #80]	; 0x50
 8005fc4:	9b08      	ldr	r3, [sp, #32]
 8005fc6:	4650      	mov	r0, sl
 8005fc8:	6859      	ldr	r1, [r3, #4]
 8005fca:	f001 fd91 	bl	8007af0 <_Balloc>
 8005fce:	9006      	str	r0, [sp, #24]
 8005fd0:	2800      	cmp	r0, #0
 8005fd2:	f43f af10 	beq.w	8005df6 <_strtod_l+0x47e>
 8005fd6:	9b08      	ldr	r3, [sp, #32]
 8005fd8:	300c      	adds	r0, #12
 8005fda:	691a      	ldr	r2, [r3, #16]
 8005fdc:	f103 010c 	add.w	r1, r3, #12
 8005fe0:	3202      	adds	r2, #2
 8005fe2:	0092      	lsls	r2, r2, #2
 8005fe4:	f001 fd76 	bl	8007ad4 <memcpy>
 8005fe8:	ab1c      	add	r3, sp, #112	; 0x70
 8005fea:	9301      	str	r3, [sp, #4]
 8005fec:	ab1b      	add	r3, sp, #108	; 0x6c
 8005fee:	9300      	str	r3, [sp, #0]
 8005ff0:	4642      	mov	r2, r8
 8005ff2:	464b      	mov	r3, r9
 8005ff4:	4650      	mov	r0, sl
 8005ff6:	e9cd 890c 	strd	r8, r9, [sp, #48]	; 0x30
 8005ffa:	f002 f963 	bl	80082c4 <__d2b>
 8005ffe:	901a      	str	r0, [sp, #104]	; 0x68
 8006000:	2800      	cmp	r0, #0
 8006002:	f43f aef8 	beq.w	8005df6 <_strtod_l+0x47e>
 8006006:	2101      	movs	r1, #1
 8006008:	4650      	mov	r0, sl
 800600a:	f001 feb1 	bl	8007d70 <__i2b>
 800600e:	4603      	mov	r3, r0
 8006010:	9004      	str	r0, [sp, #16]
 8006012:	2800      	cmp	r0, #0
 8006014:	f43f aeef 	beq.w	8005df6 <_strtod_l+0x47e>
 8006018:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 800601a:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800601c:	2d00      	cmp	r5, #0
 800601e:	bfab      	itete	ge
 8006020:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 8006022:	9b14      	ldrlt	r3, [sp, #80]	; 0x50
 8006024:	18ee      	addge	r6, r5, r3
 8006026:	1b5c      	sublt	r4, r3, r5
 8006028:	9b05      	ldr	r3, [sp, #20]
 800602a:	bfa8      	it	ge
 800602c:	9c14      	ldrge	r4, [sp, #80]	; 0x50
 800602e:	eba5 0503 	sub.w	r5, r5, r3
 8006032:	4415      	add	r5, r2
 8006034:	4b6e      	ldr	r3, [pc, #440]	; (80061f0 <_strtod_l+0x878>)
 8006036:	f105 35ff 	add.w	r5, r5, #4294967295
 800603a:	bfb8      	it	lt
 800603c:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 800603e:	429d      	cmp	r5, r3
 8006040:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8006044:	f280 80c4 	bge.w	80061d0 <_strtod_l+0x858>
 8006048:	1b5b      	subs	r3, r3, r5
 800604a:	2b1f      	cmp	r3, #31
 800604c:	f04f 0701 	mov.w	r7, #1
 8006050:	eba2 0203 	sub.w	r2, r2, r3
 8006054:	f300 80b1 	bgt.w	80061ba <_strtod_l+0x842>
 8006058:	2500      	movs	r5, #0
 800605a:	fa07 f303 	lsl.w	r3, r7, r3
 800605e:	930f      	str	r3, [sp, #60]	; 0x3c
 8006060:	18b7      	adds	r7, r6, r2
 8006062:	9b05      	ldr	r3, [sp, #20]
 8006064:	42be      	cmp	r6, r7
 8006066:	4414      	add	r4, r2
 8006068:	441c      	add	r4, r3
 800606a:	4633      	mov	r3, r6
 800606c:	bfa8      	it	ge
 800606e:	463b      	movge	r3, r7
 8006070:	42a3      	cmp	r3, r4
 8006072:	bfa8      	it	ge
 8006074:	4623      	movge	r3, r4
 8006076:	2b00      	cmp	r3, #0
 8006078:	bfc2      	ittt	gt
 800607a:	1aff      	subgt	r7, r7, r3
 800607c:	1ae4      	subgt	r4, r4, r3
 800607e:	1af6      	subgt	r6, r6, r3
 8006080:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006082:	2b00      	cmp	r3, #0
 8006084:	dd17      	ble.n	80060b6 <_strtod_l+0x73e>
 8006086:	461a      	mov	r2, r3
 8006088:	4650      	mov	r0, sl
 800608a:	9904      	ldr	r1, [sp, #16]
 800608c:	f001 ff2e 	bl	8007eec <__pow5mult>
 8006090:	9004      	str	r0, [sp, #16]
 8006092:	2800      	cmp	r0, #0
 8006094:	f43f aeaf 	beq.w	8005df6 <_strtod_l+0x47e>
 8006098:	4601      	mov	r1, r0
 800609a:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800609c:	4650      	mov	r0, sl
 800609e:	f001 fe7d 	bl	8007d9c <__multiply>
 80060a2:	9009      	str	r0, [sp, #36]	; 0x24
 80060a4:	2800      	cmp	r0, #0
 80060a6:	f43f aea6 	beq.w	8005df6 <_strtod_l+0x47e>
 80060aa:	4650      	mov	r0, sl
 80060ac:	991a      	ldr	r1, [sp, #104]	; 0x68
 80060ae:	f001 fd5f 	bl	8007b70 <_Bfree>
 80060b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80060b4:	931a      	str	r3, [sp, #104]	; 0x68
 80060b6:	2f00      	cmp	r7, #0
 80060b8:	f300 808e 	bgt.w	80061d8 <_strtod_l+0x860>
 80060bc:	9b07      	ldr	r3, [sp, #28]
 80060be:	2b00      	cmp	r3, #0
 80060c0:	dd08      	ble.n	80060d4 <_strtod_l+0x75c>
 80060c2:	4650      	mov	r0, sl
 80060c4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80060c6:	9906      	ldr	r1, [sp, #24]
 80060c8:	f001 ff10 	bl	8007eec <__pow5mult>
 80060cc:	9006      	str	r0, [sp, #24]
 80060ce:	2800      	cmp	r0, #0
 80060d0:	f43f ae91 	beq.w	8005df6 <_strtod_l+0x47e>
 80060d4:	2c00      	cmp	r4, #0
 80060d6:	dd08      	ble.n	80060ea <_strtod_l+0x772>
 80060d8:	4622      	mov	r2, r4
 80060da:	4650      	mov	r0, sl
 80060dc:	9906      	ldr	r1, [sp, #24]
 80060de:	f001 ff5f 	bl	8007fa0 <__lshift>
 80060e2:	9006      	str	r0, [sp, #24]
 80060e4:	2800      	cmp	r0, #0
 80060e6:	f43f ae86 	beq.w	8005df6 <_strtod_l+0x47e>
 80060ea:	2e00      	cmp	r6, #0
 80060ec:	dd08      	ble.n	8006100 <_strtod_l+0x788>
 80060ee:	4632      	mov	r2, r6
 80060f0:	4650      	mov	r0, sl
 80060f2:	9904      	ldr	r1, [sp, #16]
 80060f4:	f001 ff54 	bl	8007fa0 <__lshift>
 80060f8:	9004      	str	r0, [sp, #16]
 80060fa:	2800      	cmp	r0, #0
 80060fc:	f43f ae7b 	beq.w	8005df6 <_strtod_l+0x47e>
 8006100:	4650      	mov	r0, sl
 8006102:	9a06      	ldr	r2, [sp, #24]
 8006104:	991a      	ldr	r1, [sp, #104]	; 0x68
 8006106:	f001 ffd7 	bl	80080b8 <__mdiff>
 800610a:	4683      	mov	fp, r0
 800610c:	2800      	cmp	r0, #0
 800610e:	f43f ae72 	beq.w	8005df6 <_strtod_l+0x47e>
 8006112:	2400      	movs	r4, #0
 8006114:	68c3      	ldr	r3, [r0, #12]
 8006116:	9904      	ldr	r1, [sp, #16]
 8006118:	60c4      	str	r4, [r0, #12]
 800611a:	930b      	str	r3, [sp, #44]	; 0x2c
 800611c:	f001 ffb0 	bl	8008080 <__mcmp>
 8006120:	42a0      	cmp	r0, r4
 8006122:	da6b      	bge.n	80061fc <_strtod_l+0x884>
 8006124:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006126:	ea53 0308 	orrs.w	r3, r3, r8
 800612a:	f040 8091 	bne.w	8006250 <_strtod_l+0x8d8>
 800612e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006132:	2b00      	cmp	r3, #0
 8006134:	f040 808c 	bne.w	8006250 <_strtod_l+0x8d8>
 8006138:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800613c:	0d1b      	lsrs	r3, r3, #20
 800613e:	051b      	lsls	r3, r3, #20
 8006140:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8006144:	f240 8084 	bls.w	8006250 <_strtod_l+0x8d8>
 8006148:	f8db 3014 	ldr.w	r3, [fp, #20]
 800614c:	b91b      	cbnz	r3, 8006156 <_strtod_l+0x7de>
 800614e:	f8db 3010 	ldr.w	r3, [fp, #16]
 8006152:	2b01      	cmp	r3, #1
 8006154:	dd7c      	ble.n	8006250 <_strtod_l+0x8d8>
 8006156:	4659      	mov	r1, fp
 8006158:	2201      	movs	r2, #1
 800615a:	4650      	mov	r0, sl
 800615c:	f001 ff20 	bl	8007fa0 <__lshift>
 8006160:	9904      	ldr	r1, [sp, #16]
 8006162:	4683      	mov	fp, r0
 8006164:	f001 ff8c 	bl	8008080 <__mcmp>
 8006168:	2800      	cmp	r0, #0
 800616a:	dd71      	ble.n	8006250 <_strtod_l+0x8d8>
 800616c:	9905      	ldr	r1, [sp, #20]
 800616e:	464b      	mov	r3, r9
 8006170:	4a20      	ldr	r2, [pc, #128]	; (80061f4 <_strtod_l+0x87c>)
 8006172:	2900      	cmp	r1, #0
 8006174:	f000 808c 	beq.w	8006290 <_strtod_l+0x918>
 8006178:	ea02 0109 	and.w	r1, r2, r9
 800617c:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8006180:	f300 8086 	bgt.w	8006290 <_strtod_l+0x918>
 8006184:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8006188:	f77f aeaa 	ble.w	8005ee0 <_strtod_l+0x568>
 800618c:	4640      	mov	r0, r8
 800618e:	4649      	mov	r1, r9
 8006190:	4b19      	ldr	r3, [pc, #100]	; (80061f8 <_strtod_l+0x880>)
 8006192:	2200      	movs	r2, #0
 8006194:	f7fa f9a0 	bl	80004d8 <__aeabi_dmul>
 8006198:	460b      	mov	r3, r1
 800619a:	4303      	orrs	r3, r0
 800619c:	bf08      	it	eq
 800619e:	2322      	moveq	r3, #34	; 0x22
 80061a0:	4680      	mov	r8, r0
 80061a2:	4689      	mov	r9, r1
 80061a4:	bf08      	it	eq
 80061a6:	f8ca 3000 	streq.w	r3, [sl]
 80061aa:	e62f      	b.n	8005e0c <_strtod_l+0x494>
 80061ac:	f04f 32ff 	mov.w	r2, #4294967295
 80061b0:	fa02 f303 	lsl.w	r3, r2, r3
 80061b4:	ea03 0808 	and.w	r8, r3, r8
 80061b8:	e6e0      	b.n	8005f7c <_strtod_l+0x604>
 80061ba:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 80061be:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 80061c2:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 80061c6:	35e2      	adds	r5, #226	; 0xe2
 80061c8:	fa07 f505 	lsl.w	r5, r7, r5
 80061cc:	970f      	str	r7, [sp, #60]	; 0x3c
 80061ce:	e747      	b.n	8006060 <_strtod_l+0x6e8>
 80061d0:	2301      	movs	r3, #1
 80061d2:	2500      	movs	r5, #0
 80061d4:	930f      	str	r3, [sp, #60]	; 0x3c
 80061d6:	e743      	b.n	8006060 <_strtod_l+0x6e8>
 80061d8:	463a      	mov	r2, r7
 80061da:	4650      	mov	r0, sl
 80061dc:	991a      	ldr	r1, [sp, #104]	; 0x68
 80061de:	f001 fedf 	bl	8007fa0 <__lshift>
 80061e2:	901a      	str	r0, [sp, #104]	; 0x68
 80061e4:	2800      	cmp	r0, #0
 80061e6:	f47f af69 	bne.w	80060bc <_strtod_l+0x744>
 80061ea:	e604      	b.n	8005df6 <_strtod_l+0x47e>
 80061ec:	08009d78 	.word	0x08009d78
 80061f0:	fffffc02 	.word	0xfffffc02
 80061f4:	7ff00000 	.word	0x7ff00000
 80061f8:	39500000 	.word	0x39500000
 80061fc:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8006200:	d165      	bne.n	80062ce <_strtod_l+0x956>
 8006202:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006204:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006208:	b35a      	cbz	r2, 8006262 <_strtod_l+0x8ea>
 800620a:	4a99      	ldr	r2, [pc, #612]	; (8006470 <_strtod_l+0xaf8>)
 800620c:	4293      	cmp	r3, r2
 800620e:	d12b      	bne.n	8006268 <_strtod_l+0x8f0>
 8006210:	9b05      	ldr	r3, [sp, #20]
 8006212:	4641      	mov	r1, r8
 8006214:	b303      	cbz	r3, 8006258 <_strtod_l+0x8e0>
 8006216:	464a      	mov	r2, r9
 8006218:	4b96      	ldr	r3, [pc, #600]	; (8006474 <_strtod_l+0xafc>)
 800621a:	4013      	ands	r3, r2
 800621c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8006220:	f04f 32ff 	mov.w	r2, #4294967295
 8006224:	d81b      	bhi.n	800625e <_strtod_l+0x8e6>
 8006226:	0d1b      	lsrs	r3, r3, #20
 8006228:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800622c:	fa02 f303 	lsl.w	r3, r2, r3
 8006230:	4299      	cmp	r1, r3
 8006232:	d119      	bne.n	8006268 <_strtod_l+0x8f0>
 8006234:	4b90      	ldr	r3, [pc, #576]	; (8006478 <_strtod_l+0xb00>)
 8006236:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006238:	429a      	cmp	r2, r3
 800623a:	d102      	bne.n	8006242 <_strtod_l+0x8ca>
 800623c:	3101      	adds	r1, #1
 800623e:	f43f adda 	beq.w	8005df6 <_strtod_l+0x47e>
 8006242:	f04f 0800 	mov.w	r8, #0
 8006246:	4b8b      	ldr	r3, [pc, #556]	; (8006474 <_strtod_l+0xafc>)
 8006248:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800624a:	401a      	ands	r2, r3
 800624c:	f502 1980 	add.w	r9, r2, #1048576	; 0x100000
 8006250:	9b05      	ldr	r3, [sp, #20]
 8006252:	2b00      	cmp	r3, #0
 8006254:	d19a      	bne.n	800618c <_strtod_l+0x814>
 8006256:	e5d9      	b.n	8005e0c <_strtod_l+0x494>
 8006258:	f04f 33ff 	mov.w	r3, #4294967295
 800625c:	e7e8      	b.n	8006230 <_strtod_l+0x8b8>
 800625e:	4613      	mov	r3, r2
 8006260:	e7e6      	b.n	8006230 <_strtod_l+0x8b8>
 8006262:	ea53 0308 	orrs.w	r3, r3, r8
 8006266:	d081      	beq.n	800616c <_strtod_l+0x7f4>
 8006268:	b1e5      	cbz	r5, 80062a4 <_strtod_l+0x92c>
 800626a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800626c:	421d      	tst	r5, r3
 800626e:	d0ef      	beq.n	8006250 <_strtod_l+0x8d8>
 8006270:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006272:	4640      	mov	r0, r8
 8006274:	4649      	mov	r1, r9
 8006276:	9a05      	ldr	r2, [sp, #20]
 8006278:	b1c3      	cbz	r3, 80062ac <_strtod_l+0x934>
 800627a:	f7ff fb5c 	bl	8005936 <sulp>
 800627e:	4602      	mov	r2, r0
 8006280:	460b      	mov	r3, r1
 8006282:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006286:	f7f9 ff71 	bl	800016c <__adddf3>
 800628a:	4680      	mov	r8, r0
 800628c:	4689      	mov	r9, r1
 800628e:	e7df      	b.n	8006250 <_strtod_l+0x8d8>
 8006290:	4013      	ands	r3, r2
 8006292:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8006296:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800629a:	f04f 38ff 	mov.w	r8, #4294967295
 800629e:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 80062a2:	e7d5      	b.n	8006250 <_strtod_l+0x8d8>
 80062a4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80062a6:	ea13 0f08 	tst.w	r3, r8
 80062aa:	e7e0      	b.n	800626e <_strtod_l+0x8f6>
 80062ac:	f7ff fb43 	bl	8005936 <sulp>
 80062b0:	4602      	mov	r2, r0
 80062b2:	460b      	mov	r3, r1
 80062b4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80062b8:	f7f9 ff56 	bl	8000168 <__aeabi_dsub>
 80062bc:	2200      	movs	r2, #0
 80062be:	2300      	movs	r3, #0
 80062c0:	4680      	mov	r8, r0
 80062c2:	4689      	mov	r9, r1
 80062c4:	f7fa fb70 	bl	80009a8 <__aeabi_dcmpeq>
 80062c8:	2800      	cmp	r0, #0
 80062ca:	d0c1      	beq.n	8006250 <_strtod_l+0x8d8>
 80062cc:	e608      	b.n	8005ee0 <_strtod_l+0x568>
 80062ce:	4658      	mov	r0, fp
 80062d0:	9904      	ldr	r1, [sp, #16]
 80062d2:	f002 f853 	bl	800837c <__ratio>
 80062d6:	2200      	movs	r2, #0
 80062d8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80062dc:	4606      	mov	r6, r0
 80062de:	460f      	mov	r7, r1
 80062e0:	f7fa fb76 	bl	80009d0 <__aeabi_dcmple>
 80062e4:	2800      	cmp	r0, #0
 80062e6:	d070      	beq.n	80063ca <_strtod_l+0xa52>
 80062e8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d042      	beq.n	8006374 <_strtod_l+0x9fc>
 80062ee:	2600      	movs	r6, #0
 80062f0:	4f62      	ldr	r7, [pc, #392]	; (800647c <_strtod_l+0xb04>)
 80062f2:	4d62      	ldr	r5, [pc, #392]	; (800647c <_strtod_l+0xb04>)
 80062f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80062f6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80062fa:	0d1b      	lsrs	r3, r3, #20
 80062fc:	051b      	lsls	r3, r3, #20
 80062fe:	930f      	str	r3, [sp, #60]	; 0x3c
 8006300:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006302:	4b5f      	ldr	r3, [pc, #380]	; (8006480 <_strtod_l+0xb08>)
 8006304:	429a      	cmp	r2, r3
 8006306:	f040 80c3 	bne.w	8006490 <_strtod_l+0xb18>
 800630a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800630c:	4640      	mov	r0, r8
 800630e:	f1a3 7954 	sub.w	r9, r3, #55574528	; 0x3500000
 8006312:	4649      	mov	r1, r9
 8006314:	f001 ff5c 	bl	80081d0 <__ulp>
 8006318:	4602      	mov	r2, r0
 800631a:	460b      	mov	r3, r1
 800631c:	4630      	mov	r0, r6
 800631e:	4639      	mov	r1, r7
 8006320:	f7fa f8da 	bl	80004d8 <__aeabi_dmul>
 8006324:	4642      	mov	r2, r8
 8006326:	464b      	mov	r3, r9
 8006328:	f7f9 ff20 	bl	800016c <__adddf3>
 800632c:	460b      	mov	r3, r1
 800632e:	4951      	ldr	r1, [pc, #324]	; (8006474 <_strtod_l+0xafc>)
 8006330:	4a54      	ldr	r2, [pc, #336]	; (8006484 <_strtod_l+0xb0c>)
 8006332:	4019      	ands	r1, r3
 8006334:	4291      	cmp	r1, r2
 8006336:	4680      	mov	r8, r0
 8006338:	d95d      	bls.n	80063f6 <_strtod_l+0xa7e>
 800633a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800633c:	4b4e      	ldr	r3, [pc, #312]	; (8006478 <_strtod_l+0xb00>)
 800633e:	429a      	cmp	r2, r3
 8006340:	d103      	bne.n	800634a <_strtod_l+0x9d2>
 8006342:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006344:	3301      	adds	r3, #1
 8006346:	f43f ad56 	beq.w	8005df6 <_strtod_l+0x47e>
 800634a:	f04f 38ff 	mov.w	r8, #4294967295
 800634e:	f8df 9128 	ldr.w	r9, [pc, #296]	; 8006478 <_strtod_l+0xb00>
 8006352:	4650      	mov	r0, sl
 8006354:	991a      	ldr	r1, [sp, #104]	; 0x68
 8006356:	f001 fc0b 	bl	8007b70 <_Bfree>
 800635a:	4650      	mov	r0, sl
 800635c:	9906      	ldr	r1, [sp, #24]
 800635e:	f001 fc07 	bl	8007b70 <_Bfree>
 8006362:	4650      	mov	r0, sl
 8006364:	9904      	ldr	r1, [sp, #16]
 8006366:	f001 fc03 	bl	8007b70 <_Bfree>
 800636a:	4659      	mov	r1, fp
 800636c:	4650      	mov	r0, sl
 800636e:	f001 fbff 	bl	8007b70 <_Bfree>
 8006372:	e627      	b.n	8005fc4 <_strtod_l+0x64c>
 8006374:	f1b8 0f00 	cmp.w	r8, #0
 8006378:	d119      	bne.n	80063ae <_strtod_l+0xa36>
 800637a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800637c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006380:	b9e3      	cbnz	r3, 80063bc <_strtod_l+0xa44>
 8006382:	2200      	movs	r2, #0
 8006384:	4630      	mov	r0, r6
 8006386:	4639      	mov	r1, r7
 8006388:	4b3c      	ldr	r3, [pc, #240]	; (800647c <_strtod_l+0xb04>)
 800638a:	f7fa fb17 	bl	80009bc <__aeabi_dcmplt>
 800638e:	b9c8      	cbnz	r0, 80063c4 <_strtod_l+0xa4c>
 8006390:	2200      	movs	r2, #0
 8006392:	4630      	mov	r0, r6
 8006394:	4639      	mov	r1, r7
 8006396:	4b3c      	ldr	r3, [pc, #240]	; (8006488 <_strtod_l+0xb10>)
 8006398:	f7fa f89e 	bl	80004d8 <__aeabi_dmul>
 800639c:	4604      	mov	r4, r0
 800639e:	460d      	mov	r5, r1
 80063a0:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 80063a4:	9416      	str	r4, [sp, #88]	; 0x58
 80063a6:	9317      	str	r3, [sp, #92]	; 0x5c
 80063a8:	e9dd 6716 	ldrd	r6, r7, [sp, #88]	; 0x58
 80063ac:	e7a2      	b.n	80062f4 <_strtod_l+0x97c>
 80063ae:	f1b8 0f01 	cmp.w	r8, #1
 80063b2:	d103      	bne.n	80063bc <_strtod_l+0xa44>
 80063b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	f43f ad92 	beq.w	8005ee0 <_strtod_l+0x568>
 80063bc:	2600      	movs	r6, #0
 80063be:	2400      	movs	r4, #0
 80063c0:	4f32      	ldr	r7, [pc, #200]	; (800648c <_strtod_l+0xb14>)
 80063c2:	e796      	b.n	80062f2 <_strtod_l+0x97a>
 80063c4:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80063c6:	4d30      	ldr	r5, [pc, #192]	; (8006488 <_strtod_l+0xb10>)
 80063c8:	e7ea      	b.n	80063a0 <_strtod_l+0xa28>
 80063ca:	4b2f      	ldr	r3, [pc, #188]	; (8006488 <_strtod_l+0xb10>)
 80063cc:	2200      	movs	r2, #0
 80063ce:	4630      	mov	r0, r6
 80063d0:	4639      	mov	r1, r7
 80063d2:	f7fa f881 	bl	80004d8 <__aeabi_dmul>
 80063d6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80063d8:	4604      	mov	r4, r0
 80063da:	460d      	mov	r5, r1
 80063dc:	b933      	cbnz	r3, 80063ec <_strtod_l+0xa74>
 80063de:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80063e2:	9010      	str	r0, [sp, #64]	; 0x40
 80063e4:	9311      	str	r3, [sp, #68]	; 0x44
 80063e6:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 80063ea:	e783      	b.n	80062f4 <_strtod_l+0x97c>
 80063ec:	4602      	mov	r2, r0
 80063ee:	460b      	mov	r3, r1
 80063f0:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 80063f4:	e7f7      	b.n	80063e6 <_strtod_l+0xa6e>
 80063f6:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 80063fa:	9b05      	ldr	r3, [sp, #20]
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d1a8      	bne.n	8006352 <_strtod_l+0x9da>
 8006400:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006404:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006406:	0d1b      	lsrs	r3, r3, #20
 8006408:	051b      	lsls	r3, r3, #20
 800640a:	429a      	cmp	r2, r3
 800640c:	d1a1      	bne.n	8006352 <_strtod_l+0x9da>
 800640e:	4620      	mov	r0, r4
 8006410:	4629      	mov	r1, r5
 8006412:	f7fa fe2d 	bl	8001070 <__aeabi_d2lz>
 8006416:	f7fa f831 	bl	800047c <__aeabi_l2d>
 800641a:	4602      	mov	r2, r0
 800641c:	460b      	mov	r3, r1
 800641e:	4620      	mov	r0, r4
 8006420:	4629      	mov	r1, r5
 8006422:	f7f9 fea1 	bl	8000168 <__aeabi_dsub>
 8006426:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006428:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800642c:	ea43 0308 	orr.w	r3, r3, r8
 8006430:	4313      	orrs	r3, r2
 8006432:	4604      	mov	r4, r0
 8006434:	460d      	mov	r5, r1
 8006436:	d066      	beq.n	8006506 <_strtod_l+0xb8e>
 8006438:	a309      	add	r3, pc, #36	; (adr r3, 8006460 <_strtod_l+0xae8>)
 800643a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800643e:	f7fa fabd 	bl	80009bc <__aeabi_dcmplt>
 8006442:	2800      	cmp	r0, #0
 8006444:	f47f ace2 	bne.w	8005e0c <_strtod_l+0x494>
 8006448:	a307      	add	r3, pc, #28	; (adr r3, 8006468 <_strtod_l+0xaf0>)
 800644a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800644e:	4620      	mov	r0, r4
 8006450:	4629      	mov	r1, r5
 8006452:	f7fa fad1 	bl	80009f8 <__aeabi_dcmpgt>
 8006456:	2800      	cmp	r0, #0
 8006458:	f43f af7b 	beq.w	8006352 <_strtod_l+0x9da>
 800645c:	e4d6      	b.n	8005e0c <_strtod_l+0x494>
 800645e:	bf00      	nop
 8006460:	94a03595 	.word	0x94a03595
 8006464:	3fdfffff 	.word	0x3fdfffff
 8006468:	35afe535 	.word	0x35afe535
 800646c:	3fe00000 	.word	0x3fe00000
 8006470:	000fffff 	.word	0x000fffff
 8006474:	7ff00000 	.word	0x7ff00000
 8006478:	7fefffff 	.word	0x7fefffff
 800647c:	3ff00000 	.word	0x3ff00000
 8006480:	7fe00000 	.word	0x7fe00000
 8006484:	7c9fffff 	.word	0x7c9fffff
 8006488:	3fe00000 	.word	0x3fe00000
 800648c:	bff00000 	.word	0xbff00000
 8006490:	9b05      	ldr	r3, [sp, #20]
 8006492:	b313      	cbz	r3, 80064da <_strtod_l+0xb62>
 8006494:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006496:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800649a:	d81e      	bhi.n	80064da <_strtod_l+0xb62>
 800649c:	a326      	add	r3, pc, #152	; (adr r3, 8006538 <_strtod_l+0xbc0>)
 800649e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064a2:	4620      	mov	r0, r4
 80064a4:	4629      	mov	r1, r5
 80064a6:	f7fa fa93 	bl	80009d0 <__aeabi_dcmple>
 80064aa:	b190      	cbz	r0, 80064d2 <_strtod_l+0xb5a>
 80064ac:	4629      	mov	r1, r5
 80064ae:	4620      	mov	r0, r4
 80064b0:	f7fa faea 	bl	8000a88 <__aeabi_d2uiz>
 80064b4:	2801      	cmp	r0, #1
 80064b6:	bf38      	it	cc
 80064b8:	2001      	movcc	r0, #1
 80064ba:	f7f9 ff93 	bl	80003e4 <__aeabi_ui2d>
 80064be:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80064c0:	4604      	mov	r4, r0
 80064c2:	460d      	mov	r5, r1
 80064c4:	b9d3      	cbnz	r3, 80064fc <_strtod_l+0xb84>
 80064c6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80064ca:	9012      	str	r0, [sp, #72]	; 0x48
 80064cc:	9313      	str	r3, [sp, #76]	; 0x4c
 80064ce:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 80064d2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80064d4:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 80064d8:	1a9f      	subs	r7, r3, r2
 80064da:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80064de:	f001 fe77 	bl	80081d0 <__ulp>
 80064e2:	4602      	mov	r2, r0
 80064e4:	460b      	mov	r3, r1
 80064e6:	4630      	mov	r0, r6
 80064e8:	4639      	mov	r1, r7
 80064ea:	f7f9 fff5 	bl	80004d8 <__aeabi_dmul>
 80064ee:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80064f2:	f7f9 fe3b 	bl	800016c <__adddf3>
 80064f6:	4680      	mov	r8, r0
 80064f8:	4689      	mov	r9, r1
 80064fa:	e77e      	b.n	80063fa <_strtod_l+0xa82>
 80064fc:	4602      	mov	r2, r0
 80064fe:	460b      	mov	r3, r1
 8006500:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 8006504:	e7e3      	b.n	80064ce <_strtod_l+0xb56>
 8006506:	a30e      	add	r3, pc, #56	; (adr r3, 8006540 <_strtod_l+0xbc8>)
 8006508:	e9d3 2300 	ldrd	r2, r3, [r3]
 800650c:	f7fa fa56 	bl	80009bc <__aeabi_dcmplt>
 8006510:	e7a1      	b.n	8006456 <_strtod_l+0xade>
 8006512:	2300      	movs	r3, #0
 8006514:	930a      	str	r3, [sp, #40]	; 0x28
 8006516:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006518:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800651a:	6013      	str	r3, [r2, #0]
 800651c:	f7ff ba71 	b.w	8005a02 <_strtod_l+0x8a>
 8006520:	2a65      	cmp	r2, #101	; 0x65
 8006522:	f43f ab63 	beq.w	8005bec <_strtod_l+0x274>
 8006526:	2a45      	cmp	r2, #69	; 0x45
 8006528:	f43f ab60 	beq.w	8005bec <_strtod_l+0x274>
 800652c:	2301      	movs	r3, #1
 800652e:	f7ff bb95 	b.w	8005c5c <_strtod_l+0x2e4>
 8006532:	bf00      	nop
 8006534:	f3af 8000 	nop.w
 8006538:	ffc00000 	.word	0xffc00000
 800653c:	41dfffff 	.word	0x41dfffff
 8006540:	94a03595 	.word	0x94a03595
 8006544:	3fcfffff 	.word	0x3fcfffff

08006548 <_strtod_r>:
 8006548:	4b01      	ldr	r3, [pc, #4]	; (8006550 <_strtod_r+0x8>)
 800654a:	f7ff ba15 	b.w	8005978 <_strtod_l>
 800654e:	bf00      	nop
 8006550:	200001e4 	.word	0x200001e4

08006554 <_strtol_l.constprop.0>:
 8006554:	2b01      	cmp	r3, #1
 8006556:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800655a:	4680      	mov	r8, r0
 800655c:	d001      	beq.n	8006562 <_strtol_l.constprop.0+0xe>
 800655e:	2b24      	cmp	r3, #36	; 0x24
 8006560:	d906      	bls.n	8006570 <_strtol_l.constprop.0+0x1c>
 8006562:	f7fe faa1 	bl	8004aa8 <__errno>
 8006566:	2316      	movs	r3, #22
 8006568:	6003      	str	r3, [r0, #0]
 800656a:	2000      	movs	r0, #0
 800656c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006570:	460d      	mov	r5, r1
 8006572:	4f35      	ldr	r7, [pc, #212]	; (8006648 <_strtol_l.constprop.0+0xf4>)
 8006574:	4628      	mov	r0, r5
 8006576:	f815 4b01 	ldrb.w	r4, [r5], #1
 800657a:	5de6      	ldrb	r6, [r4, r7]
 800657c:	f016 0608 	ands.w	r6, r6, #8
 8006580:	d1f8      	bne.n	8006574 <_strtol_l.constprop.0+0x20>
 8006582:	2c2d      	cmp	r4, #45	; 0x2d
 8006584:	d12f      	bne.n	80065e6 <_strtol_l.constprop.0+0x92>
 8006586:	2601      	movs	r6, #1
 8006588:	782c      	ldrb	r4, [r5, #0]
 800658a:	1c85      	adds	r5, r0, #2
 800658c:	2b00      	cmp	r3, #0
 800658e:	d057      	beq.n	8006640 <_strtol_l.constprop.0+0xec>
 8006590:	2b10      	cmp	r3, #16
 8006592:	d109      	bne.n	80065a8 <_strtol_l.constprop.0+0x54>
 8006594:	2c30      	cmp	r4, #48	; 0x30
 8006596:	d107      	bne.n	80065a8 <_strtol_l.constprop.0+0x54>
 8006598:	7828      	ldrb	r0, [r5, #0]
 800659a:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800659e:	2858      	cmp	r0, #88	; 0x58
 80065a0:	d149      	bne.n	8006636 <_strtol_l.constprop.0+0xe2>
 80065a2:	2310      	movs	r3, #16
 80065a4:	786c      	ldrb	r4, [r5, #1]
 80065a6:	3502      	adds	r5, #2
 80065a8:	2700      	movs	r7, #0
 80065aa:	f106 4e00 	add.w	lr, r6, #2147483648	; 0x80000000
 80065ae:	f10e 3eff 	add.w	lr, lr, #4294967295
 80065b2:	fbbe f9f3 	udiv	r9, lr, r3
 80065b6:	4638      	mov	r0, r7
 80065b8:	fb03 ea19 	mls	sl, r3, r9, lr
 80065bc:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 80065c0:	f1bc 0f09 	cmp.w	ip, #9
 80065c4:	d814      	bhi.n	80065f0 <_strtol_l.constprop.0+0x9c>
 80065c6:	4664      	mov	r4, ip
 80065c8:	42a3      	cmp	r3, r4
 80065ca:	dd22      	ble.n	8006612 <_strtol_l.constprop.0+0xbe>
 80065cc:	2f00      	cmp	r7, #0
 80065ce:	db1d      	blt.n	800660c <_strtol_l.constprop.0+0xb8>
 80065d0:	4581      	cmp	r9, r0
 80065d2:	d31b      	bcc.n	800660c <_strtol_l.constprop.0+0xb8>
 80065d4:	d101      	bne.n	80065da <_strtol_l.constprop.0+0x86>
 80065d6:	45a2      	cmp	sl, r4
 80065d8:	db18      	blt.n	800660c <_strtol_l.constprop.0+0xb8>
 80065da:	2701      	movs	r7, #1
 80065dc:	fb00 4003 	mla	r0, r0, r3, r4
 80065e0:	f815 4b01 	ldrb.w	r4, [r5], #1
 80065e4:	e7ea      	b.n	80065bc <_strtol_l.constprop.0+0x68>
 80065e6:	2c2b      	cmp	r4, #43	; 0x2b
 80065e8:	bf04      	itt	eq
 80065ea:	782c      	ldrbeq	r4, [r5, #0]
 80065ec:	1c85      	addeq	r5, r0, #2
 80065ee:	e7cd      	b.n	800658c <_strtol_l.constprop.0+0x38>
 80065f0:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 80065f4:	f1bc 0f19 	cmp.w	ip, #25
 80065f8:	d801      	bhi.n	80065fe <_strtol_l.constprop.0+0xaa>
 80065fa:	3c37      	subs	r4, #55	; 0x37
 80065fc:	e7e4      	b.n	80065c8 <_strtol_l.constprop.0+0x74>
 80065fe:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8006602:	f1bc 0f19 	cmp.w	ip, #25
 8006606:	d804      	bhi.n	8006612 <_strtol_l.constprop.0+0xbe>
 8006608:	3c57      	subs	r4, #87	; 0x57
 800660a:	e7dd      	b.n	80065c8 <_strtol_l.constprop.0+0x74>
 800660c:	f04f 37ff 	mov.w	r7, #4294967295
 8006610:	e7e6      	b.n	80065e0 <_strtol_l.constprop.0+0x8c>
 8006612:	2f00      	cmp	r7, #0
 8006614:	da07      	bge.n	8006626 <_strtol_l.constprop.0+0xd2>
 8006616:	2322      	movs	r3, #34	; 0x22
 8006618:	4670      	mov	r0, lr
 800661a:	f8c8 3000 	str.w	r3, [r8]
 800661e:	2a00      	cmp	r2, #0
 8006620:	d0a4      	beq.n	800656c <_strtol_l.constprop.0+0x18>
 8006622:	1e69      	subs	r1, r5, #1
 8006624:	e005      	b.n	8006632 <_strtol_l.constprop.0+0xde>
 8006626:	b106      	cbz	r6, 800662a <_strtol_l.constprop.0+0xd6>
 8006628:	4240      	negs	r0, r0
 800662a:	2a00      	cmp	r2, #0
 800662c:	d09e      	beq.n	800656c <_strtol_l.constprop.0+0x18>
 800662e:	2f00      	cmp	r7, #0
 8006630:	d1f7      	bne.n	8006622 <_strtol_l.constprop.0+0xce>
 8006632:	6011      	str	r1, [r2, #0]
 8006634:	e79a      	b.n	800656c <_strtol_l.constprop.0+0x18>
 8006636:	2430      	movs	r4, #48	; 0x30
 8006638:	2b00      	cmp	r3, #0
 800663a:	d1b5      	bne.n	80065a8 <_strtol_l.constprop.0+0x54>
 800663c:	2308      	movs	r3, #8
 800663e:	e7b3      	b.n	80065a8 <_strtol_l.constprop.0+0x54>
 8006640:	2c30      	cmp	r4, #48	; 0x30
 8006642:	d0a9      	beq.n	8006598 <_strtol_l.constprop.0+0x44>
 8006644:	230a      	movs	r3, #10
 8006646:	e7af      	b.n	80065a8 <_strtol_l.constprop.0+0x54>
 8006648:	08009da1 	.word	0x08009da1

0800664c <_strtol_r>:
 800664c:	f7ff bf82 	b.w	8006554 <_strtol_l.constprop.0>

08006650 <_write_r>:
 8006650:	b538      	push	{r3, r4, r5, lr}
 8006652:	4604      	mov	r4, r0
 8006654:	4608      	mov	r0, r1
 8006656:	4611      	mov	r1, r2
 8006658:	2200      	movs	r2, #0
 800665a:	4d05      	ldr	r5, [pc, #20]	; (8006670 <_write_r+0x20>)
 800665c:	602a      	str	r2, [r5, #0]
 800665e:	461a      	mov	r2, r3
 8006660:	f7fa ff6c 	bl	800153c <_write>
 8006664:	1c43      	adds	r3, r0, #1
 8006666:	d102      	bne.n	800666e <_write_r+0x1e>
 8006668:	682b      	ldr	r3, [r5, #0]
 800666a:	b103      	cbz	r3, 800666e <_write_r+0x1e>
 800666c:	6023      	str	r3, [r4, #0]
 800666e:	bd38      	pop	{r3, r4, r5, pc}
 8006670:	200015bc 	.word	0x200015bc

08006674 <_close_r>:
 8006674:	b538      	push	{r3, r4, r5, lr}
 8006676:	2300      	movs	r3, #0
 8006678:	4d05      	ldr	r5, [pc, #20]	; (8006690 <_close_r+0x1c>)
 800667a:	4604      	mov	r4, r0
 800667c:	4608      	mov	r0, r1
 800667e:	602b      	str	r3, [r5, #0]
 8006680:	f7fa ff6a 	bl	8001558 <_close>
 8006684:	1c43      	adds	r3, r0, #1
 8006686:	d102      	bne.n	800668e <_close_r+0x1a>
 8006688:	682b      	ldr	r3, [r5, #0]
 800668a:	b103      	cbz	r3, 800668e <_close_r+0x1a>
 800668c:	6023      	str	r3, [r4, #0]
 800668e:	bd38      	pop	{r3, r4, r5, pc}
 8006690:	200015bc 	.word	0x200015bc

08006694 <quorem>:
 8006694:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006698:	6903      	ldr	r3, [r0, #16]
 800669a:	690c      	ldr	r4, [r1, #16]
 800669c:	4607      	mov	r7, r0
 800669e:	42a3      	cmp	r3, r4
 80066a0:	f2c0 8082 	blt.w	80067a8 <quorem+0x114>
 80066a4:	3c01      	subs	r4, #1
 80066a6:	f100 0514 	add.w	r5, r0, #20
 80066aa:	f101 0814 	add.w	r8, r1, #20
 80066ae:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80066b2:	9301      	str	r3, [sp, #4]
 80066b4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80066b8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80066bc:	3301      	adds	r3, #1
 80066be:	429a      	cmp	r2, r3
 80066c0:	fbb2 f6f3 	udiv	r6, r2, r3
 80066c4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80066c8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80066cc:	d331      	bcc.n	8006732 <quorem+0x9e>
 80066ce:	f04f 0e00 	mov.w	lr, #0
 80066d2:	4640      	mov	r0, r8
 80066d4:	46ac      	mov	ip, r5
 80066d6:	46f2      	mov	sl, lr
 80066d8:	f850 2b04 	ldr.w	r2, [r0], #4
 80066dc:	b293      	uxth	r3, r2
 80066de:	fb06 e303 	mla	r3, r6, r3, lr
 80066e2:	0c12      	lsrs	r2, r2, #16
 80066e4:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80066e8:	b29b      	uxth	r3, r3
 80066ea:	fb06 e202 	mla	r2, r6, r2, lr
 80066ee:	ebaa 0303 	sub.w	r3, sl, r3
 80066f2:	f8dc a000 	ldr.w	sl, [ip]
 80066f6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80066fa:	fa1f fa8a 	uxth.w	sl, sl
 80066fe:	4453      	add	r3, sl
 8006700:	f8dc a000 	ldr.w	sl, [ip]
 8006704:	b292      	uxth	r2, r2
 8006706:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800670a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800670e:	b29b      	uxth	r3, r3
 8006710:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006714:	4581      	cmp	r9, r0
 8006716:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800671a:	f84c 3b04 	str.w	r3, [ip], #4
 800671e:	d2db      	bcs.n	80066d8 <quorem+0x44>
 8006720:	f855 300b 	ldr.w	r3, [r5, fp]
 8006724:	b92b      	cbnz	r3, 8006732 <quorem+0x9e>
 8006726:	9b01      	ldr	r3, [sp, #4]
 8006728:	3b04      	subs	r3, #4
 800672a:	429d      	cmp	r5, r3
 800672c:	461a      	mov	r2, r3
 800672e:	d32f      	bcc.n	8006790 <quorem+0xfc>
 8006730:	613c      	str	r4, [r7, #16]
 8006732:	4638      	mov	r0, r7
 8006734:	f001 fca4 	bl	8008080 <__mcmp>
 8006738:	2800      	cmp	r0, #0
 800673a:	db25      	blt.n	8006788 <quorem+0xf4>
 800673c:	4628      	mov	r0, r5
 800673e:	f04f 0c00 	mov.w	ip, #0
 8006742:	3601      	adds	r6, #1
 8006744:	f858 1b04 	ldr.w	r1, [r8], #4
 8006748:	f8d0 e000 	ldr.w	lr, [r0]
 800674c:	b28b      	uxth	r3, r1
 800674e:	ebac 0303 	sub.w	r3, ip, r3
 8006752:	fa1f f28e 	uxth.w	r2, lr
 8006756:	4413      	add	r3, r2
 8006758:	0c0a      	lsrs	r2, r1, #16
 800675a:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800675e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006762:	b29b      	uxth	r3, r3
 8006764:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006768:	45c1      	cmp	r9, r8
 800676a:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800676e:	f840 3b04 	str.w	r3, [r0], #4
 8006772:	d2e7      	bcs.n	8006744 <quorem+0xb0>
 8006774:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006778:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800677c:	b922      	cbnz	r2, 8006788 <quorem+0xf4>
 800677e:	3b04      	subs	r3, #4
 8006780:	429d      	cmp	r5, r3
 8006782:	461a      	mov	r2, r3
 8006784:	d30a      	bcc.n	800679c <quorem+0x108>
 8006786:	613c      	str	r4, [r7, #16]
 8006788:	4630      	mov	r0, r6
 800678a:	b003      	add	sp, #12
 800678c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006790:	6812      	ldr	r2, [r2, #0]
 8006792:	3b04      	subs	r3, #4
 8006794:	2a00      	cmp	r2, #0
 8006796:	d1cb      	bne.n	8006730 <quorem+0x9c>
 8006798:	3c01      	subs	r4, #1
 800679a:	e7c6      	b.n	800672a <quorem+0x96>
 800679c:	6812      	ldr	r2, [r2, #0]
 800679e:	3b04      	subs	r3, #4
 80067a0:	2a00      	cmp	r2, #0
 80067a2:	d1f0      	bne.n	8006786 <quorem+0xf2>
 80067a4:	3c01      	subs	r4, #1
 80067a6:	e7eb      	b.n	8006780 <quorem+0xec>
 80067a8:	2000      	movs	r0, #0
 80067aa:	e7ee      	b.n	800678a <quorem+0xf6>
 80067ac:	0000      	movs	r0, r0
	...

080067b0 <_dtoa_r>:
 80067b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80067b4:	4616      	mov	r6, r2
 80067b6:	461f      	mov	r7, r3
 80067b8:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80067ba:	b099      	sub	sp, #100	; 0x64
 80067bc:	4605      	mov	r5, r0
 80067be:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80067c2:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 80067c6:	b974      	cbnz	r4, 80067e6 <_dtoa_r+0x36>
 80067c8:	2010      	movs	r0, #16
 80067ca:	f001 f95b 	bl	8007a84 <malloc>
 80067ce:	4602      	mov	r2, r0
 80067d0:	6268      	str	r0, [r5, #36]	; 0x24
 80067d2:	b920      	cbnz	r0, 80067de <_dtoa_r+0x2e>
 80067d4:	21ea      	movs	r1, #234	; 0xea
 80067d6:	4ba8      	ldr	r3, [pc, #672]	; (8006a78 <_dtoa_r+0x2c8>)
 80067d8:	48a8      	ldr	r0, [pc, #672]	; (8006a7c <_dtoa_r+0x2cc>)
 80067da:	f002 fccd 	bl	8009178 <__assert_func>
 80067de:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80067e2:	6004      	str	r4, [r0, #0]
 80067e4:	60c4      	str	r4, [r0, #12]
 80067e6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80067e8:	6819      	ldr	r1, [r3, #0]
 80067ea:	b151      	cbz	r1, 8006802 <_dtoa_r+0x52>
 80067ec:	685a      	ldr	r2, [r3, #4]
 80067ee:	2301      	movs	r3, #1
 80067f0:	4093      	lsls	r3, r2
 80067f2:	604a      	str	r2, [r1, #4]
 80067f4:	608b      	str	r3, [r1, #8]
 80067f6:	4628      	mov	r0, r5
 80067f8:	f001 f9ba 	bl	8007b70 <_Bfree>
 80067fc:	2200      	movs	r2, #0
 80067fe:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006800:	601a      	str	r2, [r3, #0]
 8006802:	1e3b      	subs	r3, r7, #0
 8006804:	bfaf      	iteee	ge
 8006806:	2300      	movge	r3, #0
 8006808:	2201      	movlt	r2, #1
 800680a:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800680e:	9305      	strlt	r3, [sp, #20]
 8006810:	bfa8      	it	ge
 8006812:	f8c8 3000 	strge.w	r3, [r8]
 8006816:	f8dd 9014 	ldr.w	r9, [sp, #20]
 800681a:	4b99      	ldr	r3, [pc, #612]	; (8006a80 <_dtoa_r+0x2d0>)
 800681c:	bfb8      	it	lt
 800681e:	f8c8 2000 	strlt.w	r2, [r8]
 8006822:	ea33 0309 	bics.w	r3, r3, r9
 8006826:	d119      	bne.n	800685c <_dtoa_r+0xac>
 8006828:	f242 730f 	movw	r3, #9999	; 0x270f
 800682c:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800682e:	6013      	str	r3, [r2, #0]
 8006830:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006834:	4333      	orrs	r3, r6
 8006836:	f000 857f 	beq.w	8007338 <_dtoa_r+0xb88>
 800683a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800683c:	b953      	cbnz	r3, 8006854 <_dtoa_r+0xa4>
 800683e:	4b91      	ldr	r3, [pc, #580]	; (8006a84 <_dtoa_r+0x2d4>)
 8006840:	e022      	b.n	8006888 <_dtoa_r+0xd8>
 8006842:	4b91      	ldr	r3, [pc, #580]	; (8006a88 <_dtoa_r+0x2d8>)
 8006844:	9303      	str	r3, [sp, #12]
 8006846:	3308      	adds	r3, #8
 8006848:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800684a:	6013      	str	r3, [r2, #0]
 800684c:	9803      	ldr	r0, [sp, #12]
 800684e:	b019      	add	sp, #100	; 0x64
 8006850:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006854:	4b8b      	ldr	r3, [pc, #556]	; (8006a84 <_dtoa_r+0x2d4>)
 8006856:	9303      	str	r3, [sp, #12]
 8006858:	3303      	adds	r3, #3
 800685a:	e7f5      	b.n	8006848 <_dtoa_r+0x98>
 800685c:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8006860:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8006864:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006868:	2200      	movs	r2, #0
 800686a:	2300      	movs	r3, #0
 800686c:	f7fa f89c 	bl	80009a8 <__aeabi_dcmpeq>
 8006870:	4680      	mov	r8, r0
 8006872:	b158      	cbz	r0, 800688c <_dtoa_r+0xdc>
 8006874:	2301      	movs	r3, #1
 8006876:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8006878:	6013      	str	r3, [r2, #0]
 800687a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800687c:	2b00      	cmp	r3, #0
 800687e:	f000 8558 	beq.w	8007332 <_dtoa_r+0xb82>
 8006882:	4882      	ldr	r0, [pc, #520]	; (8006a8c <_dtoa_r+0x2dc>)
 8006884:	6018      	str	r0, [r3, #0]
 8006886:	1e43      	subs	r3, r0, #1
 8006888:	9303      	str	r3, [sp, #12]
 800688a:	e7df      	b.n	800684c <_dtoa_r+0x9c>
 800688c:	ab16      	add	r3, sp, #88	; 0x58
 800688e:	9301      	str	r3, [sp, #4]
 8006890:	ab17      	add	r3, sp, #92	; 0x5c
 8006892:	9300      	str	r3, [sp, #0]
 8006894:	4628      	mov	r0, r5
 8006896:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800689a:	f001 fd13 	bl	80082c4 <__d2b>
 800689e:	f3c9 540a 	ubfx	r4, r9, #20, #11
 80068a2:	4683      	mov	fp, r0
 80068a4:	2c00      	cmp	r4, #0
 80068a6:	d07f      	beq.n	80069a8 <_dtoa_r+0x1f8>
 80068a8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80068ac:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80068ae:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 80068b2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80068b6:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 80068ba:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 80068be:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 80068c2:	2200      	movs	r2, #0
 80068c4:	4b72      	ldr	r3, [pc, #456]	; (8006a90 <_dtoa_r+0x2e0>)
 80068c6:	f7f9 fc4f 	bl	8000168 <__aeabi_dsub>
 80068ca:	a365      	add	r3, pc, #404	; (adr r3, 8006a60 <_dtoa_r+0x2b0>)
 80068cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068d0:	f7f9 fe02 	bl	80004d8 <__aeabi_dmul>
 80068d4:	a364      	add	r3, pc, #400	; (adr r3, 8006a68 <_dtoa_r+0x2b8>)
 80068d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068da:	f7f9 fc47 	bl	800016c <__adddf3>
 80068de:	4606      	mov	r6, r0
 80068e0:	4620      	mov	r0, r4
 80068e2:	460f      	mov	r7, r1
 80068e4:	f7f9 fd8e 	bl	8000404 <__aeabi_i2d>
 80068e8:	a361      	add	r3, pc, #388	; (adr r3, 8006a70 <_dtoa_r+0x2c0>)
 80068ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068ee:	f7f9 fdf3 	bl	80004d8 <__aeabi_dmul>
 80068f2:	4602      	mov	r2, r0
 80068f4:	460b      	mov	r3, r1
 80068f6:	4630      	mov	r0, r6
 80068f8:	4639      	mov	r1, r7
 80068fa:	f7f9 fc37 	bl	800016c <__adddf3>
 80068fe:	4606      	mov	r6, r0
 8006900:	460f      	mov	r7, r1
 8006902:	f7fa f899 	bl	8000a38 <__aeabi_d2iz>
 8006906:	2200      	movs	r2, #0
 8006908:	4682      	mov	sl, r0
 800690a:	2300      	movs	r3, #0
 800690c:	4630      	mov	r0, r6
 800690e:	4639      	mov	r1, r7
 8006910:	f7fa f854 	bl	80009bc <__aeabi_dcmplt>
 8006914:	b148      	cbz	r0, 800692a <_dtoa_r+0x17a>
 8006916:	4650      	mov	r0, sl
 8006918:	f7f9 fd74 	bl	8000404 <__aeabi_i2d>
 800691c:	4632      	mov	r2, r6
 800691e:	463b      	mov	r3, r7
 8006920:	f7fa f842 	bl	80009a8 <__aeabi_dcmpeq>
 8006924:	b908      	cbnz	r0, 800692a <_dtoa_r+0x17a>
 8006926:	f10a 3aff 	add.w	sl, sl, #4294967295
 800692a:	f1ba 0f16 	cmp.w	sl, #22
 800692e:	d858      	bhi.n	80069e2 <_dtoa_r+0x232>
 8006930:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006934:	4b57      	ldr	r3, [pc, #348]	; (8006a94 <_dtoa_r+0x2e4>)
 8006936:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800693a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800693e:	f7fa f83d 	bl	80009bc <__aeabi_dcmplt>
 8006942:	2800      	cmp	r0, #0
 8006944:	d04f      	beq.n	80069e6 <_dtoa_r+0x236>
 8006946:	2300      	movs	r3, #0
 8006948:	f10a 3aff 	add.w	sl, sl, #4294967295
 800694c:	930f      	str	r3, [sp, #60]	; 0x3c
 800694e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8006950:	1b1c      	subs	r4, r3, r4
 8006952:	1e63      	subs	r3, r4, #1
 8006954:	9309      	str	r3, [sp, #36]	; 0x24
 8006956:	bf49      	itett	mi
 8006958:	f1c4 0301 	rsbmi	r3, r4, #1
 800695c:	2300      	movpl	r3, #0
 800695e:	9306      	strmi	r3, [sp, #24]
 8006960:	2300      	movmi	r3, #0
 8006962:	bf54      	ite	pl
 8006964:	9306      	strpl	r3, [sp, #24]
 8006966:	9309      	strmi	r3, [sp, #36]	; 0x24
 8006968:	f1ba 0f00 	cmp.w	sl, #0
 800696c:	db3d      	blt.n	80069ea <_dtoa_r+0x23a>
 800696e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006970:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8006974:	4453      	add	r3, sl
 8006976:	9309      	str	r3, [sp, #36]	; 0x24
 8006978:	2300      	movs	r3, #0
 800697a:	930a      	str	r3, [sp, #40]	; 0x28
 800697c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800697e:	2b09      	cmp	r3, #9
 8006980:	f200 808c 	bhi.w	8006a9c <_dtoa_r+0x2ec>
 8006984:	2b05      	cmp	r3, #5
 8006986:	bfc4      	itt	gt
 8006988:	3b04      	subgt	r3, #4
 800698a:	9322      	strgt	r3, [sp, #136]	; 0x88
 800698c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800698e:	bfc8      	it	gt
 8006990:	2400      	movgt	r4, #0
 8006992:	f1a3 0302 	sub.w	r3, r3, #2
 8006996:	bfd8      	it	le
 8006998:	2401      	movle	r4, #1
 800699a:	2b03      	cmp	r3, #3
 800699c:	f200 808a 	bhi.w	8006ab4 <_dtoa_r+0x304>
 80069a0:	e8df f003 	tbb	[pc, r3]
 80069a4:	5b4d4f2d 	.word	0x5b4d4f2d
 80069a8:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 80069ac:	441c      	add	r4, r3
 80069ae:	f204 4332 	addw	r3, r4, #1074	; 0x432
 80069b2:	2b20      	cmp	r3, #32
 80069b4:	bfc3      	ittte	gt
 80069b6:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80069ba:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 80069be:	fa09 f303 	lslgt.w	r3, r9, r3
 80069c2:	f1c3 0320 	rsble	r3, r3, #32
 80069c6:	bfc6      	itte	gt
 80069c8:	fa26 f000 	lsrgt.w	r0, r6, r0
 80069cc:	4318      	orrgt	r0, r3
 80069ce:	fa06 f003 	lslle.w	r0, r6, r3
 80069d2:	f7f9 fd07 	bl	80003e4 <__aeabi_ui2d>
 80069d6:	2301      	movs	r3, #1
 80069d8:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 80069dc:	3c01      	subs	r4, #1
 80069de:	9313      	str	r3, [sp, #76]	; 0x4c
 80069e0:	e76f      	b.n	80068c2 <_dtoa_r+0x112>
 80069e2:	2301      	movs	r3, #1
 80069e4:	e7b2      	b.n	800694c <_dtoa_r+0x19c>
 80069e6:	900f      	str	r0, [sp, #60]	; 0x3c
 80069e8:	e7b1      	b.n	800694e <_dtoa_r+0x19e>
 80069ea:	9b06      	ldr	r3, [sp, #24]
 80069ec:	eba3 030a 	sub.w	r3, r3, sl
 80069f0:	9306      	str	r3, [sp, #24]
 80069f2:	f1ca 0300 	rsb	r3, sl, #0
 80069f6:	930a      	str	r3, [sp, #40]	; 0x28
 80069f8:	2300      	movs	r3, #0
 80069fa:	930e      	str	r3, [sp, #56]	; 0x38
 80069fc:	e7be      	b.n	800697c <_dtoa_r+0x1cc>
 80069fe:	2300      	movs	r3, #0
 8006a00:	930b      	str	r3, [sp, #44]	; 0x2c
 8006a02:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	dc58      	bgt.n	8006aba <_dtoa_r+0x30a>
 8006a08:	f04f 0901 	mov.w	r9, #1
 8006a0c:	464b      	mov	r3, r9
 8006a0e:	f8cd 9020 	str.w	r9, [sp, #32]
 8006a12:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 8006a16:	2200      	movs	r2, #0
 8006a18:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8006a1a:	6042      	str	r2, [r0, #4]
 8006a1c:	2204      	movs	r2, #4
 8006a1e:	f102 0614 	add.w	r6, r2, #20
 8006a22:	429e      	cmp	r6, r3
 8006a24:	6841      	ldr	r1, [r0, #4]
 8006a26:	d94e      	bls.n	8006ac6 <_dtoa_r+0x316>
 8006a28:	4628      	mov	r0, r5
 8006a2a:	f001 f861 	bl	8007af0 <_Balloc>
 8006a2e:	9003      	str	r0, [sp, #12]
 8006a30:	2800      	cmp	r0, #0
 8006a32:	d14c      	bne.n	8006ace <_dtoa_r+0x31e>
 8006a34:	4602      	mov	r2, r0
 8006a36:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8006a3a:	4b17      	ldr	r3, [pc, #92]	; (8006a98 <_dtoa_r+0x2e8>)
 8006a3c:	e6cc      	b.n	80067d8 <_dtoa_r+0x28>
 8006a3e:	2301      	movs	r3, #1
 8006a40:	e7de      	b.n	8006a00 <_dtoa_r+0x250>
 8006a42:	2300      	movs	r3, #0
 8006a44:	930b      	str	r3, [sp, #44]	; 0x2c
 8006a46:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006a48:	eb0a 0903 	add.w	r9, sl, r3
 8006a4c:	f109 0301 	add.w	r3, r9, #1
 8006a50:	2b01      	cmp	r3, #1
 8006a52:	9308      	str	r3, [sp, #32]
 8006a54:	bfb8      	it	lt
 8006a56:	2301      	movlt	r3, #1
 8006a58:	e7dd      	b.n	8006a16 <_dtoa_r+0x266>
 8006a5a:	2301      	movs	r3, #1
 8006a5c:	e7f2      	b.n	8006a44 <_dtoa_r+0x294>
 8006a5e:	bf00      	nop
 8006a60:	636f4361 	.word	0x636f4361
 8006a64:	3fd287a7 	.word	0x3fd287a7
 8006a68:	8b60c8b3 	.word	0x8b60c8b3
 8006a6c:	3fc68a28 	.word	0x3fc68a28
 8006a70:	509f79fb 	.word	0x509f79fb
 8006a74:	3fd34413 	.word	0x3fd34413
 8006a78:	08009eae 	.word	0x08009eae
 8006a7c:	08009ec5 	.word	0x08009ec5
 8006a80:	7ff00000 	.word	0x7ff00000
 8006a84:	08009eaa 	.word	0x08009eaa
 8006a88:	08009ea1 	.word	0x08009ea1
 8006a8c:	0800a11a 	.word	0x0800a11a
 8006a90:	3ff80000 	.word	0x3ff80000
 8006a94:	0800a030 	.word	0x0800a030
 8006a98:	08009f20 	.word	0x08009f20
 8006a9c:	2401      	movs	r4, #1
 8006a9e:	2300      	movs	r3, #0
 8006aa0:	940b      	str	r4, [sp, #44]	; 0x2c
 8006aa2:	9322      	str	r3, [sp, #136]	; 0x88
 8006aa4:	f04f 39ff 	mov.w	r9, #4294967295
 8006aa8:	2200      	movs	r2, #0
 8006aaa:	2312      	movs	r3, #18
 8006aac:	f8cd 9020 	str.w	r9, [sp, #32]
 8006ab0:	9223      	str	r2, [sp, #140]	; 0x8c
 8006ab2:	e7b0      	b.n	8006a16 <_dtoa_r+0x266>
 8006ab4:	2301      	movs	r3, #1
 8006ab6:	930b      	str	r3, [sp, #44]	; 0x2c
 8006ab8:	e7f4      	b.n	8006aa4 <_dtoa_r+0x2f4>
 8006aba:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 8006abe:	464b      	mov	r3, r9
 8006ac0:	f8cd 9020 	str.w	r9, [sp, #32]
 8006ac4:	e7a7      	b.n	8006a16 <_dtoa_r+0x266>
 8006ac6:	3101      	adds	r1, #1
 8006ac8:	6041      	str	r1, [r0, #4]
 8006aca:	0052      	lsls	r2, r2, #1
 8006acc:	e7a7      	b.n	8006a1e <_dtoa_r+0x26e>
 8006ace:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006ad0:	9a03      	ldr	r2, [sp, #12]
 8006ad2:	601a      	str	r2, [r3, #0]
 8006ad4:	9b08      	ldr	r3, [sp, #32]
 8006ad6:	2b0e      	cmp	r3, #14
 8006ad8:	f200 80a8 	bhi.w	8006c2c <_dtoa_r+0x47c>
 8006adc:	2c00      	cmp	r4, #0
 8006ade:	f000 80a5 	beq.w	8006c2c <_dtoa_r+0x47c>
 8006ae2:	f1ba 0f00 	cmp.w	sl, #0
 8006ae6:	dd34      	ble.n	8006b52 <_dtoa_r+0x3a2>
 8006ae8:	4a9a      	ldr	r2, [pc, #616]	; (8006d54 <_dtoa_r+0x5a4>)
 8006aea:	f00a 030f 	and.w	r3, sl, #15
 8006aee:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8006af2:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8006af6:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006afa:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8006afe:	ea4f 142a 	mov.w	r4, sl, asr #4
 8006b02:	d016      	beq.n	8006b32 <_dtoa_r+0x382>
 8006b04:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006b08:	4b93      	ldr	r3, [pc, #588]	; (8006d58 <_dtoa_r+0x5a8>)
 8006b0a:	2703      	movs	r7, #3
 8006b0c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006b10:	f7f9 fe0c 	bl	800072c <__aeabi_ddiv>
 8006b14:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006b18:	f004 040f 	and.w	r4, r4, #15
 8006b1c:	4e8e      	ldr	r6, [pc, #568]	; (8006d58 <_dtoa_r+0x5a8>)
 8006b1e:	b954      	cbnz	r4, 8006b36 <_dtoa_r+0x386>
 8006b20:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006b24:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006b28:	f7f9 fe00 	bl	800072c <__aeabi_ddiv>
 8006b2c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006b30:	e029      	b.n	8006b86 <_dtoa_r+0x3d6>
 8006b32:	2702      	movs	r7, #2
 8006b34:	e7f2      	b.n	8006b1c <_dtoa_r+0x36c>
 8006b36:	07e1      	lsls	r1, r4, #31
 8006b38:	d508      	bpl.n	8006b4c <_dtoa_r+0x39c>
 8006b3a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006b3e:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006b42:	f7f9 fcc9 	bl	80004d8 <__aeabi_dmul>
 8006b46:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006b4a:	3701      	adds	r7, #1
 8006b4c:	1064      	asrs	r4, r4, #1
 8006b4e:	3608      	adds	r6, #8
 8006b50:	e7e5      	b.n	8006b1e <_dtoa_r+0x36e>
 8006b52:	f000 80a5 	beq.w	8006ca0 <_dtoa_r+0x4f0>
 8006b56:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006b5a:	f1ca 0400 	rsb	r4, sl, #0
 8006b5e:	4b7d      	ldr	r3, [pc, #500]	; (8006d54 <_dtoa_r+0x5a4>)
 8006b60:	f004 020f 	and.w	r2, r4, #15
 8006b64:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006b68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b6c:	f7f9 fcb4 	bl	80004d8 <__aeabi_dmul>
 8006b70:	2702      	movs	r7, #2
 8006b72:	2300      	movs	r3, #0
 8006b74:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006b78:	4e77      	ldr	r6, [pc, #476]	; (8006d58 <_dtoa_r+0x5a8>)
 8006b7a:	1124      	asrs	r4, r4, #4
 8006b7c:	2c00      	cmp	r4, #0
 8006b7e:	f040 8084 	bne.w	8006c8a <_dtoa_r+0x4da>
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d1d2      	bne.n	8006b2c <_dtoa_r+0x37c>
 8006b86:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	f000 808b 	beq.w	8006ca4 <_dtoa_r+0x4f4>
 8006b8e:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8006b92:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8006b96:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006b9a:	2200      	movs	r2, #0
 8006b9c:	4b6f      	ldr	r3, [pc, #444]	; (8006d5c <_dtoa_r+0x5ac>)
 8006b9e:	f7f9 ff0d 	bl	80009bc <__aeabi_dcmplt>
 8006ba2:	2800      	cmp	r0, #0
 8006ba4:	d07e      	beq.n	8006ca4 <_dtoa_r+0x4f4>
 8006ba6:	9b08      	ldr	r3, [sp, #32]
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d07b      	beq.n	8006ca4 <_dtoa_r+0x4f4>
 8006bac:	f1b9 0f00 	cmp.w	r9, #0
 8006bb0:	dd38      	ble.n	8006c24 <_dtoa_r+0x474>
 8006bb2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006bb6:	2200      	movs	r2, #0
 8006bb8:	4b69      	ldr	r3, [pc, #420]	; (8006d60 <_dtoa_r+0x5b0>)
 8006bba:	f7f9 fc8d 	bl	80004d8 <__aeabi_dmul>
 8006bbe:	464c      	mov	r4, r9
 8006bc0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006bc4:	f10a 38ff 	add.w	r8, sl, #4294967295
 8006bc8:	3701      	adds	r7, #1
 8006bca:	4638      	mov	r0, r7
 8006bcc:	f7f9 fc1a 	bl	8000404 <__aeabi_i2d>
 8006bd0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006bd4:	f7f9 fc80 	bl	80004d8 <__aeabi_dmul>
 8006bd8:	2200      	movs	r2, #0
 8006bda:	4b62      	ldr	r3, [pc, #392]	; (8006d64 <_dtoa_r+0x5b4>)
 8006bdc:	f7f9 fac6 	bl	800016c <__adddf3>
 8006be0:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8006be4:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006be8:	9611      	str	r6, [sp, #68]	; 0x44
 8006bea:	2c00      	cmp	r4, #0
 8006bec:	d15d      	bne.n	8006caa <_dtoa_r+0x4fa>
 8006bee:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006bf2:	2200      	movs	r2, #0
 8006bf4:	4b5c      	ldr	r3, [pc, #368]	; (8006d68 <_dtoa_r+0x5b8>)
 8006bf6:	f7f9 fab7 	bl	8000168 <__aeabi_dsub>
 8006bfa:	4602      	mov	r2, r0
 8006bfc:	460b      	mov	r3, r1
 8006bfe:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006c02:	4633      	mov	r3, r6
 8006c04:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006c06:	f7f9 fef7 	bl	80009f8 <__aeabi_dcmpgt>
 8006c0a:	2800      	cmp	r0, #0
 8006c0c:	f040 829c 	bne.w	8007148 <_dtoa_r+0x998>
 8006c10:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006c14:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006c16:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8006c1a:	f7f9 fecf 	bl	80009bc <__aeabi_dcmplt>
 8006c1e:	2800      	cmp	r0, #0
 8006c20:	f040 8290 	bne.w	8007144 <_dtoa_r+0x994>
 8006c24:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8006c28:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8006c2c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	f2c0 8152 	blt.w	8006ed8 <_dtoa_r+0x728>
 8006c34:	f1ba 0f0e 	cmp.w	sl, #14
 8006c38:	f300 814e 	bgt.w	8006ed8 <_dtoa_r+0x728>
 8006c3c:	4b45      	ldr	r3, [pc, #276]	; (8006d54 <_dtoa_r+0x5a4>)
 8006c3e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8006c42:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006c46:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8006c4a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	f280 80db 	bge.w	8006e08 <_dtoa_r+0x658>
 8006c52:	9b08      	ldr	r3, [sp, #32]
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	f300 80d7 	bgt.w	8006e08 <_dtoa_r+0x658>
 8006c5a:	f040 8272 	bne.w	8007142 <_dtoa_r+0x992>
 8006c5e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006c62:	2200      	movs	r2, #0
 8006c64:	4b40      	ldr	r3, [pc, #256]	; (8006d68 <_dtoa_r+0x5b8>)
 8006c66:	f7f9 fc37 	bl	80004d8 <__aeabi_dmul>
 8006c6a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006c6e:	f7f9 feb9 	bl	80009e4 <__aeabi_dcmpge>
 8006c72:	9c08      	ldr	r4, [sp, #32]
 8006c74:	4626      	mov	r6, r4
 8006c76:	2800      	cmp	r0, #0
 8006c78:	f040 8248 	bne.w	800710c <_dtoa_r+0x95c>
 8006c7c:	2331      	movs	r3, #49	; 0x31
 8006c7e:	9f03      	ldr	r7, [sp, #12]
 8006c80:	f10a 0a01 	add.w	sl, sl, #1
 8006c84:	f807 3b01 	strb.w	r3, [r7], #1
 8006c88:	e244      	b.n	8007114 <_dtoa_r+0x964>
 8006c8a:	07e2      	lsls	r2, r4, #31
 8006c8c:	d505      	bpl.n	8006c9a <_dtoa_r+0x4ea>
 8006c8e:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006c92:	f7f9 fc21 	bl	80004d8 <__aeabi_dmul>
 8006c96:	2301      	movs	r3, #1
 8006c98:	3701      	adds	r7, #1
 8006c9a:	1064      	asrs	r4, r4, #1
 8006c9c:	3608      	adds	r6, #8
 8006c9e:	e76d      	b.n	8006b7c <_dtoa_r+0x3cc>
 8006ca0:	2702      	movs	r7, #2
 8006ca2:	e770      	b.n	8006b86 <_dtoa_r+0x3d6>
 8006ca4:	46d0      	mov	r8, sl
 8006ca6:	9c08      	ldr	r4, [sp, #32]
 8006ca8:	e78f      	b.n	8006bca <_dtoa_r+0x41a>
 8006caa:	9903      	ldr	r1, [sp, #12]
 8006cac:	4b29      	ldr	r3, [pc, #164]	; (8006d54 <_dtoa_r+0x5a4>)
 8006cae:	4421      	add	r1, r4
 8006cb0:	9112      	str	r1, [sp, #72]	; 0x48
 8006cb2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006cb4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006cb8:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8006cbc:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006cc0:	2900      	cmp	r1, #0
 8006cc2:	d055      	beq.n	8006d70 <_dtoa_r+0x5c0>
 8006cc4:	2000      	movs	r0, #0
 8006cc6:	4929      	ldr	r1, [pc, #164]	; (8006d6c <_dtoa_r+0x5bc>)
 8006cc8:	f7f9 fd30 	bl	800072c <__aeabi_ddiv>
 8006ccc:	463b      	mov	r3, r7
 8006cce:	4632      	mov	r2, r6
 8006cd0:	f7f9 fa4a 	bl	8000168 <__aeabi_dsub>
 8006cd4:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006cd8:	9f03      	ldr	r7, [sp, #12]
 8006cda:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006cde:	f7f9 feab 	bl	8000a38 <__aeabi_d2iz>
 8006ce2:	4604      	mov	r4, r0
 8006ce4:	f7f9 fb8e 	bl	8000404 <__aeabi_i2d>
 8006ce8:	4602      	mov	r2, r0
 8006cea:	460b      	mov	r3, r1
 8006cec:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006cf0:	f7f9 fa3a 	bl	8000168 <__aeabi_dsub>
 8006cf4:	4602      	mov	r2, r0
 8006cf6:	460b      	mov	r3, r1
 8006cf8:	3430      	adds	r4, #48	; 0x30
 8006cfa:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006cfe:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006d02:	f807 4b01 	strb.w	r4, [r7], #1
 8006d06:	f7f9 fe59 	bl	80009bc <__aeabi_dcmplt>
 8006d0a:	2800      	cmp	r0, #0
 8006d0c:	d174      	bne.n	8006df8 <_dtoa_r+0x648>
 8006d0e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006d12:	2000      	movs	r0, #0
 8006d14:	4911      	ldr	r1, [pc, #68]	; (8006d5c <_dtoa_r+0x5ac>)
 8006d16:	f7f9 fa27 	bl	8000168 <__aeabi_dsub>
 8006d1a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006d1e:	f7f9 fe4d 	bl	80009bc <__aeabi_dcmplt>
 8006d22:	2800      	cmp	r0, #0
 8006d24:	f040 80b7 	bne.w	8006e96 <_dtoa_r+0x6e6>
 8006d28:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006d2a:	429f      	cmp	r7, r3
 8006d2c:	f43f af7a 	beq.w	8006c24 <_dtoa_r+0x474>
 8006d30:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006d34:	2200      	movs	r2, #0
 8006d36:	4b0a      	ldr	r3, [pc, #40]	; (8006d60 <_dtoa_r+0x5b0>)
 8006d38:	f7f9 fbce 	bl	80004d8 <__aeabi_dmul>
 8006d3c:	2200      	movs	r2, #0
 8006d3e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006d42:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006d46:	4b06      	ldr	r3, [pc, #24]	; (8006d60 <_dtoa_r+0x5b0>)
 8006d48:	f7f9 fbc6 	bl	80004d8 <__aeabi_dmul>
 8006d4c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006d50:	e7c3      	b.n	8006cda <_dtoa_r+0x52a>
 8006d52:	bf00      	nop
 8006d54:	0800a030 	.word	0x0800a030
 8006d58:	0800a008 	.word	0x0800a008
 8006d5c:	3ff00000 	.word	0x3ff00000
 8006d60:	40240000 	.word	0x40240000
 8006d64:	401c0000 	.word	0x401c0000
 8006d68:	40140000 	.word	0x40140000
 8006d6c:	3fe00000 	.word	0x3fe00000
 8006d70:	4630      	mov	r0, r6
 8006d72:	4639      	mov	r1, r7
 8006d74:	f7f9 fbb0 	bl	80004d8 <__aeabi_dmul>
 8006d78:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006d7a:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006d7e:	9c03      	ldr	r4, [sp, #12]
 8006d80:	9314      	str	r3, [sp, #80]	; 0x50
 8006d82:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006d86:	f7f9 fe57 	bl	8000a38 <__aeabi_d2iz>
 8006d8a:	9015      	str	r0, [sp, #84]	; 0x54
 8006d8c:	f7f9 fb3a 	bl	8000404 <__aeabi_i2d>
 8006d90:	4602      	mov	r2, r0
 8006d92:	460b      	mov	r3, r1
 8006d94:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006d98:	f7f9 f9e6 	bl	8000168 <__aeabi_dsub>
 8006d9c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006d9e:	4606      	mov	r6, r0
 8006da0:	3330      	adds	r3, #48	; 0x30
 8006da2:	f804 3b01 	strb.w	r3, [r4], #1
 8006da6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006da8:	460f      	mov	r7, r1
 8006daa:	429c      	cmp	r4, r3
 8006dac:	f04f 0200 	mov.w	r2, #0
 8006db0:	d124      	bne.n	8006dfc <_dtoa_r+0x64c>
 8006db2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006db6:	4bb0      	ldr	r3, [pc, #704]	; (8007078 <_dtoa_r+0x8c8>)
 8006db8:	f7f9 f9d8 	bl	800016c <__adddf3>
 8006dbc:	4602      	mov	r2, r0
 8006dbe:	460b      	mov	r3, r1
 8006dc0:	4630      	mov	r0, r6
 8006dc2:	4639      	mov	r1, r7
 8006dc4:	f7f9 fe18 	bl	80009f8 <__aeabi_dcmpgt>
 8006dc8:	2800      	cmp	r0, #0
 8006dca:	d163      	bne.n	8006e94 <_dtoa_r+0x6e4>
 8006dcc:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006dd0:	2000      	movs	r0, #0
 8006dd2:	49a9      	ldr	r1, [pc, #676]	; (8007078 <_dtoa_r+0x8c8>)
 8006dd4:	f7f9 f9c8 	bl	8000168 <__aeabi_dsub>
 8006dd8:	4602      	mov	r2, r0
 8006dda:	460b      	mov	r3, r1
 8006ddc:	4630      	mov	r0, r6
 8006dde:	4639      	mov	r1, r7
 8006de0:	f7f9 fdec 	bl	80009bc <__aeabi_dcmplt>
 8006de4:	2800      	cmp	r0, #0
 8006de6:	f43f af1d 	beq.w	8006c24 <_dtoa_r+0x474>
 8006dea:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8006dec:	1e7b      	subs	r3, r7, #1
 8006dee:	9314      	str	r3, [sp, #80]	; 0x50
 8006df0:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8006df4:	2b30      	cmp	r3, #48	; 0x30
 8006df6:	d0f8      	beq.n	8006dea <_dtoa_r+0x63a>
 8006df8:	46c2      	mov	sl, r8
 8006dfa:	e03b      	b.n	8006e74 <_dtoa_r+0x6c4>
 8006dfc:	4b9f      	ldr	r3, [pc, #636]	; (800707c <_dtoa_r+0x8cc>)
 8006dfe:	f7f9 fb6b 	bl	80004d8 <__aeabi_dmul>
 8006e02:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006e06:	e7bc      	b.n	8006d82 <_dtoa_r+0x5d2>
 8006e08:	9f03      	ldr	r7, [sp, #12]
 8006e0a:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8006e0e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006e12:	4640      	mov	r0, r8
 8006e14:	4649      	mov	r1, r9
 8006e16:	f7f9 fc89 	bl	800072c <__aeabi_ddiv>
 8006e1a:	f7f9 fe0d 	bl	8000a38 <__aeabi_d2iz>
 8006e1e:	4604      	mov	r4, r0
 8006e20:	f7f9 faf0 	bl	8000404 <__aeabi_i2d>
 8006e24:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006e28:	f7f9 fb56 	bl	80004d8 <__aeabi_dmul>
 8006e2c:	4602      	mov	r2, r0
 8006e2e:	460b      	mov	r3, r1
 8006e30:	4640      	mov	r0, r8
 8006e32:	4649      	mov	r1, r9
 8006e34:	f7f9 f998 	bl	8000168 <__aeabi_dsub>
 8006e38:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8006e3c:	f807 6b01 	strb.w	r6, [r7], #1
 8006e40:	9e03      	ldr	r6, [sp, #12]
 8006e42:	f8dd c020 	ldr.w	ip, [sp, #32]
 8006e46:	1bbe      	subs	r6, r7, r6
 8006e48:	45b4      	cmp	ip, r6
 8006e4a:	4602      	mov	r2, r0
 8006e4c:	460b      	mov	r3, r1
 8006e4e:	d136      	bne.n	8006ebe <_dtoa_r+0x70e>
 8006e50:	f7f9 f98c 	bl	800016c <__adddf3>
 8006e54:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006e58:	4680      	mov	r8, r0
 8006e5a:	4689      	mov	r9, r1
 8006e5c:	f7f9 fdcc 	bl	80009f8 <__aeabi_dcmpgt>
 8006e60:	bb58      	cbnz	r0, 8006eba <_dtoa_r+0x70a>
 8006e62:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006e66:	4640      	mov	r0, r8
 8006e68:	4649      	mov	r1, r9
 8006e6a:	f7f9 fd9d 	bl	80009a8 <__aeabi_dcmpeq>
 8006e6e:	b108      	cbz	r0, 8006e74 <_dtoa_r+0x6c4>
 8006e70:	07e1      	lsls	r1, r4, #31
 8006e72:	d422      	bmi.n	8006eba <_dtoa_r+0x70a>
 8006e74:	4628      	mov	r0, r5
 8006e76:	4659      	mov	r1, fp
 8006e78:	f000 fe7a 	bl	8007b70 <_Bfree>
 8006e7c:	2300      	movs	r3, #0
 8006e7e:	703b      	strb	r3, [r7, #0]
 8006e80:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8006e82:	f10a 0001 	add.w	r0, sl, #1
 8006e86:	6018      	str	r0, [r3, #0]
 8006e88:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	f43f acde 	beq.w	800684c <_dtoa_r+0x9c>
 8006e90:	601f      	str	r7, [r3, #0]
 8006e92:	e4db      	b.n	800684c <_dtoa_r+0x9c>
 8006e94:	4627      	mov	r7, r4
 8006e96:	463b      	mov	r3, r7
 8006e98:	461f      	mov	r7, r3
 8006e9a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006e9e:	2a39      	cmp	r2, #57	; 0x39
 8006ea0:	d107      	bne.n	8006eb2 <_dtoa_r+0x702>
 8006ea2:	9a03      	ldr	r2, [sp, #12]
 8006ea4:	429a      	cmp	r2, r3
 8006ea6:	d1f7      	bne.n	8006e98 <_dtoa_r+0x6e8>
 8006ea8:	2230      	movs	r2, #48	; 0x30
 8006eaa:	9903      	ldr	r1, [sp, #12]
 8006eac:	f108 0801 	add.w	r8, r8, #1
 8006eb0:	700a      	strb	r2, [r1, #0]
 8006eb2:	781a      	ldrb	r2, [r3, #0]
 8006eb4:	3201      	adds	r2, #1
 8006eb6:	701a      	strb	r2, [r3, #0]
 8006eb8:	e79e      	b.n	8006df8 <_dtoa_r+0x648>
 8006eba:	46d0      	mov	r8, sl
 8006ebc:	e7eb      	b.n	8006e96 <_dtoa_r+0x6e6>
 8006ebe:	2200      	movs	r2, #0
 8006ec0:	4b6e      	ldr	r3, [pc, #440]	; (800707c <_dtoa_r+0x8cc>)
 8006ec2:	f7f9 fb09 	bl	80004d8 <__aeabi_dmul>
 8006ec6:	2200      	movs	r2, #0
 8006ec8:	2300      	movs	r3, #0
 8006eca:	4680      	mov	r8, r0
 8006ecc:	4689      	mov	r9, r1
 8006ece:	f7f9 fd6b 	bl	80009a8 <__aeabi_dcmpeq>
 8006ed2:	2800      	cmp	r0, #0
 8006ed4:	d09b      	beq.n	8006e0e <_dtoa_r+0x65e>
 8006ed6:	e7cd      	b.n	8006e74 <_dtoa_r+0x6c4>
 8006ed8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006eda:	2a00      	cmp	r2, #0
 8006edc:	f000 80d0 	beq.w	8007080 <_dtoa_r+0x8d0>
 8006ee0:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8006ee2:	2a01      	cmp	r2, #1
 8006ee4:	f300 80ae 	bgt.w	8007044 <_dtoa_r+0x894>
 8006ee8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8006eea:	2a00      	cmp	r2, #0
 8006eec:	f000 80a6 	beq.w	800703c <_dtoa_r+0x88c>
 8006ef0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006ef4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8006ef6:	9f06      	ldr	r7, [sp, #24]
 8006ef8:	9a06      	ldr	r2, [sp, #24]
 8006efa:	2101      	movs	r1, #1
 8006efc:	441a      	add	r2, r3
 8006efe:	9206      	str	r2, [sp, #24]
 8006f00:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006f02:	4628      	mov	r0, r5
 8006f04:	441a      	add	r2, r3
 8006f06:	9209      	str	r2, [sp, #36]	; 0x24
 8006f08:	f000 ff32 	bl	8007d70 <__i2b>
 8006f0c:	4606      	mov	r6, r0
 8006f0e:	2f00      	cmp	r7, #0
 8006f10:	dd0c      	ble.n	8006f2c <_dtoa_r+0x77c>
 8006f12:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	dd09      	ble.n	8006f2c <_dtoa_r+0x77c>
 8006f18:	42bb      	cmp	r3, r7
 8006f1a:	bfa8      	it	ge
 8006f1c:	463b      	movge	r3, r7
 8006f1e:	9a06      	ldr	r2, [sp, #24]
 8006f20:	1aff      	subs	r7, r7, r3
 8006f22:	1ad2      	subs	r2, r2, r3
 8006f24:	9206      	str	r2, [sp, #24]
 8006f26:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006f28:	1ad3      	subs	r3, r2, r3
 8006f2a:	9309      	str	r3, [sp, #36]	; 0x24
 8006f2c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006f2e:	b1f3      	cbz	r3, 8006f6e <_dtoa_r+0x7be>
 8006f30:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	f000 80a8 	beq.w	8007088 <_dtoa_r+0x8d8>
 8006f38:	2c00      	cmp	r4, #0
 8006f3a:	dd10      	ble.n	8006f5e <_dtoa_r+0x7ae>
 8006f3c:	4631      	mov	r1, r6
 8006f3e:	4622      	mov	r2, r4
 8006f40:	4628      	mov	r0, r5
 8006f42:	f000 ffd3 	bl	8007eec <__pow5mult>
 8006f46:	465a      	mov	r2, fp
 8006f48:	4601      	mov	r1, r0
 8006f4a:	4606      	mov	r6, r0
 8006f4c:	4628      	mov	r0, r5
 8006f4e:	f000 ff25 	bl	8007d9c <__multiply>
 8006f52:	4680      	mov	r8, r0
 8006f54:	4659      	mov	r1, fp
 8006f56:	4628      	mov	r0, r5
 8006f58:	f000 fe0a 	bl	8007b70 <_Bfree>
 8006f5c:	46c3      	mov	fp, r8
 8006f5e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006f60:	1b1a      	subs	r2, r3, r4
 8006f62:	d004      	beq.n	8006f6e <_dtoa_r+0x7be>
 8006f64:	4659      	mov	r1, fp
 8006f66:	4628      	mov	r0, r5
 8006f68:	f000 ffc0 	bl	8007eec <__pow5mult>
 8006f6c:	4683      	mov	fp, r0
 8006f6e:	2101      	movs	r1, #1
 8006f70:	4628      	mov	r0, r5
 8006f72:	f000 fefd 	bl	8007d70 <__i2b>
 8006f76:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006f78:	4604      	mov	r4, r0
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	f340 8086 	ble.w	800708c <_dtoa_r+0x8dc>
 8006f80:	461a      	mov	r2, r3
 8006f82:	4601      	mov	r1, r0
 8006f84:	4628      	mov	r0, r5
 8006f86:	f000 ffb1 	bl	8007eec <__pow5mult>
 8006f8a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006f8c:	4604      	mov	r4, r0
 8006f8e:	2b01      	cmp	r3, #1
 8006f90:	dd7f      	ble.n	8007092 <_dtoa_r+0x8e2>
 8006f92:	f04f 0800 	mov.w	r8, #0
 8006f96:	6923      	ldr	r3, [r4, #16]
 8006f98:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8006f9c:	6918      	ldr	r0, [r3, #16]
 8006f9e:	f000 fe99 	bl	8007cd4 <__hi0bits>
 8006fa2:	f1c0 0020 	rsb	r0, r0, #32
 8006fa6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006fa8:	4418      	add	r0, r3
 8006faa:	f010 001f 	ands.w	r0, r0, #31
 8006fae:	f000 8092 	beq.w	80070d6 <_dtoa_r+0x926>
 8006fb2:	f1c0 0320 	rsb	r3, r0, #32
 8006fb6:	2b04      	cmp	r3, #4
 8006fb8:	f340 808a 	ble.w	80070d0 <_dtoa_r+0x920>
 8006fbc:	f1c0 001c 	rsb	r0, r0, #28
 8006fc0:	9b06      	ldr	r3, [sp, #24]
 8006fc2:	4407      	add	r7, r0
 8006fc4:	4403      	add	r3, r0
 8006fc6:	9306      	str	r3, [sp, #24]
 8006fc8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006fca:	4403      	add	r3, r0
 8006fcc:	9309      	str	r3, [sp, #36]	; 0x24
 8006fce:	9b06      	ldr	r3, [sp, #24]
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	dd05      	ble.n	8006fe0 <_dtoa_r+0x830>
 8006fd4:	4659      	mov	r1, fp
 8006fd6:	461a      	mov	r2, r3
 8006fd8:	4628      	mov	r0, r5
 8006fda:	f000 ffe1 	bl	8007fa0 <__lshift>
 8006fde:	4683      	mov	fp, r0
 8006fe0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	dd05      	ble.n	8006ff2 <_dtoa_r+0x842>
 8006fe6:	4621      	mov	r1, r4
 8006fe8:	461a      	mov	r2, r3
 8006fea:	4628      	mov	r0, r5
 8006fec:	f000 ffd8 	bl	8007fa0 <__lshift>
 8006ff0:	4604      	mov	r4, r0
 8006ff2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d070      	beq.n	80070da <_dtoa_r+0x92a>
 8006ff8:	4621      	mov	r1, r4
 8006ffa:	4658      	mov	r0, fp
 8006ffc:	f001 f840 	bl	8008080 <__mcmp>
 8007000:	2800      	cmp	r0, #0
 8007002:	da6a      	bge.n	80070da <_dtoa_r+0x92a>
 8007004:	2300      	movs	r3, #0
 8007006:	4659      	mov	r1, fp
 8007008:	220a      	movs	r2, #10
 800700a:	4628      	mov	r0, r5
 800700c:	f000 fdd2 	bl	8007bb4 <__multadd>
 8007010:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007012:	4683      	mov	fp, r0
 8007014:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007018:	2b00      	cmp	r3, #0
 800701a:	f000 8194 	beq.w	8007346 <_dtoa_r+0xb96>
 800701e:	4631      	mov	r1, r6
 8007020:	2300      	movs	r3, #0
 8007022:	220a      	movs	r2, #10
 8007024:	4628      	mov	r0, r5
 8007026:	f000 fdc5 	bl	8007bb4 <__multadd>
 800702a:	f1b9 0f00 	cmp.w	r9, #0
 800702e:	4606      	mov	r6, r0
 8007030:	f300 8093 	bgt.w	800715a <_dtoa_r+0x9aa>
 8007034:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007036:	2b02      	cmp	r3, #2
 8007038:	dc57      	bgt.n	80070ea <_dtoa_r+0x93a>
 800703a:	e08e      	b.n	800715a <_dtoa_r+0x9aa>
 800703c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800703e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8007042:	e757      	b.n	8006ef4 <_dtoa_r+0x744>
 8007044:	9b08      	ldr	r3, [sp, #32]
 8007046:	1e5c      	subs	r4, r3, #1
 8007048:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800704a:	42a3      	cmp	r3, r4
 800704c:	bfb7      	itett	lt
 800704e:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8007050:	1b1c      	subge	r4, r3, r4
 8007052:	1ae2      	sublt	r2, r4, r3
 8007054:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8007056:	bfbe      	ittt	lt
 8007058:	940a      	strlt	r4, [sp, #40]	; 0x28
 800705a:	189b      	addlt	r3, r3, r2
 800705c:	930e      	strlt	r3, [sp, #56]	; 0x38
 800705e:	9b08      	ldr	r3, [sp, #32]
 8007060:	bfb8      	it	lt
 8007062:	2400      	movlt	r4, #0
 8007064:	2b00      	cmp	r3, #0
 8007066:	bfbb      	ittet	lt
 8007068:	9b06      	ldrlt	r3, [sp, #24]
 800706a:	9a08      	ldrlt	r2, [sp, #32]
 800706c:	9f06      	ldrge	r7, [sp, #24]
 800706e:	1a9f      	sublt	r7, r3, r2
 8007070:	bfac      	ite	ge
 8007072:	9b08      	ldrge	r3, [sp, #32]
 8007074:	2300      	movlt	r3, #0
 8007076:	e73f      	b.n	8006ef8 <_dtoa_r+0x748>
 8007078:	3fe00000 	.word	0x3fe00000
 800707c:	40240000 	.word	0x40240000
 8007080:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8007082:	9f06      	ldr	r7, [sp, #24]
 8007084:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8007086:	e742      	b.n	8006f0e <_dtoa_r+0x75e>
 8007088:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800708a:	e76b      	b.n	8006f64 <_dtoa_r+0x7b4>
 800708c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800708e:	2b01      	cmp	r3, #1
 8007090:	dc19      	bgt.n	80070c6 <_dtoa_r+0x916>
 8007092:	9b04      	ldr	r3, [sp, #16]
 8007094:	b9bb      	cbnz	r3, 80070c6 <_dtoa_r+0x916>
 8007096:	9b05      	ldr	r3, [sp, #20]
 8007098:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800709c:	b99b      	cbnz	r3, 80070c6 <_dtoa_r+0x916>
 800709e:	9b05      	ldr	r3, [sp, #20]
 80070a0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80070a4:	0d1b      	lsrs	r3, r3, #20
 80070a6:	051b      	lsls	r3, r3, #20
 80070a8:	b183      	cbz	r3, 80070cc <_dtoa_r+0x91c>
 80070aa:	f04f 0801 	mov.w	r8, #1
 80070ae:	9b06      	ldr	r3, [sp, #24]
 80070b0:	3301      	adds	r3, #1
 80070b2:	9306      	str	r3, [sp, #24]
 80070b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80070b6:	3301      	adds	r3, #1
 80070b8:	9309      	str	r3, [sp, #36]	; 0x24
 80070ba:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80070bc:	2b00      	cmp	r3, #0
 80070be:	f47f af6a 	bne.w	8006f96 <_dtoa_r+0x7e6>
 80070c2:	2001      	movs	r0, #1
 80070c4:	e76f      	b.n	8006fa6 <_dtoa_r+0x7f6>
 80070c6:	f04f 0800 	mov.w	r8, #0
 80070ca:	e7f6      	b.n	80070ba <_dtoa_r+0x90a>
 80070cc:	4698      	mov	r8, r3
 80070ce:	e7f4      	b.n	80070ba <_dtoa_r+0x90a>
 80070d0:	f43f af7d 	beq.w	8006fce <_dtoa_r+0x81e>
 80070d4:	4618      	mov	r0, r3
 80070d6:	301c      	adds	r0, #28
 80070d8:	e772      	b.n	8006fc0 <_dtoa_r+0x810>
 80070da:	9b08      	ldr	r3, [sp, #32]
 80070dc:	2b00      	cmp	r3, #0
 80070de:	dc36      	bgt.n	800714e <_dtoa_r+0x99e>
 80070e0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80070e2:	2b02      	cmp	r3, #2
 80070e4:	dd33      	ble.n	800714e <_dtoa_r+0x99e>
 80070e6:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80070ea:	f1b9 0f00 	cmp.w	r9, #0
 80070ee:	d10d      	bne.n	800710c <_dtoa_r+0x95c>
 80070f0:	4621      	mov	r1, r4
 80070f2:	464b      	mov	r3, r9
 80070f4:	2205      	movs	r2, #5
 80070f6:	4628      	mov	r0, r5
 80070f8:	f000 fd5c 	bl	8007bb4 <__multadd>
 80070fc:	4601      	mov	r1, r0
 80070fe:	4604      	mov	r4, r0
 8007100:	4658      	mov	r0, fp
 8007102:	f000 ffbd 	bl	8008080 <__mcmp>
 8007106:	2800      	cmp	r0, #0
 8007108:	f73f adb8 	bgt.w	8006c7c <_dtoa_r+0x4cc>
 800710c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800710e:	9f03      	ldr	r7, [sp, #12]
 8007110:	ea6f 0a03 	mvn.w	sl, r3
 8007114:	f04f 0800 	mov.w	r8, #0
 8007118:	4621      	mov	r1, r4
 800711a:	4628      	mov	r0, r5
 800711c:	f000 fd28 	bl	8007b70 <_Bfree>
 8007120:	2e00      	cmp	r6, #0
 8007122:	f43f aea7 	beq.w	8006e74 <_dtoa_r+0x6c4>
 8007126:	f1b8 0f00 	cmp.w	r8, #0
 800712a:	d005      	beq.n	8007138 <_dtoa_r+0x988>
 800712c:	45b0      	cmp	r8, r6
 800712e:	d003      	beq.n	8007138 <_dtoa_r+0x988>
 8007130:	4641      	mov	r1, r8
 8007132:	4628      	mov	r0, r5
 8007134:	f000 fd1c 	bl	8007b70 <_Bfree>
 8007138:	4631      	mov	r1, r6
 800713a:	4628      	mov	r0, r5
 800713c:	f000 fd18 	bl	8007b70 <_Bfree>
 8007140:	e698      	b.n	8006e74 <_dtoa_r+0x6c4>
 8007142:	2400      	movs	r4, #0
 8007144:	4626      	mov	r6, r4
 8007146:	e7e1      	b.n	800710c <_dtoa_r+0x95c>
 8007148:	46c2      	mov	sl, r8
 800714a:	4626      	mov	r6, r4
 800714c:	e596      	b.n	8006c7c <_dtoa_r+0x4cc>
 800714e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007150:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007154:	2b00      	cmp	r3, #0
 8007156:	f000 80fd 	beq.w	8007354 <_dtoa_r+0xba4>
 800715a:	2f00      	cmp	r7, #0
 800715c:	dd05      	ble.n	800716a <_dtoa_r+0x9ba>
 800715e:	4631      	mov	r1, r6
 8007160:	463a      	mov	r2, r7
 8007162:	4628      	mov	r0, r5
 8007164:	f000 ff1c 	bl	8007fa0 <__lshift>
 8007168:	4606      	mov	r6, r0
 800716a:	f1b8 0f00 	cmp.w	r8, #0
 800716e:	d05c      	beq.n	800722a <_dtoa_r+0xa7a>
 8007170:	4628      	mov	r0, r5
 8007172:	6871      	ldr	r1, [r6, #4]
 8007174:	f000 fcbc 	bl	8007af0 <_Balloc>
 8007178:	4607      	mov	r7, r0
 800717a:	b928      	cbnz	r0, 8007188 <_dtoa_r+0x9d8>
 800717c:	4602      	mov	r2, r0
 800717e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8007182:	4b7f      	ldr	r3, [pc, #508]	; (8007380 <_dtoa_r+0xbd0>)
 8007184:	f7ff bb28 	b.w	80067d8 <_dtoa_r+0x28>
 8007188:	6932      	ldr	r2, [r6, #16]
 800718a:	f106 010c 	add.w	r1, r6, #12
 800718e:	3202      	adds	r2, #2
 8007190:	0092      	lsls	r2, r2, #2
 8007192:	300c      	adds	r0, #12
 8007194:	f000 fc9e 	bl	8007ad4 <memcpy>
 8007198:	2201      	movs	r2, #1
 800719a:	4639      	mov	r1, r7
 800719c:	4628      	mov	r0, r5
 800719e:	f000 feff 	bl	8007fa0 <__lshift>
 80071a2:	46b0      	mov	r8, r6
 80071a4:	4606      	mov	r6, r0
 80071a6:	9b03      	ldr	r3, [sp, #12]
 80071a8:	3301      	adds	r3, #1
 80071aa:	9308      	str	r3, [sp, #32]
 80071ac:	9b03      	ldr	r3, [sp, #12]
 80071ae:	444b      	add	r3, r9
 80071b0:	930a      	str	r3, [sp, #40]	; 0x28
 80071b2:	9b04      	ldr	r3, [sp, #16]
 80071b4:	f003 0301 	and.w	r3, r3, #1
 80071b8:	9309      	str	r3, [sp, #36]	; 0x24
 80071ba:	9b08      	ldr	r3, [sp, #32]
 80071bc:	4621      	mov	r1, r4
 80071be:	3b01      	subs	r3, #1
 80071c0:	4658      	mov	r0, fp
 80071c2:	9304      	str	r3, [sp, #16]
 80071c4:	f7ff fa66 	bl	8006694 <quorem>
 80071c8:	4603      	mov	r3, r0
 80071ca:	4641      	mov	r1, r8
 80071cc:	3330      	adds	r3, #48	; 0x30
 80071ce:	9006      	str	r0, [sp, #24]
 80071d0:	4658      	mov	r0, fp
 80071d2:	930b      	str	r3, [sp, #44]	; 0x2c
 80071d4:	f000 ff54 	bl	8008080 <__mcmp>
 80071d8:	4632      	mov	r2, r6
 80071da:	4681      	mov	r9, r0
 80071dc:	4621      	mov	r1, r4
 80071de:	4628      	mov	r0, r5
 80071e0:	f000 ff6a 	bl	80080b8 <__mdiff>
 80071e4:	68c2      	ldr	r2, [r0, #12]
 80071e6:	4607      	mov	r7, r0
 80071e8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80071ea:	bb02      	cbnz	r2, 800722e <_dtoa_r+0xa7e>
 80071ec:	4601      	mov	r1, r0
 80071ee:	4658      	mov	r0, fp
 80071f0:	f000 ff46 	bl	8008080 <__mcmp>
 80071f4:	4602      	mov	r2, r0
 80071f6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80071f8:	4639      	mov	r1, r7
 80071fa:	4628      	mov	r0, r5
 80071fc:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 8007200:	f000 fcb6 	bl	8007b70 <_Bfree>
 8007204:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007206:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007208:	9f08      	ldr	r7, [sp, #32]
 800720a:	ea43 0102 	orr.w	r1, r3, r2
 800720e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007210:	430b      	orrs	r3, r1
 8007212:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007214:	d10d      	bne.n	8007232 <_dtoa_r+0xa82>
 8007216:	2b39      	cmp	r3, #57	; 0x39
 8007218:	d029      	beq.n	800726e <_dtoa_r+0xabe>
 800721a:	f1b9 0f00 	cmp.w	r9, #0
 800721e:	dd01      	ble.n	8007224 <_dtoa_r+0xa74>
 8007220:	9b06      	ldr	r3, [sp, #24]
 8007222:	3331      	adds	r3, #49	; 0x31
 8007224:	9a04      	ldr	r2, [sp, #16]
 8007226:	7013      	strb	r3, [r2, #0]
 8007228:	e776      	b.n	8007118 <_dtoa_r+0x968>
 800722a:	4630      	mov	r0, r6
 800722c:	e7b9      	b.n	80071a2 <_dtoa_r+0x9f2>
 800722e:	2201      	movs	r2, #1
 8007230:	e7e2      	b.n	80071f8 <_dtoa_r+0xa48>
 8007232:	f1b9 0f00 	cmp.w	r9, #0
 8007236:	db06      	blt.n	8007246 <_dtoa_r+0xa96>
 8007238:	9922      	ldr	r1, [sp, #136]	; 0x88
 800723a:	ea41 0909 	orr.w	r9, r1, r9
 800723e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007240:	ea59 0101 	orrs.w	r1, r9, r1
 8007244:	d120      	bne.n	8007288 <_dtoa_r+0xad8>
 8007246:	2a00      	cmp	r2, #0
 8007248:	ddec      	ble.n	8007224 <_dtoa_r+0xa74>
 800724a:	4659      	mov	r1, fp
 800724c:	2201      	movs	r2, #1
 800724e:	4628      	mov	r0, r5
 8007250:	9308      	str	r3, [sp, #32]
 8007252:	f000 fea5 	bl	8007fa0 <__lshift>
 8007256:	4621      	mov	r1, r4
 8007258:	4683      	mov	fp, r0
 800725a:	f000 ff11 	bl	8008080 <__mcmp>
 800725e:	2800      	cmp	r0, #0
 8007260:	9b08      	ldr	r3, [sp, #32]
 8007262:	dc02      	bgt.n	800726a <_dtoa_r+0xaba>
 8007264:	d1de      	bne.n	8007224 <_dtoa_r+0xa74>
 8007266:	07da      	lsls	r2, r3, #31
 8007268:	d5dc      	bpl.n	8007224 <_dtoa_r+0xa74>
 800726a:	2b39      	cmp	r3, #57	; 0x39
 800726c:	d1d8      	bne.n	8007220 <_dtoa_r+0xa70>
 800726e:	2339      	movs	r3, #57	; 0x39
 8007270:	9a04      	ldr	r2, [sp, #16]
 8007272:	7013      	strb	r3, [r2, #0]
 8007274:	463b      	mov	r3, r7
 8007276:	461f      	mov	r7, r3
 8007278:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 800727c:	3b01      	subs	r3, #1
 800727e:	2a39      	cmp	r2, #57	; 0x39
 8007280:	d050      	beq.n	8007324 <_dtoa_r+0xb74>
 8007282:	3201      	adds	r2, #1
 8007284:	701a      	strb	r2, [r3, #0]
 8007286:	e747      	b.n	8007118 <_dtoa_r+0x968>
 8007288:	2a00      	cmp	r2, #0
 800728a:	dd03      	ble.n	8007294 <_dtoa_r+0xae4>
 800728c:	2b39      	cmp	r3, #57	; 0x39
 800728e:	d0ee      	beq.n	800726e <_dtoa_r+0xabe>
 8007290:	3301      	adds	r3, #1
 8007292:	e7c7      	b.n	8007224 <_dtoa_r+0xa74>
 8007294:	9a08      	ldr	r2, [sp, #32]
 8007296:	990a      	ldr	r1, [sp, #40]	; 0x28
 8007298:	f802 3c01 	strb.w	r3, [r2, #-1]
 800729c:	428a      	cmp	r2, r1
 800729e:	d02a      	beq.n	80072f6 <_dtoa_r+0xb46>
 80072a0:	4659      	mov	r1, fp
 80072a2:	2300      	movs	r3, #0
 80072a4:	220a      	movs	r2, #10
 80072a6:	4628      	mov	r0, r5
 80072a8:	f000 fc84 	bl	8007bb4 <__multadd>
 80072ac:	45b0      	cmp	r8, r6
 80072ae:	4683      	mov	fp, r0
 80072b0:	f04f 0300 	mov.w	r3, #0
 80072b4:	f04f 020a 	mov.w	r2, #10
 80072b8:	4641      	mov	r1, r8
 80072ba:	4628      	mov	r0, r5
 80072bc:	d107      	bne.n	80072ce <_dtoa_r+0xb1e>
 80072be:	f000 fc79 	bl	8007bb4 <__multadd>
 80072c2:	4680      	mov	r8, r0
 80072c4:	4606      	mov	r6, r0
 80072c6:	9b08      	ldr	r3, [sp, #32]
 80072c8:	3301      	adds	r3, #1
 80072ca:	9308      	str	r3, [sp, #32]
 80072cc:	e775      	b.n	80071ba <_dtoa_r+0xa0a>
 80072ce:	f000 fc71 	bl	8007bb4 <__multadd>
 80072d2:	4631      	mov	r1, r6
 80072d4:	4680      	mov	r8, r0
 80072d6:	2300      	movs	r3, #0
 80072d8:	220a      	movs	r2, #10
 80072da:	4628      	mov	r0, r5
 80072dc:	f000 fc6a 	bl	8007bb4 <__multadd>
 80072e0:	4606      	mov	r6, r0
 80072e2:	e7f0      	b.n	80072c6 <_dtoa_r+0xb16>
 80072e4:	f1b9 0f00 	cmp.w	r9, #0
 80072e8:	bfcc      	ite	gt
 80072ea:	464f      	movgt	r7, r9
 80072ec:	2701      	movle	r7, #1
 80072ee:	f04f 0800 	mov.w	r8, #0
 80072f2:	9a03      	ldr	r2, [sp, #12]
 80072f4:	4417      	add	r7, r2
 80072f6:	4659      	mov	r1, fp
 80072f8:	2201      	movs	r2, #1
 80072fa:	4628      	mov	r0, r5
 80072fc:	9308      	str	r3, [sp, #32]
 80072fe:	f000 fe4f 	bl	8007fa0 <__lshift>
 8007302:	4621      	mov	r1, r4
 8007304:	4683      	mov	fp, r0
 8007306:	f000 febb 	bl	8008080 <__mcmp>
 800730a:	2800      	cmp	r0, #0
 800730c:	dcb2      	bgt.n	8007274 <_dtoa_r+0xac4>
 800730e:	d102      	bne.n	8007316 <_dtoa_r+0xb66>
 8007310:	9b08      	ldr	r3, [sp, #32]
 8007312:	07db      	lsls	r3, r3, #31
 8007314:	d4ae      	bmi.n	8007274 <_dtoa_r+0xac4>
 8007316:	463b      	mov	r3, r7
 8007318:	461f      	mov	r7, r3
 800731a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800731e:	2a30      	cmp	r2, #48	; 0x30
 8007320:	d0fa      	beq.n	8007318 <_dtoa_r+0xb68>
 8007322:	e6f9      	b.n	8007118 <_dtoa_r+0x968>
 8007324:	9a03      	ldr	r2, [sp, #12]
 8007326:	429a      	cmp	r2, r3
 8007328:	d1a5      	bne.n	8007276 <_dtoa_r+0xac6>
 800732a:	2331      	movs	r3, #49	; 0x31
 800732c:	f10a 0a01 	add.w	sl, sl, #1
 8007330:	e779      	b.n	8007226 <_dtoa_r+0xa76>
 8007332:	4b14      	ldr	r3, [pc, #80]	; (8007384 <_dtoa_r+0xbd4>)
 8007334:	f7ff baa8 	b.w	8006888 <_dtoa_r+0xd8>
 8007338:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800733a:	2b00      	cmp	r3, #0
 800733c:	f47f aa81 	bne.w	8006842 <_dtoa_r+0x92>
 8007340:	4b11      	ldr	r3, [pc, #68]	; (8007388 <_dtoa_r+0xbd8>)
 8007342:	f7ff baa1 	b.w	8006888 <_dtoa_r+0xd8>
 8007346:	f1b9 0f00 	cmp.w	r9, #0
 800734a:	dc03      	bgt.n	8007354 <_dtoa_r+0xba4>
 800734c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800734e:	2b02      	cmp	r3, #2
 8007350:	f73f aecb 	bgt.w	80070ea <_dtoa_r+0x93a>
 8007354:	9f03      	ldr	r7, [sp, #12]
 8007356:	4621      	mov	r1, r4
 8007358:	4658      	mov	r0, fp
 800735a:	f7ff f99b 	bl	8006694 <quorem>
 800735e:	9a03      	ldr	r2, [sp, #12]
 8007360:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8007364:	f807 3b01 	strb.w	r3, [r7], #1
 8007368:	1aba      	subs	r2, r7, r2
 800736a:	4591      	cmp	r9, r2
 800736c:	ddba      	ble.n	80072e4 <_dtoa_r+0xb34>
 800736e:	4659      	mov	r1, fp
 8007370:	2300      	movs	r3, #0
 8007372:	220a      	movs	r2, #10
 8007374:	4628      	mov	r0, r5
 8007376:	f000 fc1d 	bl	8007bb4 <__multadd>
 800737a:	4683      	mov	fp, r0
 800737c:	e7eb      	b.n	8007356 <_dtoa_r+0xba6>
 800737e:	bf00      	nop
 8007380:	08009f20 	.word	0x08009f20
 8007384:	0800a119 	.word	0x0800a119
 8007388:	08009ea1 	.word	0x08009ea1

0800738c <rshift>:
 800738c:	6903      	ldr	r3, [r0, #16]
 800738e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007392:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8007396:	f100 0414 	add.w	r4, r0, #20
 800739a:	ea4f 1261 	mov.w	r2, r1, asr #5
 800739e:	dd46      	ble.n	800742e <rshift+0xa2>
 80073a0:	f011 011f 	ands.w	r1, r1, #31
 80073a4:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80073a8:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80073ac:	d10c      	bne.n	80073c8 <rshift+0x3c>
 80073ae:	4629      	mov	r1, r5
 80073b0:	f100 0710 	add.w	r7, r0, #16
 80073b4:	42b1      	cmp	r1, r6
 80073b6:	d335      	bcc.n	8007424 <rshift+0x98>
 80073b8:	1a9b      	subs	r3, r3, r2
 80073ba:	009b      	lsls	r3, r3, #2
 80073bc:	1eea      	subs	r2, r5, #3
 80073be:	4296      	cmp	r6, r2
 80073c0:	bf38      	it	cc
 80073c2:	2300      	movcc	r3, #0
 80073c4:	4423      	add	r3, r4
 80073c6:	e015      	b.n	80073f4 <rshift+0x68>
 80073c8:	46a1      	mov	r9, r4
 80073ca:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80073ce:	f1c1 0820 	rsb	r8, r1, #32
 80073d2:	40cf      	lsrs	r7, r1
 80073d4:	f105 0e04 	add.w	lr, r5, #4
 80073d8:	4576      	cmp	r6, lr
 80073da:	46f4      	mov	ip, lr
 80073dc:	d816      	bhi.n	800740c <rshift+0x80>
 80073de:	1a9a      	subs	r2, r3, r2
 80073e0:	0092      	lsls	r2, r2, #2
 80073e2:	3a04      	subs	r2, #4
 80073e4:	3501      	adds	r5, #1
 80073e6:	42ae      	cmp	r6, r5
 80073e8:	bf38      	it	cc
 80073ea:	2200      	movcc	r2, #0
 80073ec:	18a3      	adds	r3, r4, r2
 80073ee:	50a7      	str	r7, [r4, r2]
 80073f0:	b107      	cbz	r7, 80073f4 <rshift+0x68>
 80073f2:	3304      	adds	r3, #4
 80073f4:	42a3      	cmp	r3, r4
 80073f6:	eba3 0204 	sub.w	r2, r3, r4
 80073fa:	bf08      	it	eq
 80073fc:	2300      	moveq	r3, #0
 80073fe:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8007402:	6102      	str	r2, [r0, #16]
 8007404:	bf08      	it	eq
 8007406:	6143      	streq	r3, [r0, #20]
 8007408:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800740c:	f8dc c000 	ldr.w	ip, [ip]
 8007410:	fa0c fc08 	lsl.w	ip, ip, r8
 8007414:	ea4c 0707 	orr.w	r7, ip, r7
 8007418:	f849 7b04 	str.w	r7, [r9], #4
 800741c:	f85e 7b04 	ldr.w	r7, [lr], #4
 8007420:	40cf      	lsrs	r7, r1
 8007422:	e7d9      	b.n	80073d8 <rshift+0x4c>
 8007424:	f851 cb04 	ldr.w	ip, [r1], #4
 8007428:	f847 cf04 	str.w	ip, [r7, #4]!
 800742c:	e7c2      	b.n	80073b4 <rshift+0x28>
 800742e:	4623      	mov	r3, r4
 8007430:	e7e0      	b.n	80073f4 <rshift+0x68>

08007432 <__hexdig_fun>:
 8007432:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8007436:	2b09      	cmp	r3, #9
 8007438:	d802      	bhi.n	8007440 <__hexdig_fun+0xe>
 800743a:	3820      	subs	r0, #32
 800743c:	b2c0      	uxtb	r0, r0
 800743e:	4770      	bx	lr
 8007440:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8007444:	2b05      	cmp	r3, #5
 8007446:	d801      	bhi.n	800744c <__hexdig_fun+0x1a>
 8007448:	3847      	subs	r0, #71	; 0x47
 800744a:	e7f7      	b.n	800743c <__hexdig_fun+0xa>
 800744c:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8007450:	2b05      	cmp	r3, #5
 8007452:	d801      	bhi.n	8007458 <__hexdig_fun+0x26>
 8007454:	3827      	subs	r0, #39	; 0x27
 8007456:	e7f1      	b.n	800743c <__hexdig_fun+0xa>
 8007458:	2000      	movs	r0, #0
 800745a:	4770      	bx	lr

0800745c <__gethex>:
 800745c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007460:	b08b      	sub	sp, #44	; 0x2c
 8007462:	9305      	str	r3, [sp, #20]
 8007464:	4bb2      	ldr	r3, [pc, #712]	; (8007730 <__gethex+0x2d4>)
 8007466:	9002      	str	r0, [sp, #8]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	468b      	mov	fp, r1
 800746c:	4618      	mov	r0, r3
 800746e:	4690      	mov	r8, r2
 8007470:	9303      	str	r3, [sp, #12]
 8007472:	f7f8 fe6d 	bl	8000150 <strlen>
 8007476:	4682      	mov	sl, r0
 8007478:	9b03      	ldr	r3, [sp, #12]
 800747a:	f8db 2000 	ldr.w	r2, [fp]
 800747e:	4403      	add	r3, r0
 8007480:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8007484:	9306      	str	r3, [sp, #24]
 8007486:	1c93      	adds	r3, r2, #2
 8007488:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800748c:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8007490:	32fe      	adds	r2, #254	; 0xfe
 8007492:	18d1      	adds	r1, r2, r3
 8007494:	461f      	mov	r7, r3
 8007496:	f813 0b01 	ldrb.w	r0, [r3], #1
 800749a:	9101      	str	r1, [sp, #4]
 800749c:	2830      	cmp	r0, #48	; 0x30
 800749e:	d0f8      	beq.n	8007492 <__gethex+0x36>
 80074a0:	f7ff ffc7 	bl	8007432 <__hexdig_fun>
 80074a4:	4604      	mov	r4, r0
 80074a6:	2800      	cmp	r0, #0
 80074a8:	d13a      	bne.n	8007520 <__gethex+0xc4>
 80074aa:	4652      	mov	r2, sl
 80074ac:	4638      	mov	r0, r7
 80074ae:	9903      	ldr	r1, [sp, #12]
 80074b0:	f7fe fa2d 	bl	800590e <strncmp>
 80074b4:	4605      	mov	r5, r0
 80074b6:	2800      	cmp	r0, #0
 80074b8:	d166      	bne.n	8007588 <__gethex+0x12c>
 80074ba:	f817 000a 	ldrb.w	r0, [r7, sl]
 80074be:	eb07 060a 	add.w	r6, r7, sl
 80074c2:	f7ff ffb6 	bl	8007432 <__hexdig_fun>
 80074c6:	2800      	cmp	r0, #0
 80074c8:	d060      	beq.n	800758c <__gethex+0x130>
 80074ca:	4633      	mov	r3, r6
 80074cc:	7818      	ldrb	r0, [r3, #0]
 80074ce:	461f      	mov	r7, r3
 80074d0:	2830      	cmp	r0, #48	; 0x30
 80074d2:	f103 0301 	add.w	r3, r3, #1
 80074d6:	d0f9      	beq.n	80074cc <__gethex+0x70>
 80074d8:	f7ff ffab 	bl	8007432 <__hexdig_fun>
 80074dc:	2301      	movs	r3, #1
 80074de:	fab0 f480 	clz	r4, r0
 80074e2:	4635      	mov	r5, r6
 80074e4:	0964      	lsrs	r4, r4, #5
 80074e6:	9301      	str	r3, [sp, #4]
 80074e8:	463a      	mov	r2, r7
 80074ea:	4616      	mov	r6, r2
 80074ec:	7830      	ldrb	r0, [r6, #0]
 80074ee:	3201      	adds	r2, #1
 80074f0:	f7ff ff9f 	bl	8007432 <__hexdig_fun>
 80074f4:	2800      	cmp	r0, #0
 80074f6:	d1f8      	bne.n	80074ea <__gethex+0x8e>
 80074f8:	4652      	mov	r2, sl
 80074fa:	4630      	mov	r0, r6
 80074fc:	9903      	ldr	r1, [sp, #12]
 80074fe:	f7fe fa06 	bl	800590e <strncmp>
 8007502:	b980      	cbnz	r0, 8007526 <__gethex+0xca>
 8007504:	b94d      	cbnz	r5, 800751a <__gethex+0xbe>
 8007506:	eb06 050a 	add.w	r5, r6, sl
 800750a:	462a      	mov	r2, r5
 800750c:	4616      	mov	r6, r2
 800750e:	7830      	ldrb	r0, [r6, #0]
 8007510:	3201      	adds	r2, #1
 8007512:	f7ff ff8e 	bl	8007432 <__hexdig_fun>
 8007516:	2800      	cmp	r0, #0
 8007518:	d1f8      	bne.n	800750c <__gethex+0xb0>
 800751a:	1bad      	subs	r5, r5, r6
 800751c:	00ad      	lsls	r5, r5, #2
 800751e:	e004      	b.n	800752a <__gethex+0xce>
 8007520:	2400      	movs	r4, #0
 8007522:	4625      	mov	r5, r4
 8007524:	e7e0      	b.n	80074e8 <__gethex+0x8c>
 8007526:	2d00      	cmp	r5, #0
 8007528:	d1f7      	bne.n	800751a <__gethex+0xbe>
 800752a:	7833      	ldrb	r3, [r6, #0]
 800752c:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8007530:	2b50      	cmp	r3, #80	; 0x50
 8007532:	d139      	bne.n	80075a8 <__gethex+0x14c>
 8007534:	7873      	ldrb	r3, [r6, #1]
 8007536:	2b2b      	cmp	r3, #43	; 0x2b
 8007538:	d02a      	beq.n	8007590 <__gethex+0x134>
 800753a:	2b2d      	cmp	r3, #45	; 0x2d
 800753c:	d02c      	beq.n	8007598 <__gethex+0x13c>
 800753e:	f04f 0900 	mov.w	r9, #0
 8007542:	1c71      	adds	r1, r6, #1
 8007544:	7808      	ldrb	r0, [r1, #0]
 8007546:	f7ff ff74 	bl	8007432 <__hexdig_fun>
 800754a:	1e43      	subs	r3, r0, #1
 800754c:	b2db      	uxtb	r3, r3
 800754e:	2b18      	cmp	r3, #24
 8007550:	d82a      	bhi.n	80075a8 <__gethex+0x14c>
 8007552:	f1a0 0210 	sub.w	r2, r0, #16
 8007556:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800755a:	f7ff ff6a 	bl	8007432 <__hexdig_fun>
 800755e:	1e43      	subs	r3, r0, #1
 8007560:	b2db      	uxtb	r3, r3
 8007562:	2b18      	cmp	r3, #24
 8007564:	d91b      	bls.n	800759e <__gethex+0x142>
 8007566:	f1b9 0f00 	cmp.w	r9, #0
 800756a:	d000      	beq.n	800756e <__gethex+0x112>
 800756c:	4252      	negs	r2, r2
 800756e:	4415      	add	r5, r2
 8007570:	f8cb 1000 	str.w	r1, [fp]
 8007574:	b1d4      	cbz	r4, 80075ac <__gethex+0x150>
 8007576:	9b01      	ldr	r3, [sp, #4]
 8007578:	2b00      	cmp	r3, #0
 800757a:	bf14      	ite	ne
 800757c:	2700      	movne	r7, #0
 800757e:	2706      	moveq	r7, #6
 8007580:	4638      	mov	r0, r7
 8007582:	b00b      	add	sp, #44	; 0x2c
 8007584:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007588:	463e      	mov	r6, r7
 800758a:	4625      	mov	r5, r4
 800758c:	2401      	movs	r4, #1
 800758e:	e7cc      	b.n	800752a <__gethex+0xce>
 8007590:	f04f 0900 	mov.w	r9, #0
 8007594:	1cb1      	adds	r1, r6, #2
 8007596:	e7d5      	b.n	8007544 <__gethex+0xe8>
 8007598:	f04f 0901 	mov.w	r9, #1
 800759c:	e7fa      	b.n	8007594 <__gethex+0x138>
 800759e:	230a      	movs	r3, #10
 80075a0:	fb03 0202 	mla	r2, r3, r2, r0
 80075a4:	3a10      	subs	r2, #16
 80075a6:	e7d6      	b.n	8007556 <__gethex+0xfa>
 80075a8:	4631      	mov	r1, r6
 80075aa:	e7e1      	b.n	8007570 <__gethex+0x114>
 80075ac:	4621      	mov	r1, r4
 80075ae:	1bf3      	subs	r3, r6, r7
 80075b0:	3b01      	subs	r3, #1
 80075b2:	2b07      	cmp	r3, #7
 80075b4:	dc0a      	bgt.n	80075cc <__gethex+0x170>
 80075b6:	9802      	ldr	r0, [sp, #8]
 80075b8:	f000 fa9a 	bl	8007af0 <_Balloc>
 80075bc:	4604      	mov	r4, r0
 80075be:	b940      	cbnz	r0, 80075d2 <__gethex+0x176>
 80075c0:	4602      	mov	r2, r0
 80075c2:	21de      	movs	r1, #222	; 0xde
 80075c4:	4b5b      	ldr	r3, [pc, #364]	; (8007734 <__gethex+0x2d8>)
 80075c6:	485c      	ldr	r0, [pc, #368]	; (8007738 <__gethex+0x2dc>)
 80075c8:	f001 fdd6 	bl	8009178 <__assert_func>
 80075cc:	3101      	adds	r1, #1
 80075ce:	105b      	asrs	r3, r3, #1
 80075d0:	e7ef      	b.n	80075b2 <__gethex+0x156>
 80075d2:	f04f 0b00 	mov.w	fp, #0
 80075d6:	f100 0914 	add.w	r9, r0, #20
 80075da:	f1ca 0301 	rsb	r3, sl, #1
 80075de:	f8cd 9010 	str.w	r9, [sp, #16]
 80075e2:	f8cd b004 	str.w	fp, [sp, #4]
 80075e6:	9308      	str	r3, [sp, #32]
 80075e8:	42b7      	cmp	r7, r6
 80075ea:	d33f      	bcc.n	800766c <__gethex+0x210>
 80075ec:	9f04      	ldr	r7, [sp, #16]
 80075ee:	9b01      	ldr	r3, [sp, #4]
 80075f0:	f847 3b04 	str.w	r3, [r7], #4
 80075f4:	eba7 0709 	sub.w	r7, r7, r9
 80075f8:	10bf      	asrs	r7, r7, #2
 80075fa:	6127      	str	r7, [r4, #16]
 80075fc:	4618      	mov	r0, r3
 80075fe:	f000 fb69 	bl	8007cd4 <__hi0bits>
 8007602:	017f      	lsls	r7, r7, #5
 8007604:	f8d8 6000 	ldr.w	r6, [r8]
 8007608:	1a3f      	subs	r7, r7, r0
 800760a:	42b7      	cmp	r7, r6
 800760c:	dd62      	ble.n	80076d4 <__gethex+0x278>
 800760e:	1bbf      	subs	r7, r7, r6
 8007610:	4639      	mov	r1, r7
 8007612:	4620      	mov	r0, r4
 8007614:	f000 ff03 	bl	800841e <__any_on>
 8007618:	4682      	mov	sl, r0
 800761a:	b1a8      	cbz	r0, 8007648 <__gethex+0x1ec>
 800761c:	f04f 0a01 	mov.w	sl, #1
 8007620:	1e7b      	subs	r3, r7, #1
 8007622:	1159      	asrs	r1, r3, #5
 8007624:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8007628:	f003 021f 	and.w	r2, r3, #31
 800762c:	fa0a f202 	lsl.w	r2, sl, r2
 8007630:	420a      	tst	r2, r1
 8007632:	d009      	beq.n	8007648 <__gethex+0x1ec>
 8007634:	4553      	cmp	r3, sl
 8007636:	dd05      	ble.n	8007644 <__gethex+0x1e8>
 8007638:	4620      	mov	r0, r4
 800763a:	1eb9      	subs	r1, r7, #2
 800763c:	f000 feef 	bl	800841e <__any_on>
 8007640:	2800      	cmp	r0, #0
 8007642:	d144      	bne.n	80076ce <__gethex+0x272>
 8007644:	f04f 0a02 	mov.w	sl, #2
 8007648:	4639      	mov	r1, r7
 800764a:	4620      	mov	r0, r4
 800764c:	f7ff fe9e 	bl	800738c <rshift>
 8007650:	443d      	add	r5, r7
 8007652:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8007656:	42ab      	cmp	r3, r5
 8007658:	da4a      	bge.n	80076f0 <__gethex+0x294>
 800765a:	4621      	mov	r1, r4
 800765c:	9802      	ldr	r0, [sp, #8]
 800765e:	f000 fa87 	bl	8007b70 <_Bfree>
 8007662:	2300      	movs	r3, #0
 8007664:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8007666:	27a3      	movs	r7, #163	; 0xa3
 8007668:	6013      	str	r3, [r2, #0]
 800766a:	e789      	b.n	8007580 <__gethex+0x124>
 800766c:	1e73      	subs	r3, r6, #1
 800766e:	9a06      	ldr	r2, [sp, #24]
 8007670:	9307      	str	r3, [sp, #28]
 8007672:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8007676:	4293      	cmp	r3, r2
 8007678:	d019      	beq.n	80076ae <__gethex+0x252>
 800767a:	f1bb 0f20 	cmp.w	fp, #32
 800767e:	d107      	bne.n	8007690 <__gethex+0x234>
 8007680:	9b04      	ldr	r3, [sp, #16]
 8007682:	9a01      	ldr	r2, [sp, #4]
 8007684:	f843 2b04 	str.w	r2, [r3], #4
 8007688:	9304      	str	r3, [sp, #16]
 800768a:	2300      	movs	r3, #0
 800768c:	469b      	mov	fp, r3
 800768e:	9301      	str	r3, [sp, #4]
 8007690:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8007694:	f7ff fecd 	bl	8007432 <__hexdig_fun>
 8007698:	9b01      	ldr	r3, [sp, #4]
 800769a:	f000 000f 	and.w	r0, r0, #15
 800769e:	fa00 f00b 	lsl.w	r0, r0, fp
 80076a2:	4303      	orrs	r3, r0
 80076a4:	9301      	str	r3, [sp, #4]
 80076a6:	f10b 0b04 	add.w	fp, fp, #4
 80076aa:	9b07      	ldr	r3, [sp, #28]
 80076ac:	e00d      	b.n	80076ca <__gethex+0x26e>
 80076ae:	9a08      	ldr	r2, [sp, #32]
 80076b0:	1e73      	subs	r3, r6, #1
 80076b2:	4413      	add	r3, r2
 80076b4:	42bb      	cmp	r3, r7
 80076b6:	d3e0      	bcc.n	800767a <__gethex+0x21e>
 80076b8:	4618      	mov	r0, r3
 80076ba:	4652      	mov	r2, sl
 80076bc:	9903      	ldr	r1, [sp, #12]
 80076be:	9309      	str	r3, [sp, #36]	; 0x24
 80076c0:	f7fe f925 	bl	800590e <strncmp>
 80076c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80076c6:	2800      	cmp	r0, #0
 80076c8:	d1d7      	bne.n	800767a <__gethex+0x21e>
 80076ca:	461e      	mov	r6, r3
 80076cc:	e78c      	b.n	80075e8 <__gethex+0x18c>
 80076ce:	f04f 0a03 	mov.w	sl, #3
 80076d2:	e7b9      	b.n	8007648 <__gethex+0x1ec>
 80076d4:	da09      	bge.n	80076ea <__gethex+0x28e>
 80076d6:	1bf7      	subs	r7, r6, r7
 80076d8:	4621      	mov	r1, r4
 80076da:	463a      	mov	r2, r7
 80076dc:	9802      	ldr	r0, [sp, #8]
 80076de:	f000 fc5f 	bl	8007fa0 <__lshift>
 80076e2:	4604      	mov	r4, r0
 80076e4:	1bed      	subs	r5, r5, r7
 80076e6:	f100 0914 	add.w	r9, r0, #20
 80076ea:	f04f 0a00 	mov.w	sl, #0
 80076ee:	e7b0      	b.n	8007652 <__gethex+0x1f6>
 80076f0:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80076f4:	42a8      	cmp	r0, r5
 80076f6:	dd72      	ble.n	80077de <__gethex+0x382>
 80076f8:	1b45      	subs	r5, r0, r5
 80076fa:	42ae      	cmp	r6, r5
 80076fc:	dc35      	bgt.n	800776a <__gethex+0x30e>
 80076fe:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8007702:	2b02      	cmp	r3, #2
 8007704:	d029      	beq.n	800775a <__gethex+0x2fe>
 8007706:	2b03      	cmp	r3, #3
 8007708:	d02b      	beq.n	8007762 <__gethex+0x306>
 800770a:	2b01      	cmp	r3, #1
 800770c:	d11c      	bne.n	8007748 <__gethex+0x2ec>
 800770e:	42ae      	cmp	r6, r5
 8007710:	d11a      	bne.n	8007748 <__gethex+0x2ec>
 8007712:	2e01      	cmp	r6, #1
 8007714:	d112      	bne.n	800773c <__gethex+0x2e0>
 8007716:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800771a:	9a05      	ldr	r2, [sp, #20]
 800771c:	2762      	movs	r7, #98	; 0x62
 800771e:	6013      	str	r3, [r2, #0]
 8007720:	2301      	movs	r3, #1
 8007722:	6123      	str	r3, [r4, #16]
 8007724:	f8c9 3000 	str.w	r3, [r9]
 8007728:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800772a:	601c      	str	r4, [r3, #0]
 800772c:	e728      	b.n	8007580 <__gethex+0x124>
 800772e:	bf00      	nop
 8007730:	08009f98 	.word	0x08009f98
 8007734:	08009f20 	.word	0x08009f20
 8007738:	08009f31 	.word	0x08009f31
 800773c:	4620      	mov	r0, r4
 800773e:	1e71      	subs	r1, r6, #1
 8007740:	f000 fe6d 	bl	800841e <__any_on>
 8007744:	2800      	cmp	r0, #0
 8007746:	d1e6      	bne.n	8007716 <__gethex+0x2ba>
 8007748:	4621      	mov	r1, r4
 800774a:	9802      	ldr	r0, [sp, #8]
 800774c:	f000 fa10 	bl	8007b70 <_Bfree>
 8007750:	2300      	movs	r3, #0
 8007752:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8007754:	2750      	movs	r7, #80	; 0x50
 8007756:	6013      	str	r3, [r2, #0]
 8007758:	e712      	b.n	8007580 <__gethex+0x124>
 800775a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800775c:	2b00      	cmp	r3, #0
 800775e:	d1f3      	bne.n	8007748 <__gethex+0x2ec>
 8007760:	e7d9      	b.n	8007716 <__gethex+0x2ba>
 8007762:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007764:	2b00      	cmp	r3, #0
 8007766:	d1d6      	bne.n	8007716 <__gethex+0x2ba>
 8007768:	e7ee      	b.n	8007748 <__gethex+0x2ec>
 800776a:	1e6f      	subs	r7, r5, #1
 800776c:	f1ba 0f00 	cmp.w	sl, #0
 8007770:	d132      	bne.n	80077d8 <__gethex+0x37c>
 8007772:	b127      	cbz	r7, 800777e <__gethex+0x322>
 8007774:	4639      	mov	r1, r7
 8007776:	4620      	mov	r0, r4
 8007778:	f000 fe51 	bl	800841e <__any_on>
 800777c:	4682      	mov	sl, r0
 800777e:	2101      	movs	r1, #1
 8007780:	117b      	asrs	r3, r7, #5
 8007782:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8007786:	f007 071f 	and.w	r7, r7, #31
 800778a:	fa01 f707 	lsl.w	r7, r1, r7
 800778e:	421f      	tst	r7, r3
 8007790:	f04f 0702 	mov.w	r7, #2
 8007794:	4629      	mov	r1, r5
 8007796:	4620      	mov	r0, r4
 8007798:	bf18      	it	ne
 800779a:	f04a 0a02 	orrne.w	sl, sl, #2
 800779e:	1b76      	subs	r6, r6, r5
 80077a0:	f7ff fdf4 	bl	800738c <rshift>
 80077a4:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80077a8:	f1ba 0f00 	cmp.w	sl, #0
 80077ac:	d048      	beq.n	8007840 <__gethex+0x3e4>
 80077ae:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80077b2:	2b02      	cmp	r3, #2
 80077b4:	d015      	beq.n	80077e2 <__gethex+0x386>
 80077b6:	2b03      	cmp	r3, #3
 80077b8:	d017      	beq.n	80077ea <__gethex+0x38e>
 80077ba:	2b01      	cmp	r3, #1
 80077bc:	d109      	bne.n	80077d2 <__gethex+0x376>
 80077be:	f01a 0f02 	tst.w	sl, #2
 80077c2:	d006      	beq.n	80077d2 <__gethex+0x376>
 80077c4:	f8d9 0000 	ldr.w	r0, [r9]
 80077c8:	ea4a 0a00 	orr.w	sl, sl, r0
 80077cc:	f01a 0f01 	tst.w	sl, #1
 80077d0:	d10e      	bne.n	80077f0 <__gethex+0x394>
 80077d2:	f047 0710 	orr.w	r7, r7, #16
 80077d6:	e033      	b.n	8007840 <__gethex+0x3e4>
 80077d8:	f04f 0a01 	mov.w	sl, #1
 80077dc:	e7cf      	b.n	800777e <__gethex+0x322>
 80077de:	2701      	movs	r7, #1
 80077e0:	e7e2      	b.n	80077a8 <__gethex+0x34c>
 80077e2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80077e4:	f1c3 0301 	rsb	r3, r3, #1
 80077e8:	9315      	str	r3, [sp, #84]	; 0x54
 80077ea:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d0f0      	beq.n	80077d2 <__gethex+0x376>
 80077f0:	f04f 0c00 	mov.w	ip, #0
 80077f4:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80077f8:	f104 0314 	add.w	r3, r4, #20
 80077fc:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8007800:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8007804:	4618      	mov	r0, r3
 8007806:	f853 2b04 	ldr.w	r2, [r3], #4
 800780a:	f1b2 3fff 	cmp.w	r2, #4294967295
 800780e:	d01c      	beq.n	800784a <__gethex+0x3ee>
 8007810:	3201      	adds	r2, #1
 8007812:	6002      	str	r2, [r0, #0]
 8007814:	2f02      	cmp	r7, #2
 8007816:	f104 0314 	add.w	r3, r4, #20
 800781a:	d13d      	bne.n	8007898 <__gethex+0x43c>
 800781c:	f8d8 2000 	ldr.w	r2, [r8]
 8007820:	3a01      	subs	r2, #1
 8007822:	42b2      	cmp	r2, r6
 8007824:	d10a      	bne.n	800783c <__gethex+0x3e0>
 8007826:	2201      	movs	r2, #1
 8007828:	1171      	asrs	r1, r6, #5
 800782a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800782e:	f006 061f 	and.w	r6, r6, #31
 8007832:	fa02 f606 	lsl.w	r6, r2, r6
 8007836:	421e      	tst	r6, r3
 8007838:	bf18      	it	ne
 800783a:	4617      	movne	r7, r2
 800783c:	f047 0720 	orr.w	r7, r7, #32
 8007840:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007842:	601c      	str	r4, [r3, #0]
 8007844:	9b05      	ldr	r3, [sp, #20]
 8007846:	601d      	str	r5, [r3, #0]
 8007848:	e69a      	b.n	8007580 <__gethex+0x124>
 800784a:	4299      	cmp	r1, r3
 800784c:	f843 cc04 	str.w	ip, [r3, #-4]
 8007850:	d8d8      	bhi.n	8007804 <__gethex+0x3a8>
 8007852:	68a3      	ldr	r3, [r4, #8]
 8007854:	459b      	cmp	fp, r3
 8007856:	db17      	blt.n	8007888 <__gethex+0x42c>
 8007858:	6861      	ldr	r1, [r4, #4]
 800785a:	9802      	ldr	r0, [sp, #8]
 800785c:	3101      	adds	r1, #1
 800785e:	f000 f947 	bl	8007af0 <_Balloc>
 8007862:	4681      	mov	r9, r0
 8007864:	b918      	cbnz	r0, 800786e <__gethex+0x412>
 8007866:	4602      	mov	r2, r0
 8007868:	2184      	movs	r1, #132	; 0x84
 800786a:	4b19      	ldr	r3, [pc, #100]	; (80078d0 <__gethex+0x474>)
 800786c:	e6ab      	b.n	80075c6 <__gethex+0x16a>
 800786e:	6922      	ldr	r2, [r4, #16]
 8007870:	f104 010c 	add.w	r1, r4, #12
 8007874:	3202      	adds	r2, #2
 8007876:	0092      	lsls	r2, r2, #2
 8007878:	300c      	adds	r0, #12
 800787a:	f000 f92b 	bl	8007ad4 <memcpy>
 800787e:	4621      	mov	r1, r4
 8007880:	9802      	ldr	r0, [sp, #8]
 8007882:	f000 f975 	bl	8007b70 <_Bfree>
 8007886:	464c      	mov	r4, r9
 8007888:	6923      	ldr	r3, [r4, #16]
 800788a:	1c5a      	adds	r2, r3, #1
 800788c:	6122      	str	r2, [r4, #16]
 800788e:	2201      	movs	r2, #1
 8007890:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007894:	615a      	str	r2, [r3, #20]
 8007896:	e7bd      	b.n	8007814 <__gethex+0x3b8>
 8007898:	6922      	ldr	r2, [r4, #16]
 800789a:	455a      	cmp	r2, fp
 800789c:	dd0b      	ble.n	80078b6 <__gethex+0x45a>
 800789e:	2101      	movs	r1, #1
 80078a0:	4620      	mov	r0, r4
 80078a2:	f7ff fd73 	bl	800738c <rshift>
 80078a6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80078aa:	3501      	adds	r5, #1
 80078ac:	42ab      	cmp	r3, r5
 80078ae:	f6ff aed4 	blt.w	800765a <__gethex+0x1fe>
 80078b2:	2701      	movs	r7, #1
 80078b4:	e7c2      	b.n	800783c <__gethex+0x3e0>
 80078b6:	f016 061f 	ands.w	r6, r6, #31
 80078ba:	d0fa      	beq.n	80078b2 <__gethex+0x456>
 80078bc:	4453      	add	r3, sl
 80078be:	f853 0c04 	ldr.w	r0, [r3, #-4]
 80078c2:	f000 fa07 	bl	8007cd4 <__hi0bits>
 80078c6:	f1c6 0620 	rsb	r6, r6, #32
 80078ca:	42b0      	cmp	r0, r6
 80078cc:	dbe7      	blt.n	800789e <__gethex+0x442>
 80078ce:	e7f0      	b.n	80078b2 <__gethex+0x456>
 80078d0:	08009f20 	.word	0x08009f20

080078d4 <L_shift>:
 80078d4:	f1c2 0208 	rsb	r2, r2, #8
 80078d8:	0092      	lsls	r2, r2, #2
 80078da:	b570      	push	{r4, r5, r6, lr}
 80078dc:	f1c2 0620 	rsb	r6, r2, #32
 80078e0:	6843      	ldr	r3, [r0, #4]
 80078e2:	6804      	ldr	r4, [r0, #0]
 80078e4:	fa03 f506 	lsl.w	r5, r3, r6
 80078e8:	432c      	orrs	r4, r5
 80078ea:	40d3      	lsrs	r3, r2
 80078ec:	6004      	str	r4, [r0, #0]
 80078ee:	f840 3f04 	str.w	r3, [r0, #4]!
 80078f2:	4288      	cmp	r0, r1
 80078f4:	d3f4      	bcc.n	80078e0 <L_shift+0xc>
 80078f6:	bd70      	pop	{r4, r5, r6, pc}

080078f8 <__match>:
 80078f8:	b530      	push	{r4, r5, lr}
 80078fa:	6803      	ldr	r3, [r0, #0]
 80078fc:	3301      	adds	r3, #1
 80078fe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007902:	b914      	cbnz	r4, 800790a <__match+0x12>
 8007904:	6003      	str	r3, [r0, #0]
 8007906:	2001      	movs	r0, #1
 8007908:	bd30      	pop	{r4, r5, pc}
 800790a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800790e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8007912:	2d19      	cmp	r5, #25
 8007914:	bf98      	it	ls
 8007916:	3220      	addls	r2, #32
 8007918:	42a2      	cmp	r2, r4
 800791a:	d0f0      	beq.n	80078fe <__match+0x6>
 800791c:	2000      	movs	r0, #0
 800791e:	e7f3      	b.n	8007908 <__match+0x10>

08007920 <__hexnan>:
 8007920:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007924:	2500      	movs	r5, #0
 8007926:	680b      	ldr	r3, [r1, #0]
 8007928:	4682      	mov	sl, r0
 800792a:	115e      	asrs	r6, r3, #5
 800792c:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8007930:	f013 031f 	ands.w	r3, r3, #31
 8007934:	bf18      	it	ne
 8007936:	3604      	addne	r6, #4
 8007938:	1f37      	subs	r7, r6, #4
 800793a:	46b9      	mov	r9, r7
 800793c:	463c      	mov	r4, r7
 800793e:	46ab      	mov	fp, r5
 8007940:	b087      	sub	sp, #28
 8007942:	4690      	mov	r8, r2
 8007944:	6802      	ldr	r2, [r0, #0]
 8007946:	9301      	str	r3, [sp, #4]
 8007948:	f846 5c04 	str.w	r5, [r6, #-4]
 800794c:	9502      	str	r5, [sp, #8]
 800794e:	7851      	ldrb	r1, [r2, #1]
 8007950:	1c53      	adds	r3, r2, #1
 8007952:	9303      	str	r3, [sp, #12]
 8007954:	b341      	cbz	r1, 80079a8 <__hexnan+0x88>
 8007956:	4608      	mov	r0, r1
 8007958:	9205      	str	r2, [sp, #20]
 800795a:	9104      	str	r1, [sp, #16]
 800795c:	f7ff fd69 	bl	8007432 <__hexdig_fun>
 8007960:	2800      	cmp	r0, #0
 8007962:	d14f      	bne.n	8007a04 <__hexnan+0xe4>
 8007964:	9904      	ldr	r1, [sp, #16]
 8007966:	9a05      	ldr	r2, [sp, #20]
 8007968:	2920      	cmp	r1, #32
 800796a:	d818      	bhi.n	800799e <__hexnan+0x7e>
 800796c:	9b02      	ldr	r3, [sp, #8]
 800796e:	459b      	cmp	fp, r3
 8007970:	dd13      	ble.n	800799a <__hexnan+0x7a>
 8007972:	454c      	cmp	r4, r9
 8007974:	d206      	bcs.n	8007984 <__hexnan+0x64>
 8007976:	2d07      	cmp	r5, #7
 8007978:	dc04      	bgt.n	8007984 <__hexnan+0x64>
 800797a:	462a      	mov	r2, r5
 800797c:	4649      	mov	r1, r9
 800797e:	4620      	mov	r0, r4
 8007980:	f7ff ffa8 	bl	80078d4 <L_shift>
 8007984:	4544      	cmp	r4, r8
 8007986:	d950      	bls.n	8007a2a <__hexnan+0x10a>
 8007988:	2300      	movs	r3, #0
 800798a:	f1a4 0904 	sub.w	r9, r4, #4
 800798e:	f844 3c04 	str.w	r3, [r4, #-4]
 8007992:	461d      	mov	r5, r3
 8007994:	464c      	mov	r4, r9
 8007996:	f8cd b008 	str.w	fp, [sp, #8]
 800799a:	9a03      	ldr	r2, [sp, #12]
 800799c:	e7d7      	b.n	800794e <__hexnan+0x2e>
 800799e:	2929      	cmp	r1, #41	; 0x29
 80079a0:	d156      	bne.n	8007a50 <__hexnan+0x130>
 80079a2:	3202      	adds	r2, #2
 80079a4:	f8ca 2000 	str.w	r2, [sl]
 80079a8:	f1bb 0f00 	cmp.w	fp, #0
 80079ac:	d050      	beq.n	8007a50 <__hexnan+0x130>
 80079ae:	454c      	cmp	r4, r9
 80079b0:	d206      	bcs.n	80079c0 <__hexnan+0xa0>
 80079b2:	2d07      	cmp	r5, #7
 80079b4:	dc04      	bgt.n	80079c0 <__hexnan+0xa0>
 80079b6:	462a      	mov	r2, r5
 80079b8:	4649      	mov	r1, r9
 80079ba:	4620      	mov	r0, r4
 80079bc:	f7ff ff8a 	bl	80078d4 <L_shift>
 80079c0:	4544      	cmp	r4, r8
 80079c2:	d934      	bls.n	8007a2e <__hexnan+0x10e>
 80079c4:	4623      	mov	r3, r4
 80079c6:	f1a8 0204 	sub.w	r2, r8, #4
 80079ca:	f853 1b04 	ldr.w	r1, [r3], #4
 80079ce:	429f      	cmp	r7, r3
 80079d0:	f842 1f04 	str.w	r1, [r2, #4]!
 80079d4:	d2f9      	bcs.n	80079ca <__hexnan+0xaa>
 80079d6:	1b3b      	subs	r3, r7, r4
 80079d8:	f023 0303 	bic.w	r3, r3, #3
 80079dc:	3304      	adds	r3, #4
 80079de:	3401      	adds	r4, #1
 80079e0:	3e03      	subs	r6, #3
 80079e2:	42b4      	cmp	r4, r6
 80079e4:	bf88      	it	hi
 80079e6:	2304      	movhi	r3, #4
 80079e8:	2200      	movs	r2, #0
 80079ea:	4443      	add	r3, r8
 80079ec:	f843 2b04 	str.w	r2, [r3], #4
 80079f0:	429f      	cmp	r7, r3
 80079f2:	d2fb      	bcs.n	80079ec <__hexnan+0xcc>
 80079f4:	683b      	ldr	r3, [r7, #0]
 80079f6:	b91b      	cbnz	r3, 8007a00 <__hexnan+0xe0>
 80079f8:	4547      	cmp	r7, r8
 80079fa:	d127      	bne.n	8007a4c <__hexnan+0x12c>
 80079fc:	2301      	movs	r3, #1
 80079fe:	603b      	str	r3, [r7, #0]
 8007a00:	2005      	movs	r0, #5
 8007a02:	e026      	b.n	8007a52 <__hexnan+0x132>
 8007a04:	3501      	adds	r5, #1
 8007a06:	2d08      	cmp	r5, #8
 8007a08:	f10b 0b01 	add.w	fp, fp, #1
 8007a0c:	dd06      	ble.n	8007a1c <__hexnan+0xfc>
 8007a0e:	4544      	cmp	r4, r8
 8007a10:	d9c3      	bls.n	800799a <__hexnan+0x7a>
 8007a12:	2300      	movs	r3, #0
 8007a14:	2501      	movs	r5, #1
 8007a16:	f844 3c04 	str.w	r3, [r4, #-4]
 8007a1a:	3c04      	subs	r4, #4
 8007a1c:	6822      	ldr	r2, [r4, #0]
 8007a1e:	f000 000f 	and.w	r0, r0, #15
 8007a22:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8007a26:	6022      	str	r2, [r4, #0]
 8007a28:	e7b7      	b.n	800799a <__hexnan+0x7a>
 8007a2a:	2508      	movs	r5, #8
 8007a2c:	e7b5      	b.n	800799a <__hexnan+0x7a>
 8007a2e:	9b01      	ldr	r3, [sp, #4]
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	d0df      	beq.n	80079f4 <__hexnan+0xd4>
 8007a34:	f04f 32ff 	mov.w	r2, #4294967295
 8007a38:	f1c3 0320 	rsb	r3, r3, #32
 8007a3c:	fa22 f303 	lsr.w	r3, r2, r3
 8007a40:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8007a44:	401a      	ands	r2, r3
 8007a46:	f846 2c04 	str.w	r2, [r6, #-4]
 8007a4a:	e7d3      	b.n	80079f4 <__hexnan+0xd4>
 8007a4c:	3f04      	subs	r7, #4
 8007a4e:	e7d1      	b.n	80079f4 <__hexnan+0xd4>
 8007a50:	2004      	movs	r0, #4
 8007a52:	b007      	add	sp, #28
 8007a54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08007a58 <_localeconv_r>:
 8007a58:	4800      	ldr	r0, [pc, #0]	; (8007a5c <_localeconv_r+0x4>)
 8007a5a:	4770      	bx	lr
 8007a5c:	200002d4 	.word	0x200002d4

08007a60 <_lseek_r>:
 8007a60:	b538      	push	{r3, r4, r5, lr}
 8007a62:	4604      	mov	r4, r0
 8007a64:	4608      	mov	r0, r1
 8007a66:	4611      	mov	r1, r2
 8007a68:	2200      	movs	r2, #0
 8007a6a:	4d05      	ldr	r5, [pc, #20]	; (8007a80 <_lseek_r+0x20>)
 8007a6c:	602a      	str	r2, [r5, #0]
 8007a6e:	461a      	mov	r2, r3
 8007a70:	f7f9 fd7c 	bl	800156c <_lseek>
 8007a74:	1c43      	adds	r3, r0, #1
 8007a76:	d102      	bne.n	8007a7e <_lseek_r+0x1e>
 8007a78:	682b      	ldr	r3, [r5, #0]
 8007a7a:	b103      	cbz	r3, 8007a7e <_lseek_r+0x1e>
 8007a7c:	6023      	str	r3, [r4, #0]
 8007a7e:	bd38      	pop	{r3, r4, r5, pc}
 8007a80:	200015bc 	.word	0x200015bc

08007a84 <malloc>:
 8007a84:	4b02      	ldr	r3, [pc, #8]	; (8007a90 <malloc+0xc>)
 8007a86:	4601      	mov	r1, r0
 8007a88:	6818      	ldr	r0, [r3, #0]
 8007a8a:	f000 bd65 	b.w	8008558 <_malloc_r>
 8007a8e:	bf00      	nop
 8007a90:	2000017c 	.word	0x2000017c

08007a94 <__ascii_mbtowc>:
 8007a94:	b082      	sub	sp, #8
 8007a96:	b901      	cbnz	r1, 8007a9a <__ascii_mbtowc+0x6>
 8007a98:	a901      	add	r1, sp, #4
 8007a9a:	b142      	cbz	r2, 8007aae <__ascii_mbtowc+0x1a>
 8007a9c:	b14b      	cbz	r3, 8007ab2 <__ascii_mbtowc+0x1e>
 8007a9e:	7813      	ldrb	r3, [r2, #0]
 8007aa0:	600b      	str	r3, [r1, #0]
 8007aa2:	7812      	ldrb	r2, [r2, #0]
 8007aa4:	1e10      	subs	r0, r2, #0
 8007aa6:	bf18      	it	ne
 8007aa8:	2001      	movne	r0, #1
 8007aaa:	b002      	add	sp, #8
 8007aac:	4770      	bx	lr
 8007aae:	4610      	mov	r0, r2
 8007ab0:	e7fb      	b.n	8007aaa <__ascii_mbtowc+0x16>
 8007ab2:	f06f 0001 	mvn.w	r0, #1
 8007ab6:	e7f8      	b.n	8007aaa <__ascii_mbtowc+0x16>

08007ab8 <memchr>:
 8007ab8:	4603      	mov	r3, r0
 8007aba:	b510      	push	{r4, lr}
 8007abc:	b2c9      	uxtb	r1, r1
 8007abe:	4402      	add	r2, r0
 8007ac0:	4293      	cmp	r3, r2
 8007ac2:	4618      	mov	r0, r3
 8007ac4:	d101      	bne.n	8007aca <memchr+0x12>
 8007ac6:	2000      	movs	r0, #0
 8007ac8:	e003      	b.n	8007ad2 <memchr+0x1a>
 8007aca:	7804      	ldrb	r4, [r0, #0]
 8007acc:	3301      	adds	r3, #1
 8007ace:	428c      	cmp	r4, r1
 8007ad0:	d1f6      	bne.n	8007ac0 <memchr+0x8>
 8007ad2:	bd10      	pop	{r4, pc}

08007ad4 <memcpy>:
 8007ad4:	440a      	add	r2, r1
 8007ad6:	4291      	cmp	r1, r2
 8007ad8:	f100 33ff 	add.w	r3, r0, #4294967295
 8007adc:	d100      	bne.n	8007ae0 <memcpy+0xc>
 8007ade:	4770      	bx	lr
 8007ae0:	b510      	push	{r4, lr}
 8007ae2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007ae6:	4291      	cmp	r1, r2
 8007ae8:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007aec:	d1f9      	bne.n	8007ae2 <memcpy+0xe>
 8007aee:	bd10      	pop	{r4, pc}

08007af0 <_Balloc>:
 8007af0:	b570      	push	{r4, r5, r6, lr}
 8007af2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007af4:	4604      	mov	r4, r0
 8007af6:	460d      	mov	r5, r1
 8007af8:	b976      	cbnz	r6, 8007b18 <_Balloc+0x28>
 8007afa:	2010      	movs	r0, #16
 8007afc:	f7ff ffc2 	bl	8007a84 <malloc>
 8007b00:	4602      	mov	r2, r0
 8007b02:	6260      	str	r0, [r4, #36]	; 0x24
 8007b04:	b920      	cbnz	r0, 8007b10 <_Balloc+0x20>
 8007b06:	2166      	movs	r1, #102	; 0x66
 8007b08:	4b17      	ldr	r3, [pc, #92]	; (8007b68 <_Balloc+0x78>)
 8007b0a:	4818      	ldr	r0, [pc, #96]	; (8007b6c <_Balloc+0x7c>)
 8007b0c:	f001 fb34 	bl	8009178 <__assert_func>
 8007b10:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007b14:	6006      	str	r6, [r0, #0]
 8007b16:	60c6      	str	r6, [r0, #12]
 8007b18:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8007b1a:	68f3      	ldr	r3, [r6, #12]
 8007b1c:	b183      	cbz	r3, 8007b40 <_Balloc+0x50>
 8007b1e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007b20:	68db      	ldr	r3, [r3, #12]
 8007b22:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007b26:	b9b8      	cbnz	r0, 8007b58 <_Balloc+0x68>
 8007b28:	2101      	movs	r1, #1
 8007b2a:	fa01 f605 	lsl.w	r6, r1, r5
 8007b2e:	1d72      	adds	r2, r6, #5
 8007b30:	4620      	mov	r0, r4
 8007b32:	0092      	lsls	r2, r2, #2
 8007b34:	f000 fc94 	bl	8008460 <_calloc_r>
 8007b38:	b160      	cbz	r0, 8007b54 <_Balloc+0x64>
 8007b3a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007b3e:	e00e      	b.n	8007b5e <_Balloc+0x6e>
 8007b40:	2221      	movs	r2, #33	; 0x21
 8007b42:	2104      	movs	r1, #4
 8007b44:	4620      	mov	r0, r4
 8007b46:	f000 fc8b 	bl	8008460 <_calloc_r>
 8007b4a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007b4c:	60f0      	str	r0, [r6, #12]
 8007b4e:	68db      	ldr	r3, [r3, #12]
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	d1e4      	bne.n	8007b1e <_Balloc+0x2e>
 8007b54:	2000      	movs	r0, #0
 8007b56:	bd70      	pop	{r4, r5, r6, pc}
 8007b58:	6802      	ldr	r2, [r0, #0]
 8007b5a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007b5e:	2300      	movs	r3, #0
 8007b60:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007b64:	e7f7      	b.n	8007b56 <_Balloc+0x66>
 8007b66:	bf00      	nop
 8007b68:	08009eae 	.word	0x08009eae
 8007b6c:	08009fac 	.word	0x08009fac

08007b70 <_Bfree>:
 8007b70:	b570      	push	{r4, r5, r6, lr}
 8007b72:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007b74:	4605      	mov	r5, r0
 8007b76:	460c      	mov	r4, r1
 8007b78:	b976      	cbnz	r6, 8007b98 <_Bfree+0x28>
 8007b7a:	2010      	movs	r0, #16
 8007b7c:	f7ff ff82 	bl	8007a84 <malloc>
 8007b80:	4602      	mov	r2, r0
 8007b82:	6268      	str	r0, [r5, #36]	; 0x24
 8007b84:	b920      	cbnz	r0, 8007b90 <_Bfree+0x20>
 8007b86:	218a      	movs	r1, #138	; 0x8a
 8007b88:	4b08      	ldr	r3, [pc, #32]	; (8007bac <_Bfree+0x3c>)
 8007b8a:	4809      	ldr	r0, [pc, #36]	; (8007bb0 <_Bfree+0x40>)
 8007b8c:	f001 faf4 	bl	8009178 <__assert_func>
 8007b90:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007b94:	6006      	str	r6, [r0, #0]
 8007b96:	60c6      	str	r6, [r0, #12]
 8007b98:	b13c      	cbz	r4, 8007baa <_Bfree+0x3a>
 8007b9a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007b9c:	6862      	ldr	r2, [r4, #4]
 8007b9e:	68db      	ldr	r3, [r3, #12]
 8007ba0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007ba4:	6021      	str	r1, [r4, #0]
 8007ba6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007baa:	bd70      	pop	{r4, r5, r6, pc}
 8007bac:	08009eae 	.word	0x08009eae
 8007bb0:	08009fac 	.word	0x08009fac

08007bb4 <__multadd>:
 8007bb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007bb8:	4607      	mov	r7, r0
 8007bba:	460c      	mov	r4, r1
 8007bbc:	461e      	mov	r6, r3
 8007bbe:	2000      	movs	r0, #0
 8007bc0:	690d      	ldr	r5, [r1, #16]
 8007bc2:	f101 0c14 	add.w	ip, r1, #20
 8007bc6:	f8dc 3000 	ldr.w	r3, [ip]
 8007bca:	3001      	adds	r0, #1
 8007bcc:	b299      	uxth	r1, r3
 8007bce:	fb02 6101 	mla	r1, r2, r1, r6
 8007bd2:	0c1e      	lsrs	r6, r3, #16
 8007bd4:	0c0b      	lsrs	r3, r1, #16
 8007bd6:	fb02 3306 	mla	r3, r2, r6, r3
 8007bda:	b289      	uxth	r1, r1
 8007bdc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007be0:	4285      	cmp	r5, r0
 8007be2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007be6:	f84c 1b04 	str.w	r1, [ip], #4
 8007bea:	dcec      	bgt.n	8007bc6 <__multadd+0x12>
 8007bec:	b30e      	cbz	r6, 8007c32 <__multadd+0x7e>
 8007bee:	68a3      	ldr	r3, [r4, #8]
 8007bf0:	42ab      	cmp	r3, r5
 8007bf2:	dc19      	bgt.n	8007c28 <__multadd+0x74>
 8007bf4:	6861      	ldr	r1, [r4, #4]
 8007bf6:	4638      	mov	r0, r7
 8007bf8:	3101      	adds	r1, #1
 8007bfa:	f7ff ff79 	bl	8007af0 <_Balloc>
 8007bfe:	4680      	mov	r8, r0
 8007c00:	b928      	cbnz	r0, 8007c0e <__multadd+0x5a>
 8007c02:	4602      	mov	r2, r0
 8007c04:	21b5      	movs	r1, #181	; 0xb5
 8007c06:	4b0c      	ldr	r3, [pc, #48]	; (8007c38 <__multadd+0x84>)
 8007c08:	480c      	ldr	r0, [pc, #48]	; (8007c3c <__multadd+0x88>)
 8007c0a:	f001 fab5 	bl	8009178 <__assert_func>
 8007c0e:	6922      	ldr	r2, [r4, #16]
 8007c10:	f104 010c 	add.w	r1, r4, #12
 8007c14:	3202      	adds	r2, #2
 8007c16:	0092      	lsls	r2, r2, #2
 8007c18:	300c      	adds	r0, #12
 8007c1a:	f7ff ff5b 	bl	8007ad4 <memcpy>
 8007c1e:	4621      	mov	r1, r4
 8007c20:	4638      	mov	r0, r7
 8007c22:	f7ff ffa5 	bl	8007b70 <_Bfree>
 8007c26:	4644      	mov	r4, r8
 8007c28:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007c2c:	3501      	adds	r5, #1
 8007c2e:	615e      	str	r6, [r3, #20]
 8007c30:	6125      	str	r5, [r4, #16]
 8007c32:	4620      	mov	r0, r4
 8007c34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007c38:	08009f20 	.word	0x08009f20
 8007c3c:	08009fac 	.word	0x08009fac

08007c40 <__s2b>:
 8007c40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007c44:	4615      	mov	r5, r2
 8007c46:	2209      	movs	r2, #9
 8007c48:	461f      	mov	r7, r3
 8007c4a:	3308      	adds	r3, #8
 8007c4c:	460c      	mov	r4, r1
 8007c4e:	fb93 f3f2 	sdiv	r3, r3, r2
 8007c52:	4606      	mov	r6, r0
 8007c54:	2201      	movs	r2, #1
 8007c56:	2100      	movs	r1, #0
 8007c58:	429a      	cmp	r2, r3
 8007c5a:	db09      	blt.n	8007c70 <__s2b+0x30>
 8007c5c:	4630      	mov	r0, r6
 8007c5e:	f7ff ff47 	bl	8007af0 <_Balloc>
 8007c62:	b940      	cbnz	r0, 8007c76 <__s2b+0x36>
 8007c64:	4602      	mov	r2, r0
 8007c66:	21ce      	movs	r1, #206	; 0xce
 8007c68:	4b18      	ldr	r3, [pc, #96]	; (8007ccc <__s2b+0x8c>)
 8007c6a:	4819      	ldr	r0, [pc, #100]	; (8007cd0 <__s2b+0x90>)
 8007c6c:	f001 fa84 	bl	8009178 <__assert_func>
 8007c70:	0052      	lsls	r2, r2, #1
 8007c72:	3101      	adds	r1, #1
 8007c74:	e7f0      	b.n	8007c58 <__s2b+0x18>
 8007c76:	9b08      	ldr	r3, [sp, #32]
 8007c78:	2d09      	cmp	r5, #9
 8007c7a:	6143      	str	r3, [r0, #20]
 8007c7c:	f04f 0301 	mov.w	r3, #1
 8007c80:	6103      	str	r3, [r0, #16]
 8007c82:	dd16      	ble.n	8007cb2 <__s2b+0x72>
 8007c84:	f104 0909 	add.w	r9, r4, #9
 8007c88:	46c8      	mov	r8, r9
 8007c8a:	442c      	add	r4, r5
 8007c8c:	f818 3b01 	ldrb.w	r3, [r8], #1
 8007c90:	4601      	mov	r1, r0
 8007c92:	220a      	movs	r2, #10
 8007c94:	4630      	mov	r0, r6
 8007c96:	3b30      	subs	r3, #48	; 0x30
 8007c98:	f7ff ff8c 	bl	8007bb4 <__multadd>
 8007c9c:	45a0      	cmp	r8, r4
 8007c9e:	d1f5      	bne.n	8007c8c <__s2b+0x4c>
 8007ca0:	f1a5 0408 	sub.w	r4, r5, #8
 8007ca4:	444c      	add	r4, r9
 8007ca6:	1b2d      	subs	r5, r5, r4
 8007ca8:	1963      	adds	r3, r4, r5
 8007caa:	42bb      	cmp	r3, r7
 8007cac:	db04      	blt.n	8007cb8 <__s2b+0x78>
 8007cae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007cb2:	2509      	movs	r5, #9
 8007cb4:	340a      	adds	r4, #10
 8007cb6:	e7f6      	b.n	8007ca6 <__s2b+0x66>
 8007cb8:	f814 3b01 	ldrb.w	r3, [r4], #1
 8007cbc:	4601      	mov	r1, r0
 8007cbe:	220a      	movs	r2, #10
 8007cc0:	4630      	mov	r0, r6
 8007cc2:	3b30      	subs	r3, #48	; 0x30
 8007cc4:	f7ff ff76 	bl	8007bb4 <__multadd>
 8007cc8:	e7ee      	b.n	8007ca8 <__s2b+0x68>
 8007cca:	bf00      	nop
 8007ccc:	08009f20 	.word	0x08009f20
 8007cd0:	08009fac 	.word	0x08009fac

08007cd4 <__hi0bits>:
 8007cd4:	0c02      	lsrs	r2, r0, #16
 8007cd6:	0412      	lsls	r2, r2, #16
 8007cd8:	4603      	mov	r3, r0
 8007cda:	b9ca      	cbnz	r2, 8007d10 <__hi0bits+0x3c>
 8007cdc:	0403      	lsls	r3, r0, #16
 8007cde:	2010      	movs	r0, #16
 8007ce0:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8007ce4:	bf04      	itt	eq
 8007ce6:	021b      	lsleq	r3, r3, #8
 8007ce8:	3008      	addeq	r0, #8
 8007cea:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8007cee:	bf04      	itt	eq
 8007cf0:	011b      	lsleq	r3, r3, #4
 8007cf2:	3004      	addeq	r0, #4
 8007cf4:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8007cf8:	bf04      	itt	eq
 8007cfa:	009b      	lsleq	r3, r3, #2
 8007cfc:	3002      	addeq	r0, #2
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	db05      	blt.n	8007d0e <__hi0bits+0x3a>
 8007d02:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8007d06:	f100 0001 	add.w	r0, r0, #1
 8007d0a:	bf08      	it	eq
 8007d0c:	2020      	moveq	r0, #32
 8007d0e:	4770      	bx	lr
 8007d10:	2000      	movs	r0, #0
 8007d12:	e7e5      	b.n	8007ce0 <__hi0bits+0xc>

08007d14 <__lo0bits>:
 8007d14:	6803      	ldr	r3, [r0, #0]
 8007d16:	4602      	mov	r2, r0
 8007d18:	f013 0007 	ands.w	r0, r3, #7
 8007d1c:	d00b      	beq.n	8007d36 <__lo0bits+0x22>
 8007d1e:	07d9      	lsls	r1, r3, #31
 8007d20:	d421      	bmi.n	8007d66 <__lo0bits+0x52>
 8007d22:	0798      	lsls	r0, r3, #30
 8007d24:	bf49      	itett	mi
 8007d26:	085b      	lsrmi	r3, r3, #1
 8007d28:	089b      	lsrpl	r3, r3, #2
 8007d2a:	2001      	movmi	r0, #1
 8007d2c:	6013      	strmi	r3, [r2, #0]
 8007d2e:	bf5c      	itt	pl
 8007d30:	2002      	movpl	r0, #2
 8007d32:	6013      	strpl	r3, [r2, #0]
 8007d34:	4770      	bx	lr
 8007d36:	b299      	uxth	r1, r3
 8007d38:	b909      	cbnz	r1, 8007d3e <__lo0bits+0x2a>
 8007d3a:	2010      	movs	r0, #16
 8007d3c:	0c1b      	lsrs	r3, r3, #16
 8007d3e:	b2d9      	uxtb	r1, r3
 8007d40:	b909      	cbnz	r1, 8007d46 <__lo0bits+0x32>
 8007d42:	3008      	adds	r0, #8
 8007d44:	0a1b      	lsrs	r3, r3, #8
 8007d46:	0719      	lsls	r1, r3, #28
 8007d48:	bf04      	itt	eq
 8007d4a:	091b      	lsreq	r3, r3, #4
 8007d4c:	3004      	addeq	r0, #4
 8007d4e:	0799      	lsls	r1, r3, #30
 8007d50:	bf04      	itt	eq
 8007d52:	089b      	lsreq	r3, r3, #2
 8007d54:	3002      	addeq	r0, #2
 8007d56:	07d9      	lsls	r1, r3, #31
 8007d58:	d403      	bmi.n	8007d62 <__lo0bits+0x4e>
 8007d5a:	085b      	lsrs	r3, r3, #1
 8007d5c:	f100 0001 	add.w	r0, r0, #1
 8007d60:	d003      	beq.n	8007d6a <__lo0bits+0x56>
 8007d62:	6013      	str	r3, [r2, #0]
 8007d64:	4770      	bx	lr
 8007d66:	2000      	movs	r0, #0
 8007d68:	4770      	bx	lr
 8007d6a:	2020      	movs	r0, #32
 8007d6c:	4770      	bx	lr
	...

08007d70 <__i2b>:
 8007d70:	b510      	push	{r4, lr}
 8007d72:	460c      	mov	r4, r1
 8007d74:	2101      	movs	r1, #1
 8007d76:	f7ff febb 	bl	8007af0 <_Balloc>
 8007d7a:	4602      	mov	r2, r0
 8007d7c:	b928      	cbnz	r0, 8007d8a <__i2b+0x1a>
 8007d7e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8007d82:	4b04      	ldr	r3, [pc, #16]	; (8007d94 <__i2b+0x24>)
 8007d84:	4804      	ldr	r0, [pc, #16]	; (8007d98 <__i2b+0x28>)
 8007d86:	f001 f9f7 	bl	8009178 <__assert_func>
 8007d8a:	2301      	movs	r3, #1
 8007d8c:	6144      	str	r4, [r0, #20]
 8007d8e:	6103      	str	r3, [r0, #16]
 8007d90:	bd10      	pop	{r4, pc}
 8007d92:	bf00      	nop
 8007d94:	08009f20 	.word	0x08009f20
 8007d98:	08009fac 	.word	0x08009fac

08007d9c <__multiply>:
 8007d9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007da0:	4691      	mov	r9, r2
 8007da2:	690a      	ldr	r2, [r1, #16]
 8007da4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007da8:	460c      	mov	r4, r1
 8007daa:	429a      	cmp	r2, r3
 8007dac:	bfbe      	ittt	lt
 8007dae:	460b      	movlt	r3, r1
 8007db0:	464c      	movlt	r4, r9
 8007db2:	4699      	movlt	r9, r3
 8007db4:	6927      	ldr	r7, [r4, #16]
 8007db6:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8007dba:	68a3      	ldr	r3, [r4, #8]
 8007dbc:	6861      	ldr	r1, [r4, #4]
 8007dbe:	eb07 060a 	add.w	r6, r7, sl
 8007dc2:	42b3      	cmp	r3, r6
 8007dc4:	b085      	sub	sp, #20
 8007dc6:	bfb8      	it	lt
 8007dc8:	3101      	addlt	r1, #1
 8007dca:	f7ff fe91 	bl	8007af0 <_Balloc>
 8007dce:	b930      	cbnz	r0, 8007dde <__multiply+0x42>
 8007dd0:	4602      	mov	r2, r0
 8007dd2:	f240 115d 	movw	r1, #349	; 0x15d
 8007dd6:	4b43      	ldr	r3, [pc, #268]	; (8007ee4 <__multiply+0x148>)
 8007dd8:	4843      	ldr	r0, [pc, #268]	; (8007ee8 <__multiply+0x14c>)
 8007dda:	f001 f9cd 	bl	8009178 <__assert_func>
 8007dde:	f100 0514 	add.w	r5, r0, #20
 8007de2:	462b      	mov	r3, r5
 8007de4:	2200      	movs	r2, #0
 8007de6:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007dea:	4543      	cmp	r3, r8
 8007dec:	d321      	bcc.n	8007e32 <__multiply+0x96>
 8007dee:	f104 0314 	add.w	r3, r4, #20
 8007df2:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8007df6:	f109 0314 	add.w	r3, r9, #20
 8007dfa:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8007dfe:	9202      	str	r2, [sp, #8]
 8007e00:	1b3a      	subs	r2, r7, r4
 8007e02:	3a15      	subs	r2, #21
 8007e04:	f022 0203 	bic.w	r2, r2, #3
 8007e08:	3204      	adds	r2, #4
 8007e0a:	f104 0115 	add.w	r1, r4, #21
 8007e0e:	428f      	cmp	r7, r1
 8007e10:	bf38      	it	cc
 8007e12:	2204      	movcc	r2, #4
 8007e14:	9201      	str	r2, [sp, #4]
 8007e16:	9a02      	ldr	r2, [sp, #8]
 8007e18:	9303      	str	r3, [sp, #12]
 8007e1a:	429a      	cmp	r2, r3
 8007e1c:	d80c      	bhi.n	8007e38 <__multiply+0x9c>
 8007e1e:	2e00      	cmp	r6, #0
 8007e20:	dd03      	ble.n	8007e2a <__multiply+0x8e>
 8007e22:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d059      	beq.n	8007ede <__multiply+0x142>
 8007e2a:	6106      	str	r6, [r0, #16]
 8007e2c:	b005      	add	sp, #20
 8007e2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e32:	f843 2b04 	str.w	r2, [r3], #4
 8007e36:	e7d8      	b.n	8007dea <__multiply+0x4e>
 8007e38:	f8b3 a000 	ldrh.w	sl, [r3]
 8007e3c:	f1ba 0f00 	cmp.w	sl, #0
 8007e40:	d023      	beq.n	8007e8a <__multiply+0xee>
 8007e42:	46a9      	mov	r9, r5
 8007e44:	f04f 0c00 	mov.w	ip, #0
 8007e48:	f104 0e14 	add.w	lr, r4, #20
 8007e4c:	f85e 2b04 	ldr.w	r2, [lr], #4
 8007e50:	f8d9 1000 	ldr.w	r1, [r9]
 8007e54:	fa1f fb82 	uxth.w	fp, r2
 8007e58:	b289      	uxth	r1, r1
 8007e5a:	fb0a 110b 	mla	r1, sl, fp, r1
 8007e5e:	4461      	add	r1, ip
 8007e60:	f8d9 c000 	ldr.w	ip, [r9]
 8007e64:	0c12      	lsrs	r2, r2, #16
 8007e66:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8007e6a:	fb0a c202 	mla	r2, sl, r2, ip
 8007e6e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8007e72:	b289      	uxth	r1, r1
 8007e74:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007e78:	4577      	cmp	r7, lr
 8007e7a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007e7e:	f849 1b04 	str.w	r1, [r9], #4
 8007e82:	d8e3      	bhi.n	8007e4c <__multiply+0xb0>
 8007e84:	9a01      	ldr	r2, [sp, #4]
 8007e86:	f845 c002 	str.w	ip, [r5, r2]
 8007e8a:	9a03      	ldr	r2, [sp, #12]
 8007e8c:	3304      	adds	r3, #4
 8007e8e:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8007e92:	f1b9 0f00 	cmp.w	r9, #0
 8007e96:	d020      	beq.n	8007eda <__multiply+0x13e>
 8007e98:	46ae      	mov	lr, r5
 8007e9a:	f04f 0a00 	mov.w	sl, #0
 8007e9e:	6829      	ldr	r1, [r5, #0]
 8007ea0:	f104 0c14 	add.w	ip, r4, #20
 8007ea4:	f8bc b000 	ldrh.w	fp, [ip]
 8007ea8:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8007eac:	b289      	uxth	r1, r1
 8007eae:	fb09 220b 	mla	r2, r9, fp, r2
 8007eb2:	4492      	add	sl, r2
 8007eb4:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8007eb8:	f84e 1b04 	str.w	r1, [lr], #4
 8007ebc:	f85c 2b04 	ldr.w	r2, [ip], #4
 8007ec0:	f8be 1000 	ldrh.w	r1, [lr]
 8007ec4:	0c12      	lsrs	r2, r2, #16
 8007ec6:	fb09 1102 	mla	r1, r9, r2, r1
 8007eca:	4567      	cmp	r7, ip
 8007ecc:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8007ed0:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007ed4:	d8e6      	bhi.n	8007ea4 <__multiply+0x108>
 8007ed6:	9a01      	ldr	r2, [sp, #4]
 8007ed8:	50a9      	str	r1, [r5, r2]
 8007eda:	3504      	adds	r5, #4
 8007edc:	e79b      	b.n	8007e16 <__multiply+0x7a>
 8007ede:	3e01      	subs	r6, #1
 8007ee0:	e79d      	b.n	8007e1e <__multiply+0x82>
 8007ee2:	bf00      	nop
 8007ee4:	08009f20 	.word	0x08009f20
 8007ee8:	08009fac 	.word	0x08009fac

08007eec <__pow5mult>:
 8007eec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007ef0:	4615      	mov	r5, r2
 8007ef2:	f012 0203 	ands.w	r2, r2, #3
 8007ef6:	4606      	mov	r6, r0
 8007ef8:	460f      	mov	r7, r1
 8007efa:	d007      	beq.n	8007f0c <__pow5mult+0x20>
 8007efc:	4c25      	ldr	r4, [pc, #148]	; (8007f94 <__pow5mult+0xa8>)
 8007efe:	3a01      	subs	r2, #1
 8007f00:	2300      	movs	r3, #0
 8007f02:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007f06:	f7ff fe55 	bl	8007bb4 <__multadd>
 8007f0a:	4607      	mov	r7, r0
 8007f0c:	10ad      	asrs	r5, r5, #2
 8007f0e:	d03d      	beq.n	8007f8c <__pow5mult+0xa0>
 8007f10:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8007f12:	b97c      	cbnz	r4, 8007f34 <__pow5mult+0x48>
 8007f14:	2010      	movs	r0, #16
 8007f16:	f7ff fdb5 	bl	8007a84 <malloc>
 8007f1a:	4602      	mov	r2, r0
 8007f1c:	6270      	str	r0, [r6, #36]	; 0x24
 8007f1e:	b928      	cbnz	r0, 8007f2c <__pow5mult+0x40>
 8007f20:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8007f24:	4b1c      	ldr	r3, [pc, #112]	; (8007f98 <__pow5mult+0xac>)
 8007f26:	481d      	ldr	r0, [pc, #116]	; (8007f9c <__pow5mult+0xb0>)
 8007f28:	f001 f926 	bl	8009178 <__assert_func>
 8007f2c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007f30:	6004      	str	r4, [r0, #0]
 8007f32:	60c4      	str	r4, [r0, #12]
 8007f34:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8007f38:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007f3c:	b94c      	cbnz	r4, 8007f52 <__pow5mult+0x66>
 8007f3e:	f240 2171 	movw	r1, #625	; 0x271
 8007f42:	4630      	mov	r0, r6
 8007f44:	f7ff ff14 	bl	8007d70 <__i2b>
 8007f48:	2300      	movs	r3, #0
 8007f4a:	4604      	mov	r4, r0
 8007f4c:	f8c8 0008 	str.w	r0, [r8, #8]
 8007f50:	6003      	str	r3, [r0, #0]
 8007f52:	f04f 0900 	mov.w	r9, #0
 8007f56:	07eb      	lsls	r3, r5, #31
 8007f58:	d50a      	bpl.n	8007f70 <__pow5mult+0x84>
 8007f5a:	4639      	mov	r1, r7
 8007f5c:	4622      	mov	r2, r4
 8007f5e:	4630      	mov	r0, r6
 8007f60:	f7ff ff1c 	bl	8007d9c <__multiply>
 8007f64:	4680      	mov	r8, r0
 8007f66:	4639      	mov	r1, r7
 8007f68:	4630      	mov	r0, r6
 8007f6a:	f7ff fe01 	bl	8007b70 <_Bfree>
 8007f6e:	4647      	mov	r7, r8
 8007f70:	106d      	asrs	r5, r5, #1
 8007f72:	d00b      	beq.n	8007f8c <__pow5mult+0xa0>
 8007f74:	6820      	ldr	r0, [r4, #0]
 8007f76:	b938      	cbnz	r0, 8007f88 <__pow5mult+0x9c>
 8007f78:	4622      	mov	r2, r4
 8007f7a:	4621      	mov	r1, r4
 8007f7c:	4630      	mov	r0, r6
 8007f7e:	f7ff ff0d 	bl	8007d9c <__multiply>
 8007f82:	6020      	str	r0, [r4, #0]
 8007f84:	f8c0 9000 	str.w	r9, [r0]
 8007f88:	4604      	mov	r4, r0
 8007f8a:	e7e4      	b.n	8007f56 <__pow5mult+0x6a>
 8007f8c:	4638      	mov	r0, r7
 8007f8e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007f92:	bf00      	nop
 8007f94:	0800a0f8 	.word	0x0800a0f8
 8007f98:	08009eae 	.word	0x08009eae
 8007f9c:	08009fac 	.word	0x08009fac

08007fa0 <__lshift>:
 8007fa0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007fa4:	460c      	mov	r4, r1
 8007fa6:	4607      	mov	r7, r0
 8007fa8:	4691      	mov	r9, r2
 8007faa:	6923      	ldr	r3, [r4, #16]
 8007fac:	6849      	ldr	r1, [r1, #4]
 8007fae:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007fb2:	68a3      	ldr	r3, [r4, #8]
 8007fb4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007fb8:	f108 0601 	add.w	r6, r8, #1
 8007fbc:	42b3      	cmp	r3, r6
 8007fbe:	db0b      	blt.n	8007fd8 <__lshift+0x38>
 8007fc0:	4638      	mov	r0, r7
 8007fc2:	f7ff fd95 	bl	8007af0 <_Balloc>
 8007fc6:	4605      	mov	r5, r0
 8007fc8:	b948      	cbnz	r0, 8007fde <__lshift+0x3e>
 8007fca:	4602      	mov	r2, r0
 8007fcc:	f240 11d9 	movw	r1, #473	; 0x1d9
 8007fd0:	4b29      	ldr	r3, [pc, #164]	; (8008078 <__lshift+0xd8>)
 8007fd2:	482a      	ldr	r0, [pc, #168]	; (800807c <__lshift+0xdc>)
 8007fd4:	f001 f8d0 	bl	8009178 <__assert_func>
 8007fd8:	3101      	adds	r1, #1
 8007fda:	005b      	lsls	r3, r3, #1
 8007fdc:	e7ee      	b.n	8007fbc <__lshift+0x1c>
 8007fde:	2300      	movs	r3, #0
 8007fe0:	f100 0114 	add.w	r1, r0, #20
 8007fe4:	f100 0210 	add.w	r2, r0, #16
 8007fe8:	4618      	mov	r0, r3
 8007fea:	4553      	cmp	r3, sl
 8007fec:	db37      	blt.n	800805e <__lshift+0xbe>
 8007fee:	6920      	ldr	r0, [r4, #16]
 8007ff0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007ff4:	f104 0314 	add.w	r3, r4, #20
 8007ff8:	f019 091f 	ands.w	r9, r9, #31
 8007ffc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008000:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8008004:	d02f      	beq.n	8008066 <__lshift+0xc6>
 8008006:	468a      	mov	sl, r1
 8008008:	f04f 0c00 	mov.w	ip, #0
 800800c:	f1c9 0e20 	rsb	lr, r9, #32
 8008010:	681a      	ldr	r2, [r3, #0]
 8008012:	fa02 f209 	lsl.w	r2, r2, r9
 8008016:	ea42 020c 	orr.w	r2, r2, ip
 800801a:	f84a 2b04 	str.w	r2, [sl], #4
 800801e:	f853 2b04 	ldr.w	r2, [r3], #4
 8008022:	4298      	cmp	r0, r3
 8008024:	fa22 fc0e 	lsr.w	ip, r2, lr
 8008028:	d8f2      	bhi.n	8008010 <__lshift+0x70>
 800802a:	1b03      	subs	r3, r0, r4
 800802c:	3b15      	subs	r3, #21
 800802e:	f023 0303 	bic.w	r3, r3, #3
 8008032:	3304      	adds	r3, #4
 8008034:	f104 0215 	add.w	r2, r4, #21
 8008038:	4290      	cmp	r0, r2
 800803a:	bf38      	it	cc
 800803c:	2304      	movcc	r3, #4
 800803e:	f841 c003 	str.w	ip, [r1, r3]
 8008042:	f1bc 0f00 	cmp.w	ip, #0
 8008046:	d001      	beq.n	800804c <__lshift+0xac>
 8008048:	f108 0602 	add.w	r6, r8, #2
 800804c:	3e01      	subs	r6, #1
 800804e:	4638      	mov	r0, r7
 8008050:	4621      	mov	r1, r4
 8008052:	612e      	str	r6, [r5, #16]
 8008054:	f7ff fd8c 	bl	8007b70 <_Bfree>
 8008058:	4628      	mov	r0, r5
 800805a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800805e:	f842 0f04 	str.w	r0, [r2, #4]!
 8008062:	3301      	adds	r3, #1
 8008064:	e7c1      	b.n	8007fea <__lshift+0x4a>
 8008066:	3904      	subs	r1, #4
 8008068:	f853 2b04 	ldr.w	r2, [r3], #4
 800806c:	4298      	cmp	r0, r3
 800806e:	f841 2f04 	str.w	r2, [r1, #4]!
 8008072:	d8f9      	bhi.n	8008068 <__lshift+0xc8>
 8008074:	e7ea      	b.n	800804c <__lshift+0xac>
 8008076:	bf00      	nop
 8008078:	08009f20 	.word	0x08009f20
 800807c:	08009fac 	.word	0x08009fac

08008080 <__mcmp>:
 8008080:	4603      	mov	r3, r0
 8008082:	690a      	ldr	r2, [r1, #16]
 8008084:	6900      	ldr	r0, [r0, #16]
 8008086:	b530      	push	{r4, r5, lr}
 8008088:	1a80      	subs	r0, r0, r2
 800808a:	d10d      	bne.n	80080a8 <__mcmp+0x28>
 800808c:	3314      	adds	r3, #20
 800808e:	3114      	adds	r1, #20
 8008090:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8008094:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8008098:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800809c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80080a0:	4295      	cmp	r5, r2
 80080a2:	d002      	beq.n	80080aa <__mcmp+0x2a>
 80080a4:	d304      	bcc.n	80080b0 <__mcmp+0x30>
 80080a6:	2001      	movs	r0, #1
 80080a8:	bd30      	pop	{r4, r5, pc}
 80080aa:	42a3      	cmp	r3, r4
 80080ac:	d3f4      	bcc.n	8008098 <__mcmp+0x18>
 80080ae:	e7fb      	b.n	80080a8 <__mcmp+0x28>
 80080b0:	f04f 30ff 	mov.w	r0, #4294967295
 80080b4:	e7f8      	b.n	80080a8 <__mcmp+0x28>
	...

080080b8 <__mdiff>:
 80080b8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80080bc:	460d      	mov	r5, r1
 80080be:	4607      	mov	r7, r0
 80080c0:	4611      	mov	r1, r2
 80080c2:	4628      	mov	r0, r5
 80080c4:	4614      	mov	r4, r2
 80080c6:	f7ff ffdb 	bl	8008080 <__mcmp>
 80080ca:	1e06      	subs	r6, r0, #0
 80080cc:	d111      	bne.n	80080f2 <__mdiff+0x3a>
 80080ce:	4631      	mov	r1, r6
 80080d0:	4638      	mov	r0, r7
 80080d2:	f7ff fd0d 	bl	8007af0 <_Balloc>
 80080d6:	4602      	mov	r2, r0
 80080d8:	b928      	cbnz	r0, 80080e6 <__mdiff+0x2e>
 80080da:	f240 2132 	movw	r1, #562	; 0x232
 80080de:	4b3a      	ldr	r3, [pc, #232]	; (80081c8 <__mdiff+0x110>)
 80080e0:	483a      	ldr	r0, [pc, #232]	; (80081cc <__mdiff+0x114>)
 80080e2:	f001 f849 	bl	8009178 <__assert_func>
 80080e6:	2301      	movs	r3, #1
 80080e8:	e9c0 3604 	strd	r3, r6, [r0, #16]
 80080ec:	4610      	mov	r0, r2
 80080ee:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80080f2:	bfa4      	itt	ge
 80080f4:	4623      	movge	r3, r4
 80080f6:	462c      	movge	r4, r5
 80080f8:	4638      	mov	r0, r7
 80080fa:	6861      	ldr	r1, [r4, #4]
 80080fc:	bfa6      	itte	ge
 80080fe:	461d      	movge	r5, r3
 8008100:	2600      	movge	r6, #0
 8008102:	2601      	movlt	r6, #1
 8008104:	f7ff fcf4 	bl	8007af0 <_Balloc>
 8008108:	4602      	mov	r2, r0
 800810a:	b918      	cbnz	r0, 8008114 <__mdiff+0x5c>
 800810c:	f44f 7110 	mov.w	r1, #576	; 0x240
 8008110:	4b2d      	ldr	r3, [pc, #180]	; (80081c8 <__mdiff+0x110>)
 8008112:	e7e5      	b.n	80080e0 <__mdiff+0x28>
 8008114:	f102 0814 	add.w	r8, r2, #20
 8008118:	46c2      	mov	sl, r8
 800811a:	f04f 0c00 	mov.w	ip, #0
 800811e:	6927      	ldr	r7, [r4, #16]
 8008120:	60c6      	str	r6, [r0, #12]
 8008122:	692e      	ldr	r6, [r5, #16]
 8008124:	f104 0014 	add.w	r0, r4, #20
 8008128:	f105 0914 	add.w	r9, r5, #20
 800812c:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 8008130:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8008134:	3410      	adds	r4, #16
 8008136:	f854 bf04 	ldr.w	fp, [r4, #4]!
 800813a:	f859 3b04 	ldr.w	r3, [r9], #4
 800813e:	fa1f f18b 	uxth.w	r1, fp
 8008142:	448c      	add	ip, r1
 8008144:	b299      	uxth	r1, r3
 8008146:	0c1b      	lsrs	r3, r3, #16
 8008148:	ebac 0101 	sub.w	r1, ip, r1
 800814c:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8008150:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8008154:	b289      	uxth	r1, r1
 8008156:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800815a:	454e      	cmp	r6, r9
 800815c:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8008160:	f84a 3b04 	str.w	r3, [sl], #4
 8008164:	d8e7      	bhi.n	8008136 <__mdiff+0x7e>
 8008166:	1b73      	subs	r3, r6, r5
 8008168:	3b15      	subs	r3, #21
 800816a:	f023 0303 	bic.w	r3, r3, #3
 800816e:	3515      	adds	r5, #21
 8008170:	3304      	adds	r3, #4
 8008172:	42ae      	cmp	r6, r5
 8008174:	bf38      	it	cc
 8008176:	2304      	movcc	r3, #4
 8008178:	4418      	add	r0, r3
 800817a:	4443      	add	r3, r8
 800817c:	461e      	mov	r6, r3
 800817e:	4605      	mov	r5, r0
 8008180:	4575      	cmp	r5, lr
 8008182:	d30e      	bcc.n	80081a2 <__mdiff+0xea>
 8008184:	f10e 0103 	add.w	r1, lr, #3
 8008188:	1a09      	subs	r1, r1, r0
 800818a:	f021 0103 	bic.w	r1, r1, #3
 800818e:	3803      	subs	r0, #3
 8008190:	4586      	cmp	lr, r0
 8008192:	bf38      	it	cc
 8008194:	2100      	movcc	r1, #0
 8008196:	4419      	add	r1, r3
 8008198:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 800819c:	b18b      	cbz	r3, 80081c2 <__mdiff+0x10a>
 800819e:	6117      	str	r7, [r2, #16]
 80081a0:	e7a4      	b.n	80080ec <__mdiff+0x34>
 80081a2:	f855 8b04 	ldr.w	r8, [r5], #4
 80081a6:	fa1f f188 	uxth.w	r1, r8
 80081aa:	4461      	add	r1, ip
 80081ac:	140c      	asrs	r4, r1, #16
 80081ae:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80081b2:	b289      	uxth	r1, r1
 80081b4:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 80081b8:	ea4f 4c24 	mov.w	ip, r4, asr #16
 80081bc:	f846 1b04 	str.w	r1, [r6], #4
 80081c0:	e7de      	b.n	8008180 <__mdiff+0xc8>
 80081c2:	3f01      	subs	r7, #1
 80081c4:	e7e8      	b.n	8008198 <__mdiff+0xe0>
 80081c6:	bf00      	nop
 80081c8:	08009f20 	.word	0x08009f20
 80081cc:	08009fac 	.word	0x08009fac

080081d0 <__ulp>:
 80081d0:	4b11      	ldr	r3, [pc, #68]	; (8008218 <__ulp+0x48>)
 80081d2:	400b      	ands	r3, r1
 80081d4:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 80081d8:	2b00      	cmp	r3, #0
 80081da:	dd02      	ble.n	80081e2 <__ulp+0x12>
 80081dc:	2000      	movs	r0, #0
 80081de:	4619      	mov	r1, r3
 80081e0:	4770      	bx	lr
 80081e2:	425b      	negs	r3, r3
 80081e4:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 80081e8:	f04f 0000 	mov.w	r0, #0
 80081ec:	f04f 0100 	mov.w	r1, #0
 80081f0:	ea4f 5223 	mov.w	r2, r3, asr #20
 80081f4:	da04      	bge.n	8008200 <__ulp+0x30>
 80081f6:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80081fa:	fa43 f102 	asr.w	r1, r3, r2
 80081fe:	4770      	bx	lr
 8008200:	f1a2 0314 	sub.w	r3, r2, #20
 8008204:	2b1e      	cmp	r3, #30
 8008206:	bfd6      	itet	le
 8008208:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800820c:	2301      	movgt	r3, #1
 800820e:	fa22 f303 	lsrle.w	r3, r2, r3
 8008212:	4618      	mov	r0, r3
 8008214:	4770      	bx	lr
 8008216:	bf00      	nop
 8008218:	7ff00000 	.word	0x7ff00000

0800821c <__b2d>:
 800821c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008220:	6907      	ldr	r7, [r0, #16]
 8008222:	f100 0914 	add.w	r9, r0, #20
 8008226:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 800822a:	f857 6c04 	ldr.w	r6, [r7, #-4]
 800822e:	f1a7 0804 	sub.w	r8, r7, #4
 8008232:	4630      	mov	r0, r6
 8008234:	f7ff fd4e 	bl	8007cd4 <__hi0bits>
 8008238:	f1c0 0320 	rsb	r3, r0, #32
 800823c:	280a      	cmp	r0, #10
 800823e:	600b      	str	r3, [r1, #0]
 8008240:	491f      	ldr	r1, [pc, #124]	; (80082c0 <__b2d+0xa4>)
 8008242:	dc17      	bgt.n	8008274 <__b2d+0x58>
 8008244:	45c1      	cmp	r9, r8
 8008246:	bf28      	it	cs
 8008248:	2200      	movcs	r2, #0
 800824a:	f1c0 0c0b 	rsb	ip, r0, #11
 800824e:	fa26 f30c 	lsr.w	r3, r6, ip
 8008252:	bf38      	it	cc
 8008254:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8008258:	ea43 0501 	orr.w	r5, r3, r1
 800825c:	f100 0315 	add.w	r3, r0, #21
 8008260:	fa06 f303 	lsl.w	r3, r6, r3
 8008264:	fa22 f20c 	lsr.w	r2, r2, ip
 8008268:	ea43 0402 	orr.w	r4, r3, r2
 800826c:	4620      	mov	r0, r4
 800826e:	4629      	mov	r1, r5
 8008270:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008274:	45c1      	cmp	r9, r8
 8008276:	bf2e      	itee	cs
 8008278:	2200      	movcs	r2, #0
 800827a:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 800827e:	f1a7 0808 	subcc.w	r8, r7, #8
 8008282:	f1b0 030b 	subs.w	r3, r0, #11
 8008286:	d016      	beq.n	80082b6 <__b2d+0x9a>
 8008288:	f1c3 0720 	rsb	r7, r3, #32
 800828c:	fa22 f107 	lsr.w	r1, r2, r7
 8008290:	45c8      	cmp	r8, r9
 8008292:	fa06 f603 	lsl.w	r6, r6, r3
 8008296:	ea46 0601 	orr.w	r6, r6, r1
 800829a:	bf94      	ite	ls
 800829c:	2100      	movls	r1, #0
 800829e:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 80082a2:	f046 557f 	orr.w	r5, r6, #1069547520	; 0x3fc00000
 80082a6:	fa02 f003 	lsl.w	r0, r2, r3
 80082aa:	40f9      	lsrs	r1, r7
 80082ac:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 80082b0:	ea40 0401 	orr.w	r4, r0, r1
 80082b4:	e7da      	b.n	800826c <__b2d+0x50>
 80082b6:	4614      	mov	r4, r2
 80082b8:	ea46 0501 	orr.w	r5, r6, r1
 80082bc:	e7d6      	b.n	800826c <__b2d+0x50>
 80082be:	bf00      	nop
 80082c0:	3ff00000 	.word	0x3ff00000

080082c4 <__d2b>:
 80082c4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80082c8:	2101      	movs	r1, #1
 80082ca:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 80082ce:	4690      	mov	r8, r2
 80082d0:	461d      	mov	r5, r3
 80082d2:	f7ff fc0d 	bl	8007af0 <_Balloc>
 80082d6:	4604      	mov	r4, r0
 80082d8:	b930      	cbnz	r0, 80082e8 <__d2b+0x24>
 80082da:	4602      	mov	r2, r0
 80082dc:	f240 310a 	movw	r1, #778	; 0x30a
 80082e0:	4b24      	ldr	r3, [pc, #144]	; (8008374 <__d2b+0xb0>)
 80082e2:	4825      	ldr	r0, [pc, #148]	; (8008378 <__d2b+0xb4>)
 80082e4:	f000 ff48 	bl	8009178 <__assert_func>
 80082e8:	f3c5 0313 	ubfx	r3, r5, #0, #20
 80082ec:	f3c5 550a 	ubfx	r5, r5, #20, #11
 80082f0:	bb2d      	cbnz	r5, 800833e <__d2b+0x7a>
 80082f2:	9301      	str	r3, [sp, #4]
 80082f4:	f1b8 0300 	subs.w	r3, r8, #0
 80082f8:	d026      	beq.n	8008348 <__d2b+0x84>
 80082fa:	4668      	mov	r0, sp
 80082fc:	9300      	str	r3, [sp, #0]
 80082fe:	f7ff fd09 	bl	8007d14 <__lo0bits>
 8008302:	9900      	ldr	r1, [sp, #0]
 8008304:	b1f0      	cbz	r0, 8008344 <__d2b+0x80>
 8008306:	9a01      	ldr	r2, [sp, #4]
 8008308:	f1c0 0320 	rsb	r3, r0, #32
 800830c:	fa02 f303 	lsl.w	r3, r2, r3
 8008310:	430b      	orrs	r3, r1
 8008312:	40c2      	lsrs	r2, r0
 8008314:	6163      	str	r3, [r4, #20]
 8008316:	9201      	str	r2, [sp, #4]
 8008318:	9b01      	ldr	r3, [sp, #4]
 800831a:	2b00      	cmp	r3, #0
 800831c:	bf14      	ite	ne
 800831e:	2102      	movne	r1, #2
 8008320:	2101      	moveq	r1, #1
 8008322:	61a3      	str	r3, [r4, #24]
 8008324:	6121      	str	r1, [r4, #16]
 8008326:	b1c5      	cbz	r5, 800835a <__d2b+0x96>
 8008328:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800832c:	4405      	add	r5, r0
 800832e:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008332:	603d      	str	r5, [r7, #0]
 8008334:	6030      	str	r0, [r6, #0]
 8008336:	4620      	mov	r0, r4
 8008338:	b002      	add	sp, #8
 800833a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800833e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008342:	e7d6      	b.n	80082f2 <__d2b+0x2e>
 8008344:	6161      	str	r1, [r4, #20]
 8008346:	e7e7      	b.n	8008318 <__d2b+0x54>
 8008348:	a801      	add	r0, sp, #4
 800834a:	f7ff fce3 	bl	8007d14 <__lo0bits>
 800834e:	2101      	movs	r1, #1
 8008350:	9b01      	ldr	r3, [sp, #4]
 8008352:	6121      	str	r1, [r4, #16]
 8008354:	6163      	str	r3, [r4, #20]
 8008356:	3020      	adds	r0, #32
 8008358:	e7e5      	b.n	8008326 <__d2b+0x62>
 800835a:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 800835e:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008362:	6038      	str	r0, [r7, #0]
 8008364:	6918      	ldr	r0, [r3, #16]
 8008366:	f7ff fcb5 	bl	8007cd4 <__hi0bits>
 800836a:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 800836e:	6031      	str	r1, [r6, #0]
 8008370:	e7e1      	b.n	8008336 <__d2b+0x72>
 8008372:	bf00      	nop
 8008374:	08009f20 	.word	0x08009f20
 8008378:	08009fac 	.word	0x08009fac

0800837c <__ratio>:
 800837c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008380:	4688      	mov	r8, r1
 8008382:	4669      	mov	r1, sp
 8008384:	4681      	mov	r9, r0
 8008386:	f7ff ff49 	bl	800821c <__b2d>
 800838a:	460f      	mov	r7, r1
 800838c:	4604      	mov	r4, r0
 800838e:	460d      	mov	r5, r1
 8008390:	4640      	mov	r0, r8
 8008392:	a901      	add	r1, sp, #4
 8008394:	f7ff ff42 	bl	800821c <__b2d>
 8008398:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800839c:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80083a0:	468b      	mov	fp, r1
 80083a2:	eba3 0c02 	sub.w	ip, r3, r2
 80083a6:	e9dd 3200 	ldrd	r3, r2, [sp]
 80083aa:	1a9b      	subs	r3, r3, r2
 80083ac:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	bfd5      	itete	le
 80083b4:	460a      	movle	r2, r1
 80083b6:	462a      	movgt	r2, r5
 80083b8:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80083bc:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 80083c0:	bfd8      	it	le
 80083c2:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 80083c6:	465b      	mov	r3, fp
 80083c8:	4602      	mov	r2, r0
 80083ca:	4639      	mov	r1, r7
 80083cc:	4620      	mov	r0, r4
 80083ce:	f7f8 f9ad 	bl	800072c <__aeabi_ddiv>
 80083d2:	b003      	add	sp, #12
 80083d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080083d8 <__copybits>:
 80083d8:	3901      	subs	r1, #1
 80083da:	b570      	push	{r4, r5, r6, lr}
 80083dc:	1149      	asrs	r1, r1, #5
 80083de:	6914      	ldr	r4, [r2, #16]
 80083e0:	3101      	adds	r1, #1
 80083e2:	f102 0314 	add.w	r3, r2, #20
 80083e6:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80083ea:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80083ee:	1f05      	subs	r5, r0, #4
 80083f0:	42a3      	cmp	r3, r4
 80083f2:	d30c      	bcc.n	800840e <__copybits+0x36>
 80083f4:	1aa3      	subs	r3, r4, r2
 80083f6:	3b11      	subs	r3, #17
 80083f8:	f023 0303 	bic.w	r3, r3, #3
 80083fc:	3211      	adds	r2, #17
 80083fe:	42a2      	cmp	r2, r4
 8008400:	bf88      	it	hi
 8008402:	2300      	movhi	r3, #0
 8008404:	4418      	add	r0, r3
 8008406:	2300      	movs	r3, #0
 8008408:	4288      	cmp	r0, r1
 800840a:	d305      	bcc.n	8008418 <__copybits+0x40>
 800840c:	bd70      	pop	{r4, r5, r6, pc}
 800840e:	f853 6b04 	ldr.w	r6, [r3], #4
 8008412:	f845 6f04 	str.w	r6, [r5, #4]!
 8008416:	e7eb      	b.n	80083f0 <__copybits+0x18>
 8008418:	f840 3b04 	str.w	r3, [r0], #4
 800841c:	e7f4      	b.n	8008408 <__copybits+0x30>

0800841e <__any_on>:
 800841e:	f100 0214 	add.w	r2, r0, #20
 8008422:	6900      	ldr	r0, [r0, #16]
 8008424:	114b      	asrs	r3, r1, #5
 8008426:	4298      	cmp	r0, r3
 8008428:	b510      	push	{r4, lr}
 800842a:	db11      	blt.n	8008450 <__any_on+0x32>
 800842c:	dd0a      	ble.n	8008444 <__any_on+0x26>
 800842e:	f011 011f 	ands.w	r1, r1, #31
 8008432:	d007      	beq.n	8008444 <__any_on+0x26>
 8008434:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8008438:	fa24 f001 	lsr.w	r0, r4, r1
 800843c:	fa00 f101 	lsl.w	r1, r0, r1
 8008440:	428c      	cmp	r4, r1
 8008442:	d10b      	bne.n	800845c <__any_on+0x3e>
 8008444:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8008448:	4293      	cmp	r3, r2
 800844a:	d803      	bhi.n	8008454 <__any_on+0x36>
 800844c:	2000      	movs	r0, #0
 800844e:	bd10      	pop	{r4, pc}
 8008450:	4603      	mov	r3, r0
 8008452:	e7f7      	b.n	8008444 <__any_on+0x26>
 8008454:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008458:	2900      	cmp	r1, #0
 800845a:	d0f5      	beq.n	8008448 <__any_on+0x2a>
 800845c:	2001      	movs	r0, #1
 800845e:	e7f6      	b.n	800844e <__any_on+0x30>

08008460 <_calloc_r>:
 8008460:	b570      	push	{r4, r5, r6, lr}
 8008462:	fba1 5402 	umull	r5, r4, r1, r2
 8008466:	b934      	cbnz	r4, 8008476 <_calloc_r+0x16>
 8008468:	4629      	mov	r1, r5
 800846a:	f000 f875 	bl	8008558 <_malloc_r>
 800846e:	4606      	mov	r6, r0
 8008470:	b928      	cbnz	r0, 800847e <_calloc_r+0x1e>
 8008472:	4630      	mov	r0, r6
 8008474:	bd70      	pop	{r4, r5, r6, pc}
 8008476:	220c      	movs	r2, #12
 8008478:	2600      	movs	r6, #0
 800847a:	6002      	str	r2, [r0, #0]
 800847c:	e7f9      	b.n	8008472 <_calloc_r+0x12>
 800847e:	462a      	mov	r2, r5
 8008480:	4621      	mov	r1, r4
 8008482:	f7fc fb3b 	bl	8004afc <memset>
 8008486:	e7f4      	b.n	8008472 <_calloc_r+0x12>

08008488 <_free_r>:
 8008488:	b538      	push	{r3, r4, r5, lr}
 800848a:	4605      	mov	r5, r0
 800848c:	2900      	cmp	r1, #0
 800848e:	d040      	beq.n	8008512 <_free_r+0x8a>
 8008490:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008494:	1f0c      	subs	r4, r1, #4
 8008496:	2b00      	cmp	r3, #0
 8008498:	bfb8      	it	lt
 800849a:	18e4      	addlt	r4, r4, r3
 800849c:	f001 f86c 	bl	8009578 <__malloc_lock>
 80084a0:	4a1c      	ldr	r2, [pc, #112]	; (8008514 <_free_r+0x8c>)
 80084a2:	6813      	ldr	r3, [r2, #0]
 80084a4:	b933      	cbnz	r3, 80084b4 <_free_r+0x2c>
 80084a6:	6063      	str	r3, [r4, #4]
 80084a8:	6014      	str	r4, [r2, #0]
 80084aa:	4628      	mov	r0, r5
 80084ac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80084b0:	f001 b868 	b.w	8009584 <__malloc_unlock>
 80084b4:	42a3      	cmp	r3, r4
 80084b6:	d908      	bls.n	80084ca <_free_r+0x42>
 80084b8:	6820      	ldr	r0, [r4, #0]
 80084ba:	1821      	adds	r1, r4, r0
 80084bc:	428b      	cmp	r3, r1
 80084be:	bf01      	itttt	eq
 80084c0:	6819      	ldreq	r1, [r3, #0]
 80084c2:	685b      	ldreq	r3, [r3, #4]
 80084c4:	1809      	addeq	r1, r1, r0
 80084c6:	6021      	streq	r1, [r4, #0]
 80084c8:	e7ed      	b.n	80084a6 <_free_r+0x1e>
 80084ca:	461a      	mov	r2, r3
 80084cc:	685b      	ldr	r3, [r3, #4]
 80084ce:	b10b      	cbz	r3, 80084d4 <_free_r+0x4c>
 80084d0:	42a3      	cmp	r3, r4
 80084d2:	d9fa      	bls.n	80084ca <_free_r+0x42>
 80084d4:	6811      	ldr	r1, [r2, #0]
 80084d6:	1850      	adds	r0, r2, r1
 80084d8:	42a0      	cmp	r0, r4
 80084da:	d10b      	bne.n	80084f4 <_free_r+0x6c>
 80084dc:	6820      	ldr	r0, [r4, #0]
 80084de:	4401      	add	r1, r0
 80084e0:	1850      	adds	r0, r2, r1
 80084e2:	4283      	cmp	r3, r0
 80084e4:	6011      	str	r1, [r2, #0]
 80084e6:	d1e0      	bne.n	80084aa <_free_r+0x22>
 80084e8:	6818      	ldr	r0, [r3, #0]
 80084ea:	685b      	ldr	r3, [r3, #4]
 80084ec:	4401      	add	r1, r0
 80084ee:	6011      	str	r1, [r2, #0]
 80084f0:	6053      	str	r3, [r2, #4]
 80084f2:	e7da      	b.n	80084aa <_free_r+0x22>
 80084f4:	d902      	bls.n	80084fc <_free_r+0x74>
 80084f6:	230c      	movs	r3, #12
 80084f8:	602b      	str	r3, [r5, #0]
 80084fa:	e7d6      	b.n	80084aa <_free_r+0x22>
 80084fc:	6820      	ldr	r0, [r4, #0]
 80084fe:	1821      	adds	r1, r4, r0
 8008500:	428b      	cmp	r3, r1
 8008502:	bf01      	itttt	eq
 8008504:	6819      	ldreq	r1, [r3, #0]
 8008506:	685b      	ldreq	r3, [r3, #4]
 8008508:	1809      	addeq	r1, r1, r0
 800850a:	6021      	streq	r1, [r4, #0]
 800850c:	6063      	str	r3, [r4, #4]
 800850e:	6054      	str	r4, [r2, #4]
 8008510:	e7cb      	b.n	80084aa <_free_r+0x22>
 8008512:	bd38      	pop	{r3, r4, r5, pc}
 8008514:	200015b4 	.word	0x200015b4

08008518 <sbrk_aligned>:
 8008518:	b570      	push	{r4, r5, r6, lr}
 800851a:	4e0e      	ldr	r6, [pc, #56]	; (8008554 <sbrk_aligned+0x3c>)
 800851c:	460c      	mov	r4, r1
 800851e:	6831      	ldr	r1, [r6, #0]
 8008520:	4605      	mov	r5, r0
 8008522:	b911      	cbnz	r1, 800852a <sbrk_aligned+0x12>
 8008524:	f000 fd26 	bl	8008f74 <_sbrk_r>
 8008528:	6030      	str	r0, [r6, #0]
 800852a:	4621      	mov	r1, r4
 800852c:	4628      	mov	r0, r5
 800852e:	f000 fd21 	bl	8008f74 <_sbrk_r>
 8008532:	1c43      	adds	r3, r0, #1
 8008534:	d00a      	beq.n	800854c <sbrk_aligned+0x34>
 8008536:	1cc4      	adds	r4, r0, #3
 8008538:	f024 0403 	bic.w	r4, r4, #3
 800853c:	42a0      	cmp	r0, r4
 800853e:	d007      	beq.n	8008550 <sbrk_aligned+0x38>
 8008540:	1a21      	subs	r1, r4, r0
 8008542:	4628      	mov	r0, r5
 8008544:	f000 fd16 	bl	8008f74 <_sbrk_r>
 8008548:	3001      	adds	r0, #1
 800854a:	d101      	bne.n	8008550 <sbrk_aligned+0x38>
 800854c:	f04f 34ff 	mov.w	r4, #4294967295
 8008550:	4620      	mov	r0, r4
 8008552:	bd70      	pop	{r4, r5, r6, pc}
 8008554:	200015b8 	.word	0x200015b8

08008558 <_malloc_r>:
 8008558:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800855c:	1ccd      	adds	r5, r1, #3
 800855e:	f025 0503 	bic.w	r5, r5, #3
 8008562:	3508      	adds	r5, #8
 8008564:	2d0c      	cmp	r5, #12
 8008566:	bf38      	it	cc
 8008568:	250c      	movcc	r5, #12
 800856a:	2d00      	cmp	r5, #0
 800856c:	4607      	mov	r7, r0
 800856e:	db01      	blt.n	8008574 <_malloc_r+0x1c>
 8008570:	42a9      	cmp	r1, r5
 8008572:	d905      	bls.n	8008580 <_malloc_r+0x28>
 8008574:	230c      	movs	r3, #12
 8008576:	2600      	movs	r6, #0
 8008578:	603b      	str	r3, [r7, #0]
 800857a:	4630      	mov	r0, r6
 800857c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008580:	4e2e      	ldr	r6, [pc, #184]	; (800863c <_malloc_r+0xe4>)
 8008582:	f000 fff9 	bl	8009578 <__malloc_lock>
 8008586:	6833      	ldr	r3, [r6, #0]
 8008588:	461c      	mov	r4, r3
 800858a:	bb34      	cbnz	r4, 80085da <_malloc_r+0x82>
 800858c:	4629      	mov	r1, r5
 800858e:	4638      	mov	r0, r7
 8008590:	f7ff ffc2 	bl	8008518 <sbrk_aligned>
 8008594:	1c43      	adds	r3, r0, #1
 8008596:	4604      	mov	r4, r0
 8008598:	d14d      	bne.n	8008636 <_malloc_r+0xde>
 800859a:	6834      	ldr	r4, [r6, #0]
 800859c:	4626      	mov	r6, r4
 800859e:	2e00      	cmp	r6, #0
 80085a0:	d140      	bne.n	8008624 <_malloc_r+0xcc>
 80085a2:	6823      	ldr	r3, [r4, #0]
 80085a4:	4631      	mov	r1, r6
 80085a6:	4638      	mov	r0, r7
 80085a8:	eb04 0803 	add.w	r8, r4, r3
 80085ac:	f000 fce2 	bl	8008f74 <_sbrk_r>
 80085b0:	4580      	cmp	r8, r0
 80085b2:	d13a      	bne.n	800862a <_malloc_r+0xd2>
 80085b4:	6821      	ldr	r1, [r4, #0]
 80085b6:	3503      	adds	r5, #3
 80085b8:	1a6d      	subs	r5, r5, r1
 80085ba:	f025 0503 	bic.w	r5, r5, #3
 80085be:	3508      	adds	r5, #8
 80085c0:	2d0c      	cmp	r5, #12
 80085c2:	bf38      	it	cc
 80085c4:	250c      	movcc	r5, #12
 80085c6:	4638      	mov	r0, r7
 80085c8:	4629      	mov	r1, r5
 80085ca:	f7ff ffa5 	bl	8008518 <sbrk_aligned>
 80085ce:	3001      	adds	r0, #1
 80085d0:	d02b      	beq.n	800862a <_malloc_r+0xd2>
 80085d2:	6823      	ldr	r3, [r4, #0]
 80085d4:	442b      	add	r3, r5
 80085d6:	6023      	str	r3, [r4, #0]
 80085d8:	e00e      	b.n	80085f8 <_malloc_r+0xa0>
 80085da:	6822      	ldr	r2, [r4, #0]
 80085dc:	1b52      	subs	r2, r2, r5
 80085de:	d41e      	bmi.n	800861e <_malloc_r+0xc6>
 80085e0:	2a0b      	cmp	r2, #11
 80085e2:	d916      	bls.n	8008612 <_malloc_r+0xba>
 80085e4:	1961      	adds	r1, r4, r5
 80085e6:	42a3      	cmp	r3, r4
 80085e8:	6025      	str	r5, [r4, #0]
 80085ea:	bf18      	it	ne
 80085ec:	6059      	strne	r1, [r3, #4]
 80085ee:	6863      	ldr	r3, [r4, #4]
 80085f0:	bf08      	it	eq
 80085f2:	6031      	streq	r1, [r6, #0]
 80085f4:	5162      	str	r2, [r4, r5]
 80085f6:	604b      	str	r3, [r1, #4]
 80085f8:	4638      	mov	r0, r7
 80085fa:	f104 060b 	add.w	r6, r4, #11
 80085fe:	f000 ffc1 	bl	8009584 <__malloc_unlock>
 8008602:	f026 0607 	bic.w	r6, r6, #7
 8008606:	1d23      	adds	r3, r4, #4
 8008608:	1af2      	subs	r2, r6, r3
 800860a:	d0b6      	beq.n	800857a <_malloc_r+0x22>
 800860c:	1b9b      	subs	r3, r3, r6
 800860e:	50a3      	str	r3, [r4, r2]
 8008610:	e7b3      	b.n	800857a <_malloc_r+0x22>
 8008612:	6862      	ldr	r2, [r4, #4]
 8008614:	42a3      	cmp	r3, r4
 8008616:	bf0c      	ite	eq
 8008618:	6032      	streq	r2, [r6, #0]
 800861a:	605a      	strne	r2, [r3, #4]
 800861c:	e7ec      	b.n	80085f8 <_malloc_r+0xa0>
 800861e:	4623      	mov	r3, r4
 8008620:	6864      	ldr	r4, [r4, #4]
 8008622:	e7b2      	b.n	800858a <_malloc_r+0x32>
 8008624:	4634      	mov	r4, r6
 8008626:	6876      	ldr	r6, [r6, #4]
 8008628:	e7b9      	b.n	800859e <_malloc_r+0x46>
 800862a:	230c      	movs	r3, #12
 800862c:	4638      	mov	r0, r7
 800862e:	603b      	str	r3, [r7, #0]
 8008630:	f000 ffa8 	bl	8009584 <__malloc_unlock>
 8008634:	e7a1      	b.n	800857a <_malloc_r+0x22>
 8008636:	6025      	str	r5, [r4, #0]
 8008638:	e7de      	b.n	80085f8 <_malloc_r+0xa0>
 800863a:	bf00      	nop
 800863c:	200015b4 	.word	0x200015b4

08008640 <__ssputs_r>:
 8008640:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008644:	688e      	ldr	r6, [r1, #8]
 8008646:	4682      	mov	sl, r0
 8008648:	429e      	cmp	r6, r3
 800864a:	460c      	mov	r4, r1
 800864c:	4690      	mov	r8, r2
 800864e:	461f      	mov	r7, r3
 8008650:	d838      	bhi.n	80086c4 <__ssputs_r+0x84>
 8008652:	898a      	ldrh	r2, [r1, #12]
 8008654:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008658:	d032      	beq.n	80086c0 <__ssputs_r+0x80>
 800865a:	6825      	ldr	r5, [r4, #0]
 800865c:	6909      	ldr	r1, [r1, #16]
 800865e:	3301      	adds	r3, #1
 8008660:	eba5 0901 	sub.w	r9, r5, r1
 8008664:	6965      	ldr	r5, [r4, #20]
 8008666:	444b      	add	r3, r9
 8008668:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800866c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008670:	106d      	asrs	r5, r5, #1
 8008672:	429d      	cmp	r5, r3
 8008674:	bf38      	it	cc
 8008676:	461d      	movcc	r5, r3
 8008678:	0553      	lsls	r3, r2, #21
 800867a:	d531      	bpl.n	80086e0 <__ssputs_r+0xa0>
 800867c:	4629      	mov	r1, r5
 800867e:	f7ff ff6b 	bl	8008558 <_malloc_r>
 8008682:	4606      	mov	r6, r0
 8008684:	b950      	cbnz	r0, 800869c <__ssputs_r+0x5c>
 8008686:	230c      	movs	r3, #12
 8008688:	f04f 30ff 	mov.w	r0, #4294967295
 800868c:	f8ca 3000 	str.w	r3, [sl]
 8008690:	89a3      	ldrh	r3, [r4, #12]
 8008692:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008696:	81a3      	strh	r3, [r4, #12]
 8008698:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800869c:	464a      	mov	r2, r9
 800869e:	6921      	ldr	r1, [r4, #16]
 80086a0:	f7ff fa18 	bl	8007ad4 <memcpy>
 80086a4:	89a3      	ldrh	r3, [r4, #12]
 80086a6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80086aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80086ae:	81a3      	strh	r3, [r4, #12]
 80086b0:	6126      	str	r6, [r4, #16]
 80086b2:	444e      	add	r6, r9
 80086b4:	6026      	str	r6, [r4, #0]
 80086b6:	463e      	mov	r6, r7
 80086b8:	6165      	str	r5, [r4, #20]
 80086ba:	eba5 0509 	sub.w	r5, r5, r9
 80086be:	60a5      	str	r5, [r4, #8]
 80086c0:	42be      	cmp	r6, r7
 80086c2:	d900      	bls.n	80086c6 <__ssputs_r+0x86>
 80086c4:	463e      	mov	r6, r7
 80086c6:	4632      	mov	r2, r6
 80086c8:	4641      	mov	r1, r8
 80086ca:	6820      	ldr	r0, [r4, #0]
 80086cc:	f000 ff3a 	bl	8009544 <memmove>
 80086d0:	68a3      	ldr	r3, [r4, #8]
 80086d2:	2000      	movs	r0, #0
 80086d4:	1b9b      	subs	r3, r3, r6
 80086d6:	60a3      	str	r3, [r4, #8]
 80086d8:	6823      	ldr	r3, [r4, #0]
 80086da:	4433      	add	r3, r6
 80086dc:	6023      	str	r3, [r4, #0]
 80086de:	e7db      	b.n	8008698 <__ssputs_r+0x58>
 80086e0:	462a      	mov	r2, r5
 80086e2:	f000 ff55 	bl	8009590 <_realloc_r>
 80086e6:	4606      	mov	r6, r0
 80086e8:	2800      	cmp	r0, #0
 80086ea:	d1e1      	bne.n	80086b0 <__ssputs_r+0x70>
 80086ec:	4650      	mov	r0, sl
 80086ee:	6921      	ldr	r1, [r4, #16]
 80086f0:	f7ff feca 	bl	8008488 <_free_r>
 80086f4:	e7c7      	b.n	8008686 <__ssputs_r+0x46>
	...

080086f8 <_svfiprintf_r>:
 80086f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80086fc:	4698      	mov	r8, r3
 80086fe:	898b      	ldrh	r3, [r1, #12]
 8008700:	4607      	mov	r7, r0
 8008702:	061b      	lsls	r3, r3, #24
 8008704:	460d      	mov	r5, r1
 8008706:	4614      	mov	r4, r2
 8008708:	b09d      	sub	sp, #116	; 0x74
 800870a:	d50e      	bpl.n	800872a <_svfiprintf_r+0x32>
 800870c:	690b      	ldr	r3, [r1, #16]
 800870e:	b963      	cbnz	r3, 800872a <_svfiprintf_r+0x32>
 8008710:	2140      	movs	r1, #64	; 0x40
 8008712:	f7ff ff21 	bl	8008558 <_malloc_r>
 8008716:	6028      	str	r0, [r5, #0]
 8008718:	6128      	str	r0, [r5, #16]
 800871a:	b920      	cbnz	r0, 8008726 <_svfiprintf_r+0x2e>
 800871c:	230c      	movs	r3, #12
 800871e:	603b      	str	r3, [r7, #0]
 8008720:	f04f 30ff 	mov.w	r0, #4294967295
 8008724:	e0d1      	b.n	80088ca <_svfiprintf_r+0x1d2>
 8008726:	2340      	movs	r3, #64	; 0x40
 8008728:	616b      	str	r3, [r5, #20]
 800872a:	2300      	movs	r3, #0
 800872c:	9309      	str	r3, [sp, #36]	; 0x24
 800872e:	2320      	movs	r3, #32
 8008730:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008734:	2330      	movs	r3, #48	; 0x30
 8008736:	f04f 0901 	mov.w	r9, #1
 800873a:	f8cd 800c 	str.w	r8, [sp, #12]
 800873e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80088e4 <_svfiprintf_r+0x1ec>
 8008742:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008746:	4623      	mov	r3, r4
 8008748:	469a      	mov	sl, r3
 800874a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800874e:	b10a      	cbz	r2, 8008754 <_svfiprintf_r+0x5c>
 8008750:	2a25      	cmp	r2, #37	; 0x25
 8008752:	d1f9      	bne.n	8008748 <_svfiprintf_r+0x50>
 8008754:	ebba 0b04 	subs.w	fp, sl, r4
 8008758:	d00b      	beq.n	8008772 <_svfiprintf_r+0x7a>
 800875a:	465b      	mov	r3, fp
 800875c:	4622      	mov	r2, r4
 800875e:	4629      	mov	r1, r5
 8008760:	4638      	mov	r0, r7
 8008762:	f7ff ff6d 	bl	8008640 <__ssputs_r>
 8008766:	3001      	adds	r0, #1
 8008768:	f000 80aa 	beq.w	80088c0 <_svfiprintf_r+0x1c8>
 800876c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800876e:	445a      	add	r2, fp
 8008770:	9209      	str	r2, [sp, #36]	; 0x24
 8008772:	f89a 3000 	ldrb.w	r3, [sl]
 8008776:	2b00      	cmp	r3, #0
 8008778:	f000 80a2 	beq.w	80088c0 <_svfiprintf_r+0x1c8>
 800877c:	2300      	movs	r3, #0
 800877e:	f04f 32ff 	mov.w	r2, #4294967295
 8008782:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008786:	f10a 0a01 	add.w	sl, sl, #1
 800878a:	9304      	str	r3, [sp, #16]
 800878c:	9307      	str	r3, [sp, #28]
 800878e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008792:	931a      	str	r3, [sp, #104]	; 0x68
 8008794:	4654      	mov	r4, sl
 8008796:	2205      	movs	r2, #5
 8008798:	f814 1b01 	ldrb.w	r1, [r4], #1
 800879c:	4851      	ldr	r0, [pc, #324]	; (80088e4 <_svfiprintf_r+0x1ec>)
 800879e:	f7ff f98b 	bl	8007ab8 <memchr>
 80087a2:	9a04      	ldr	r2, [sp, #16]
 80087a4:	b9d8      	cbnz	r0, 80087de <_svfiprintf_r+0xe6>
 80087a6:	06d0      	lsls	r0, r2, #27
 80087a8:	bf44      	itt	mi
 80087aa:	2320      	movmi	r3, #32
 80087ac:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80087b0:	0711      	lsls	r1, r2, #28
 80087b2:	bf44      	itt	mi
 80087b4:	232b      	movmi	r3, #43	; 0x2b
 80087b6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80087ba:	f89a 3000 	ldrb.w	r3, [sl]
 80087be:	2b2a      	cmp	r3, #42	; 0x2a
 80087c0:	d015      	beq.n	80087ee <_svfiprintf_r+0xf6>
 80087c2:	4654      	mov	r4, sl
 80087c4:	2000      	movs	r0, #0
 80087c6:	f04f 0c0a 	mov.w	ip, #10
 80087ca:	9a07      	ldr	r2, [sp, #28]
 80087cc:	4621      	mov	r1, r4
 80087ce:	f811 3b01 	ldrb.w	r3, [r1], #1
 80087d2:	3b30      	subs	r3, #48	; 0x30
 80087d4:	2b09      	cmp	r3, #9
 80087d6:	d94e      	bls.n	8008876 <_svfiprintf_r+0x17e>
 80087d8:	b1b0      	cbz	r0, 8008808 <_svfiprintf_r+0x110>
 80087da:	9207      	str	r2, [sp, #28]
 80087dc:	e014      	b.n	8008808 <_svfiprintf_r+0x110>
 80087de:	eba0 0308 	sub.w	r3, r0, r8
 80087e2:	fa09 f303 	lsl.w	r3, r9, r3
 80087e6:	4313      	orrs	r3, r2
 80087e8:	46a2      	mov	sl, r4
 80087ea:	9304      	str	r3, [sp, #16]
 80087ec:	e7d2      	b.n	8008794 <_svfiprintf_r+0x9c>
 80087ee:	9b03      	ldr	r3, [sp, #12]
 80087f0:	1d19      	adds	r1, r3, #4
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	9103      	str	r1, [sp, #12]
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	bfbb      	ittet	lt
 80087fa:	425b      	neglt	r3, r3
 80087fc:	f042 0202 	orrlt.w	r2, r2, #2
 8008800:	9307      	strge	r3, [sp, #28]
 8008802:	9307      	strlt	r3, [sp, #28]
 8008804:	bfb8      	it	lt
 8008806:	9204      	strlt	r2, [sp, #16]
 8008808:	7823      	ldrb	r3, [r4, #0]
 800880a:	2b2e      	cmp	r3, #46	; 0x2e
 800880c:	d10c      	bne.n	8008828 <_svfiprintf_r+0x130>
 800880e:	7863      	ldrb	r3, [r4, #1]
 8008810:	2b2a      	cmp	r3, #42	; 0x2a
 8008812:	d135      	bne.n	8008880 <_svfiprintf_r+0x188>
 8008814:	9b03      	ldr	r3, [sp, #12]
 8008816:	3402      	adds	r4, #2
 8008818:	1d1a      	adds	r2, r3, #4
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	9203      	str	r2, [sp, #12]
 800881e:	2b00      	cmp	r3, #0
 8008820:	bfb8      	it	lt
 8008822:	f04f 33ff 	movlt.w	r3, #4294967295
 8008826:	9305      	str	r3, [sp, #20]
 8008828:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 80088e8 <_svfiprintf_r+0x1f0>
 800882c:	2203      	movs	r2, #3
 800882e:	4650      	mov	r0, sl
 8008830:	7821      	ldrb	r1, [r4, #0]
 8008832:	f7ff f941 	bl	8007ab8 <memchr>
 8008836:	b140      	cbz	r0, 800884a <_svfiprintf_r+0x152>
 8008838:	2340      	movs	r3, #64	; 0x40
 800883a:	eba0 000a 	sub.w	r0, r0, sl
 800883e:	fa03 f000 	lsl.w	r0, r3, r0
 8008842:	9b04      	ldr	r3, [sp, #16]
 8008844:	3401      	adds	r4, #1
 8008846:	4303      	orrs	r3, r0
 8008848:	9304      	str	r3, [sp, #16]
 800884a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800884e:	2206      	movs	r2, #6
 8008850:	4826      	ldr	r0, [pc, #152]	; (80088ec <_svfiprintf_r+0x1f4>)
 8008852:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008856:	f7ff f92f 	bl	8007ab8 <memchr>
 800885a:	2800      	cmp	r0, #0
 800885c:	d038      	beq.n	80088d0 <_svfiprintf_r+0x1d8>
 800885e:	4b24      	ldr	r3, [pc, #144]	; (80088f0 <_svfiprintf_r+0x1f8>)
 8008860:	bb1b      	cbnz	r3, 80088aa <_svfiprintf_r+0x1b2>
 8008862:	9b03      	ldr	r3, [sp, #12]
 8008864:	3307      	adds	r3, #7
 8008866:	f023 0307 	bic.w	r3, r3, #7
 800886a:	3308      	adds	r3, #8
 800886c:	9303      	str	r3, [sp, #12]
 800886e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008870:	4433      	add	r3, r6
 8008872:	9309      	str	r3, [sp, #36]	; 0x24
 8008874:	e767      	b.n	8008746 <_svfiprintf_r+0x4e>
 8008876:	460c      	mov	r4, r1
 8008878:	2001      	movs	r0, #1
 800887a:	fb0c 3202 	mla	r2, ip, r2, r3
 800887e:	e7a5      	b.n	80087cc <_svfiprintf_r+0xd4>
 8008880:	2300      	movs	r3, #0
 8008882:	f04f 0c0a 	mov.w	ip, #10
 8008886:	4619      	mov	r1, r3
 8008888:	3401      	adds	r4, #1
 800888a:	9305      	str	r3, [sp, #20]
 800888c:	4620      	mov	r0, r4
 800888e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008892:	3a30      	subs	r2, #48	; 0x30
 8008894:	2a09      	cmp	r2, #9
 8008896:	d903      	bls.n	80088a0 <_svfiprintf_r+0x1a8>
 8008898:	2b00      	cmp	r3, #0
 800889a:	d0c5      	beq.n	8008828 <_svfiprintf_r+0x130>
 800889c:	9105      	str	r1, [sp, #20]
 800889e:	e7c3      	b.n	8008828 <_svfiprintf_r+0x130>
 80088a0:	4604      	mov	r4, r0
 80088a2:	2301      	movs	r3, #1
 80088a4:	fb0c 2101 	mla	r1, ip, r1, r2
 80088a8:	e7f0      	b.n	800888c <_svfiprintf_r+0x194>
 80088aa:	ab03      	add	r3, sp, #12
 80088ac:	9300      	str	r3, [sp, #0]
 80088ae:	462a      	mov	r2, r5
 80088b0:	4638      	mov	r0, r7
 80088b2:	4b10      	ldr	r3, [pc, #64]	; (80088f4 <_svfiprintf_r+0x1fc>)
 80088b4:	a904      	add	r1, sp, #16
 80088b6:	f7fc f9c7 	bl	8004c48 <_printf_float>
 80088ba:	1c42      	adds	r2, r0, #1
 80088bc:	4606      	mov	r6, r0
 80088be:	d1d6      	bne.n	800886e <_svfiprintf_r+0x176>
 80088c0:	89ab      	ldrh	r3, [r5, #12]
 80088c2:	065b      	lsls	r3, r3, #25
 80088c4:	f53f af2c 	bmi.w	8008720 <_svfiprintf_r+0x28>
 80088c8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80088ca:	b01d      	add	sp, #116	; 0x74
 80088cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80088d0:	ab03      	add	r3, sp, #12
 80088d2:	9300      	str	r3, [sp, #0]
 80088d4:	462a      	mov	r2, r5
 80088d6:	4638      	mov	r0, r7
 80088d8:	4b06      	ldr	r3, [pc, #24]	; (80088f4 <_svfiprintf_r+0x1fc>)
 80088da:	a904      	add	r1, sp, #16
 80088dc:	f7fc fc50 	bl	8005180 <_printf_i>
 80088e0:	e7eb      	b.n	80088ba <_svfiprintf_r+0x1c2>
 80088e2:	bf00      	nop
 80088e4:	0800a104 	.word	0x0800a104
 80088e8:	0800a10a 	.word	0x0800a10a
 80088ec:	0800a10e 	.word	0x0800a10e
 80088f0:	08004c49 	.word	0x08004c49
 80088f4:	08008641 	.word	0x08008641

080088f8 <_sungetc_r>:
 80088f8:	b538      	push	{r3, r4, r5, lr}
 80088fa:	1c4b      	adds	r3, r1, #1
 80088fc:	4614      	mov	r4, r2
 80088fe:	d103      	bne.n	8008908 <_sungetc_r+0x10>
 8008900:	f04f 35ff 	mov.w	r5, #4294967295
 8008904:	4628      	mov	r0, r5
 8008906:	bd38      	pop	{r3, r4, r5, pc}
 8008908:	8993      	ldrh	r3, [r2, #12]
 800890a:	b2cd      	uxtb	r5, r1
 800890c:	f023 0320 	bic.w	r3, r3, #32
 8008910:	8193      	strh	r3, [r2, #12]
 8008912:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008914:	6852      	ldr	r2, [r2, #4]
 8008916:	b18b      	cbz	r3, 800893c <_sungetc_r+0x44>
 8008918:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800891a:	4293      	cmp	r3, r2
 800891c:	dd08      	ble.n	8008930 <_sungetc_r+0x38>
 800891e:	6823      	ldr	r3, [r4, #0]
 8008920:	1e5a      	subs	r2, r3, #1
 8008922:	6022      	str	r2, [r4, #0]
 8008924:	f803 5c01 	strb.w	r5, [r3, #-1]
 8008928:	6863      	ldr	r3, [r4, #4]
 800892a:	3301      	adds	r3, #1
 800892c:	6063      	str	r3, [r4, #4]
 800892e:	e7e9      	b.n	8008904 <_sungetc_r+0xc>
 8008930:	4621      	mov	r1, r4
 8008932:	f000 fbdb 	bl	80090ec <__submore>
 8008936:	2800      	cmp	r0, #0
 8008938:	d0f1      	beq.n	800891e <_sungetc_r+0x26>
 800893a:	e7e1      	b.n	8008900 <_sungetc_r+0x8>
 800893c:	6921      	ldr	r1, [r4, #16]
 800893e:	6823      	ldr	r3, [r4, #0]
 8008940:	b151      	cbz	r1, 8008958 <_sungetc_r+0x60>
 8008942:	4299      	cmp	r1, r3
 8008944:	d208      	bcs.n	8008958 <_sungetc_r+0x60>
 8008946:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800894a:	42a9      	cmp	r1, r5
 800894c:	d104      	bne.n	8008958 <_sungetc_r+0x60>
 800894e:	3b01      	subs	r3, #1
 8008950:	3201      	adds	r2, #1
 8008952:	6023      	str	r3, [r4, #0]
 8008954:	6062      	str	r2, [r4, #4]
 8008956:	e7d5      	b.n	8008904 <_sungetc_r+0xc>
 8008958:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 800895c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008960:	6363      	str	r3, [r4, #52]	; 0x34
 8008962:	2303      	movs	r3, #3
 8008964:	63a3      	str	r3, [r4, #56]	; 0x38
 8008966:	4623      	mov	r3, r4
 8008968:	f803 5f46 	strb.w	r5, [r3, #70]!
 800896c:	6023      	str	r3, [r4, #0]
 800896e:	2301      	movs	r3, #1
 8008970:	e7dc      	b.n	800892c <_sungetc_r+0x34>

08008972 <__ssrefill_r>:
 8008972:	b510      	push	{r4, lr}
 8008974:	460c      	mov	r4, r1
 8008976:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8008978:	b169      	cbz	r1, 8008996 <__ssrefill_r+0x24>
 800897a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800897e:	4299      	cmp	r1, r3
 8008980:	d001      	beq.n	8008986 <__ssrefill_r+0x14>
 8008982:	f7ff fd81 	bl	8008488 <_free_r>
 8008986:	2000      	movs	r0, #0
 8008988:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800898a:	6360      	str	r0, [r4, #52]	; 0x34
 800898c:	6063      	str	r3, [r4, #4]
 800898e:	b113      	cbz	r3, 8008996 <__ssrefill_r+0x24>
 8008990:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8008992:	6023      	str	r3, [r4, #0]
 8008994:	bd10      	pop	{r4, pc}
 8008996:	6923      	ldr	r3, [r4, #16]
 8008998:	f04f 30ff 	mov.w	r0, #4294967295
 800899c:	6023      	str	r3, [r4, #0]
 800899e:	2300      	movs	r3, #0
 80089a0:	6063      	str	r3, [r4, #4]
 80089a2:	89a3      	ldrh	r3, [r4, #12]
 80089a4:	f043 0320 	orr.w	r3, r3, #32
 80089a8:	81a3      	strh	r3, [r4, #12]
 80089aa:	e7f3      	b.n	8008994 <__ssrefill_r+0x22>

080089ac <__ssvfiscanf_r>:
 80089ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80089b0:	460c      	mov	r4, r1
 80089b2:	2100      	movs	r1, #0
 80089b4:	4606      	mov	r6, r0
 80089b6:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 80089ba:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 80089be:	49a7      	ldr	r1, [pc, #668]	; (8008c5c <__ssvfiscanf_r+0x2b0>)
 80089c0:	f10d 0804 	add.w	r8, sp, #4
 80089c4:	91a0      	str	r1, [sp, #640]	; 0x280
 80089c6:	49a6      	ldr	r1, [pc, #664]	; (8008c60 <__ssvfiscanf_r+0x2b4>)
 80089c8:	4fa6      	ldr	r7, [pc, #664]	; (8008c64 <__ssvfiscanf_r+0x2b8>)
 80089ca:	f8df 929c 	ldr.w	r9, [pc, #668]	; 8008c68 <__ssvfiscanf_r+0x2bc>
 80089ce:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 80089d2:	91a1      	str	r1, [sp, #644]	; 0x284
 80089d4:	9300      	str	r3, [sp, #0]
 80089d6:	7813      	ldrb	r3, [r2, #0]
 80089d8:	2b00      	cmp	r3, #0
 80089da:	f000 815c 	beq.w	8008c96 <__ssvfiscanf_r+0x2ea>
 80089de:	5dd9      	ldrb	r1, [r3, r7]
 80089e0:	1c55      	adds	r5, r2, #1
 80089e2:	f011 0108 	ands.w	r1, r1, #8
 80089e6:	d019      	beq.n	8008a1c <__ssvfiscanf_r+0x70>
 80089e8:	6863      	ldr	r3, [r4, #4]
 80089ea:	2b00      	cmp	r3, #0
 80089ec:	dd0f      	ble.n	8008a0e <__ssvfiscanf_r+0x62>
 80089ee:	6823      	ldr	r3, [r4, #0]
 80089f0:	781a      	ldrb	r2, [r3, #0]
 80089f2:	5cba      	ldrb	r2, [r7, r2]
 80089f4:	0712      	lsls	r2, r2, #28
 80089f6:	d401      	bmi.n	80089fc <__ssvfiscanf_r+0x50>
 80089f8:	462a      	mov	r2, r5
 80089fa:	e7ec      	b.n	80089d6 <__ssvfiscanf_r+0x2a>
 80089fc:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80089fe:	3301      	adds	r3, #1
 8008a00:	3201      	adds	r2, #1
 8008a02:	9245      	str	r2, [sp, #276]	; 0x114
 8008a04:	6862      	ldr	r2, [r4, #4]
 8008a06:	6023      	str	r3, [r4, #0]
 8008a08:	3a01      	subs	r2, #1
 8008a0a:	6062      	str	r2, [r4, #4]
 8008a0c:	e7ec      	b.n	80089e8 <__ssvfiscanf_r+0x3c>
 8008a0e:	4621      	mov	r1, r4
 8008a10:	4630      	mov	r0, r6
 8008a12:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8008a14:	4798      	blx	r3
 8008a16:	2800      	cmp	r0, #0
 8008a18:	d0e9      	beq.n	80089ee <__ssvfiscanf_r+0x42>
 8008a1a:	e7ed      	b.n	80089f8 <__ssvfiscanf_r+0x4c>
 8008a1c:	2b25      	cmp	r3, #37	; 0x25
 8008a1e:	d012      	beq.n	8008a46 <__ssvfiscanf_r+0x9a>
 8008a20:	469a      	mov	sl, r3
 8008a22:	6863      	ldr	r3, [r4, #4]
 8008a24:	2b00      	cmp	r3, #0
 8008a26:	f340 8094 	ble.w	8008b52 <__ssvfiscanf_r+0x1a6>
 8008a2a:	6822      	ldr	r2, [r4, #0]
 8008a2c:	7813      	ldrb	r3, [r2, #0]
 8008a2e:	4553      	cmp	r3, sl
 8008a30:	f040 8131 	bne.w	8008c96 <__ssvfiscanf_r+0x2ea>
 8008a34:	6863      	ldr	r3, [r4, #4]
 8008a36:	3201      	adds	r2, #1
 8008a38:	3b01      	subs	r3, #1
 8008a3a:	6063      	str	r3, [r4, #4]
 8008a3c:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8008a3e:	6022      	str	r2, [r4, #0]
 8008a40:	3301      	adds	r3, #1
 8008a42:	9345      	str	r3, [sp, #276]	; 0x114
 8008a44:	e7d8      	b.n	80089f8 <__ssvfiscanf_r+0x4c>
 8008a46:	9141      	str	r1, [sp, #260]	; 0x104
 8008a48:	9143      	str	r1, [sp, #268]	; 0x10c
 8008a4a:	7853      	ldrb	r3, [r2, #1]
 8008a4c:	2b2a      	cmp	r3, #42	; 0x2a
 8008a4e:	bf04      	itt	eq
 8008a50:	2310      	moveq	r3, #16
 8008a52:	1c95      	addeq	r5, r2, #2
 8008a54:	f04f 020a 	mov.w	r2, #10
 8008a58:	bf08      	it	eq
 8008a5a:	9341      	streq	r3, [sp, #260]	; 0x104
 8008a5c:	46aa      	mov	sl, r5
 8008a5e:	f81a 1b01 	ldrb.w	r1, [sl], #1
 8008a62:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8008a66:	2b09      	cmp	r3, #9
 8008a68:	d91d      	bls.n	8008aa6 <__ssvfiscanf_r+0xfa>
 8008a6a:	2203      	movs	r2, #3
 8008a6c:	487e      	ldr	r0, [pc, #504]	; (8008c68 <__ssvfiscanf_r+0x2bc>)
 8008a6e:	f7ff f823 	bl	8007ab8 <memchr>
 8008a72:	b140      	cbz	r0, 8008a86 <__ssvfiscanf_r+0xda>
 8008a74:	2301      	movs	r3, #1
 8008a76:	4655      	mov	r5, sl
 8008a78:	eba0 0009 	sub.w	r0, r0, r9
 8008a7c:	fa03 f000 	lsl.w	r0, r3, r0
 8008a80:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8008a82:	4318      	orrs	r0, r3
 8008a84:	9041      	str	r0, [sp, #260]	; 0x104
 8008a86:	f815 3b01 	ldrb.w	r3, [r5], #1
 8008a8a:	2b78      	cmp	r3, #120	; 0x78
 8008a8c:	d806      	bhi.n	8008a9c <__ssvfiscanf_r+0xf0>
 8008a8e:	2b57      	cmp	r3, #87	; 0x57
 8008a90:	d810      	bhi.n	8008ab4 <__ssvfiscanf_r+0x108>
 8008a92:	2b25      	cmp	r3, #37	; 0x25
 8008a94:	d0c4      	beq.n	8008a20 <__ssvfiscanf_r+0x74>
 8008a96:	d857      	bhi.n	8008b48 <__ssvfiscanf_r+0x19c>
 8008a98:	2b00      	cmp	r3, #0
 8008a9a:	d065      	beq.n	8008b68 <__ssvfiscanf_r+0x1bc>
 8008a9c:	2303      	movs	r3, #3
 8008a9e:	9347      	str	r3, [sp, #284]	; 0x11c
 8008aa0:	230a      	movs	r3, #10
 8008aa2:	9342      	str	r3, [sp, #264]	; 0x108
 8008aa4:	e072      	b.n	8008b8c <__ssvfiscanf_r+0x1e0>
 8008aa6:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8008aa8:	4655      	mov	r5, sl
 8008aaa:	fb02 1103 	mla	r1, r2, r3, r1
 8008aae:	3930      	subs	r1, #48	; 0x30
 8008ab0:	9143      	str	r1, [sp, #268]	; 0x10c
 8008ab2:	e7d3      	b.n	8008a5c <__ssvfiscanf_r+0xb0>
 8008ab4:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 8008ab8:	2a20      	cmp	r2, #32
 8008aba:	d8ef      	bhi.n	8008a9c <__ssvfiscanf_r+0xf0>
 8008abc:	a101      	add	r1, pc, #4	; (adr r1, 8008ac4 <__ssvfiscanf_r+0x118>)
 8008abe:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8008ac2:	bf00      	nop
 8008ac4:	08008b77 	.word	0x08008b77
 8008ac8:	08008a9d 	.word	0x08008a9d
 8008acc:	08008a9d 	.word	0x08008a9d
 8008ad0:	08008bd5 	.word	0x08008bd5
 8008ad4:	08008a9d 	.word	0x08008a9d
 8008ad8:	08008a9d 	.word	0x08008a9d
 8008adc:	08008a9d 	.word	0x08008a9d
 8008ae0:	08008a9d 	.word	0x08008a9d
 8008ae4:	08008a9d 	.word	0x08008a9d
 8008ae8:	08008a9d 	.word	0x08008a9d
 8008aec:	08008a9d 	.word	0x08008a9d
 8008af0:	08008beb 	.word	0x08008beb
 8008af4:	08008bc1 	.word	0x08008bc1
 8008af8:	08008b4f 	.word	0x08008b4f
 8008afc:	08008b4f 	.word	0x08008b4f
 8008b00:	08008b4f 	.word	0x08008b4f
 8008b04:	08008a9d 	.word	0x08008a9d
 8008b08:	08008bc5 	.word	0x08008bc5
 8008b0c:	08008a9d 	.word	0x08008a9d
 8008b10:	08008a9d 	.word	0x08008a9d
 8008b14:	08008a9d 	.word	0x08008a9d
 8008b18:	08008a9d 	.word	0x08008a9d
 8008b1c:	08008bfb 	.word	0x08008bfb
 8008b20:	08008bcd 	.word	0x08008bcd
 8008b24:	08008b6f 	.word	0x08008b6f
 8008b28:	08008a9d 	.word	0x08008a9d
 8008b2c:	08008a9d 	.word	0x08008a9d
 8008b30:	08008bf7 	.word	0x08008bf7
 8008b34:	08008a9d 	.word	0x08008a9d
 8008b38:	08008bc1 	.word	0x08008bc1
 8008b3c:	08008a9d 	.word	0x08008a9d
 8008b40:	08008a9d 	.word	0x08008a9d
 8008b44:	08008b77 	.word	0x08008b77
 8008b48:	3b45      	subs	r3, #69	; 0x45
 8008b4a:	2b02      	cmp	r3, #2
 8008b4c:	d8a6      	bhi.n	8008a9c <__ssvfiscanf_r+0xf0>
 8008b4e:	2305      	movs	r3, #5
 8008b50:	e01b      	b.n	8008b8a <__ssvfiscanf_r+0x1de>
 8008b52:	4621      	mov	r1, r4
 8008b54:	4630      	mov	r0, r6
 8008b56:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8008b58:	4798      	blx	r3
 8008b5a:	2800      	cmp	r0, #0
 8008b5c:	f43f af65 	beq.w	8008a2a <__ssvfiscanf_r+0x7e>
 8008b60:	9844      	ldr	r0, [sp, #272]	; 0x110
 8008b62:	2800      	cmp	r0, #0
 8008b64:	f040 808d 	bne.w	8008c82 <__ssvfiscanf_r+0x2d6>
 8008b68:	f04f 30ff 	mov.w	r0, #4294967295
 8008b6c:	e08f      	b.n	8008c8e <__ssvfiscanf_r+0x2e2>
 8008b6e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8008b70:	f042 0220 	orr.w	r2, r2, #32
 8008b74:	9241      	str	r2, [sp, #260]	; 0x104
 8008b76:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8008b78:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008b7c:	9241      	str	r2, [sp, #260]	; 0x104
 8008b7e:	2210      	movs	r2, #16
 8008b80:	2b6f      	cmp	r3, #111	; 0x6f
 8008b82:	bf34      	ite	cc
 8008b84:	2303      	movcc	r3, #3
 8008b86:	2304      	movcs	r3, #4
 8008b88:	9242      	str	r2, [sp, #264]	; 0x108
 8008b8a:	9347      	str	r3, [sp, #284]	; 0x11c
 8008b8c:	6863      	ldr	r3, [r4, #4]
 8008b8e:	2b00      	cmp	r3, #0
 8008b90:	dd42      	ble.n	8008c18 <__ssvfiscanf_r+0x26c>
 8008b92:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8008b94:	0659      	lsls	r1, r3, #25
 8008b96:	d404      	bmi.n	8008ba2 <__ssvfiscanf_r+0x1f6>
 8008b98:	6823      	ldr	r3, [r4, #0]
 8008b9a:	781a      	ldrb	r2, [r3, #0]
 8008b9c:	5cba      	ldrb	r2, [r7, r2]
 8008b9e:	0712      	lsls	r2, r2, #28
 8008ba0:	d441      	bmi.n	8008c26 <__ssvfiscanf_r+0x27a>
 8008ba2:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8008ba4:	2b02      	cmp	r3, #2
 8008ba6:	dc50      	bgt.n	8008c4a <__ssvfiscanf_r+0x29e>
 8008ba8:	466b      	mov	r3, sp
 8008baa:	4622      	mov	r2, r4
 8008bac:	4630      	mov	r0, r6
 8008bae:	a941      	add	r1, sp, #260	; 0x104
 8008bb0:	f000 f876 	bl	8008ca0 <_scanf_chars>
 8008bb4:	2801      	cmp	r0, #1
 8008bb6:	d06e      	beq.n	8008c96 <__ssvfiscanf_r+0x2ea>
 8008bb8:	2802      	cmp	r0, #2
 8008bba:	f47f af1d 	bne.w	80089f8 <__ssvfiscanf_r+0x4c>
 8008bbe:	e7cf      	b.n	8008b60 <__ssvfiscanf_r+0x1b4>
 8008bc0:	220a      	movs	r2, #10
 8008bc2:	e7dd      	b.n	8008b80 <__ssvfiscanf_r+0x1d4>
 8008bc4:	2300      	movs	r3, #0
 8008bc6:	9342      	str	r3, [sp, #264]	; 0x108
 8008bc8:	2303      	movs	r3, #3
 8008bca:	e7de      	b.n	8008b8a <__ssvfiscanf_r+0x1de>
 8008bcc:	2308      	movs	r3, #8
 8008bce:	9342      	str	r3, [sp, #264]	; 0x108
 8008bd0:	2304      	movs	r3, #4
 8008bd2:	e7da      	b.n	8008b8a <__ssvfiscanf_r+0x1de>
 8008bd4:	4629      	mov	r1, r5
 8008bd6:	4640      	mov	r0, r8
 8008bd8:	f000 f9dc 	bl	8008f94 <__sccl>
 8008bdc:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8008bde:	4605      	mov	r5, r0
 8008be0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008be4:	9341      	str	r3, [sp, #260]	; 0x104
 8008be6:	2301      	movs	r3, #1
 8008be8:	e7cf      	b.n	8008b8a <__ssvfiscanf_r+0x1de>
 8008bea:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8008bec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008bf0:	9341      	str	r3, [sp, #260]	; 0x104
 8008bf2:	2300      	movs	r3, #0
 8008bf4:	e7c9      	b.n	8008b8a <__ssvfiscanf_r+0x1de>
 8008bf6:	2302      	movs	r3, #2
 8008bf8:	e7c7      	b.n	8008b8a <__ssvfiscanf_r+0x1de>
 8008bfa:	9841      	ldr	r0, [sp, #260]	; 0x104
 8008bfc:	06c3      	lsls	r3, r0, #27
 8008bfe:	f53f aefb 	bmi.w	80089f8 <__ssvfiscanf_r+0x4c>
 8008c02:	9b00      	ldr	r3, [sp, #0]
 8008c04:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8008c06:	1d19      	adds	r1, r3, #4
 8008c08:	9100      	str	r1, [sp, #0]
 8008c0a:	681b      	ldr	r3, [r3, #0]
 8008c0c:	f010 0f01 	tst.w	r0, #1
 8008c10:	bf14      	ite	ne
 8008c12:	801a      	strhne	r2, [r3, #0]
 8008c14:	601a      	streq	r2, [r3, #0]
 8008c16:	e6ef      	b.n	80089f8 <__ssvfiscanf_r+0x4c>
 8008c18:	4621      	mov	r1, r4
 8008c1a:	4630      	mov	r0, r6
 8008c1c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8008c1e:	4798      	blx	r3
 8008c20:	2800      	cmp	r0, #0
 8008c22:	d0b6      	beq.n	8008b92 <__ssvfiscanf_r+0x1e6>
 8008c24:	e79c      	b.n	8008b60 <__ssvfiscanf_r+0x1b4>
 8008c26:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8008c28:	3201      	adds	r2, #1
 8008c2a:	9245      	str	r2, [sp, #276]	; 0x114
 8008c2c:	6862      	ldr	r2, [r4, #4]
 8008c2e:	3a01      	subs	r2, #1
 8008c30:	2a00      	cmp	r2, #0
 8008c32:	6062      	str	r2, [r4, #4]
 8008c34:	dd02      	ble.n	8008c3c <__ssvfiscanf_r+0x290>
 8008c36:	3301      	adds	r3, #1
 8008c38:	6023      	str	r3, [r4, #0]
 8008c3a:	e7ad      	b.n	8008b98 <__ssvfiscanf_r+0x1ec>
 8008c3c:	4621      	mov	r1, r4
 8008c3e:	4630      	mov	r0, r6
 8008c40:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8008c42:	4798      	blx	r3
 8008c44:	2800      	cmp	r0, #0
 8008c46:	d0a7      	beq.n	8008b98 <__ssvfiscanf_r+0x1ec>
 8008c48:	e78a      	b.n	8008b60 <__ssvfiscanf_r+0x1b4>
 8008c4a:	2b04      	cmp	r3, #4
 8008c4c:	dc0e      	bgt.n	8008c6c <__ssvfiscanf_r+0x2c0>
 8008c4e:	466b      	mov	r3, sp
 8008c50:	4622      	mov	r2, r4
 8008c52:	4630      	mov	r0, r6
 8008c54:	a941      	add	r1, sp, #260	; 0x104
 8008c56:	f000 f87d 	bl	8008d54 <_scanf_i>
 8008c5a:	e7ab      	b.n	8008bb4 <__ssvfiscanf_r+0x208>
 8008c5c:	080088f9 	.word	0x080088f9
 8008c60:	08008973 	.word	0x08008973
 8008c64:	08009da1 	.word	0x08009da1
 8008c68:	0800a10a 	.word	0x0800a10a
 8008c6c:	4b0b      	ldr	r3, [pc, #44]	; (8008c9c <__ssvfiscanf_r+0x2f0>)
 8008c6e:	2b00      	cmp	r3, #0
 8008c70:	f43f aec2 	beq.w	80089f8 <__ssvfiscanf_r+0x4c>
 8008c74:	466b      	mov	r3, sp
 8008c76:	4622      	mov	r2, r4
 8008c78:	4630      	mov	r0, r6
 8008c7a:	a941      	add	r1, sp, #260	; 0x104
 8008c7c:	f7fc fba6 	bl	80053cc <_scanf_float>
 8008c80:	e798      	b.n	8008bb4 <__ssvfiscanf_r+0x208>
 8008c82:	89a3      	ldrh	r3, [r4, #12]
 8008c84:	f013 0f40 	tst.w	r3, #64	; 0x40
 8008c88:	bf18      	it	ne
 8008c8a:	f04f 30ff 	movne.w	r0, #4294967295
 8008c8e:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 8008c92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008c96:	9844      	ldr	r0, [sp, #272]	; 0x110
 8008c98:	e7f9      	b.n	8008c8e <__ssvfiscanf_r+0x2e2>
 8008c9a:	bf00      	nop
 8008c9c:	080053cd 	.word	0x080053cd

08008ca0 <_scanf_chars>:
 8008ca0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008ca4:	4615      	mov	r5, r2
 8008ca6:	688a      	ldr	r2, [r1, #8]
 8008ca8:	4680      	mov	r8, r0
 8008caa:	460c      	mov	r4, r1
 8008cac:	b932      	cbnz	r2, 8008cbc <_scanf_chars+0x1c>
 8008cae:	698a      	ldr	r2, [r1, #24]
 8008cb0:	2a00      	cmp	r2, #0
 8008cb2:	bf0c      	ite	eq
 8008cb4:	2201      	moveq	r2, #1
 8008cb6:	f04f 32ff 	movne.w	r2, #4294967295
 8008cba:	608a      	str	r2, [r1, #8]
 8008cbc:	2700      	movs	r7, #0
 8008cbe:	6822      	ldr	r2, [r4, #0]
 8008cc0:	f8df 908c 	ldr.w	r9, [pc, #140]	; 8008d50 <_scanf_chars+0xb0>
 8008cc4:	06d1      	lsls	r1, r2, #27
 8008cc6:	bf5f      	itttt	pl
 8008cc8:	681a      	ldrpl	r2, [r3, #0]
 8008cca:	1d11      	addpl	r1, r2, #4
 8008ccc:	6019      	strpl	r1, [r3, #0]
 8008cce:	6816      	ldrpl	r6, [r2, #0]
 8008cd0:	69a0      	ldr	r0, [r4, #24]
 8008cd2:	b188      	cbz	r0, 8008cf8 <_scanf_chars+0x58>
 8008cd4:	2801      	cmp	r0, #1
 8008cd6:	d107      	bne.n	8008ce8 <_scanf_chars+0x48>
 8008cd8:	682b      	ldr	r3, [r5, #0]
 8008cda:	781a      	ldrb	r2, [r3, #0]
 8008cdc:	6963      	ldr	r3, [r4, #20]
 8008cde:	5c9b      	ldrb	r3, [r3, r2]
 8008ce0:	b953      	cbnz	r3, 8008cf8 <_scanf_chars+0x58>
 8008ce2:	2f00      	cmp	r7, #0
 8008ce4:	d031      	beq.n	8008d4a <_scanf_chars+0xaa>
 8008ce6:	e022      	b.n	8008d2e <_scanf_chars+0x8e>
 8008ce8:	2802      	cmp	r0, #2
 8008cea:	d120      	bne.n	8008d2e <_scanf_chars+0x8e>
 8008cec:	682b      	ldr	r3, [r5, #0]
 8008cee:	781b      	ldrb	r3, [r3, #0]
 8008cf0:	f813 3009 	ldrb.w	r3, [r3, r9]
 8008cf4:	071b      	lsls	r3, r3, #28
 8008cf6:	d41a      	bmi.n	8008d2e <_scanf_chars+0x8e>
 8008cf8:	6823      	ldr	r3, [r4, #0]
 8008cfa:	3701      	adds	r7, #1
 8008cfc:	06da      	lsls	r2, r3, #27
 8008cfe:	bf5e      	ittt	pl
 8008d00:	682b      	ldrpl	r3, [r5, #0]
 8008d02:	781b      	ldrbpl	r3, [r3, #0]
 8008d04:	f806 3b01 	strbpl.w	r3, [r6], #1
 8008d08:	682a      	ldr	r2, [r5, #0]
 8008d0a:	686b      	ldr	r3, [r5, #4]
 8008d0c:	3201      	adds	r2, #1
 8008d0e:	602a      	str	r2, [r5, #0]
 8008d10:	68a2      	ldr	r2, [r4, #8]
 8008d12:	3b01      	subs	r3, #1
 8008d14:	3a01      	subs	r2, #1
 8008d16:	606b      	str	r3, [r5, #4]
 8008d18:	60a2      	str	r2, [r4, #8]
 8008d1a:	b142      	cbz	r2, 8008d2e <_scanf_chars+0x8e>
 8008d1c:	2b00      	cmp	r3, #0
 8008d1e:	dcd7      	bgt.n	8008cd0 <_scanf_chars+0x30>
 8008d20:	4629      	mov	r1, r5
 8008d22:	4640      	mov	r0, r8
 8008d24:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8008d28:	4798      	blx	r3
 8008d2a:	2800      	cmp	r0, #0
 8008d2c:	d0d0      	beq.n	8008cd0 <_scanf_chars+0x30>
 8008d2e:	6823      	ldr	r3, [r4, #0]
 8008d30:	f013 0310 	ands.w	r3, r3, #16
 8008d34:	d105      	bne.n	8008d42 <_scanf_chars+0xa2>
 8008d36:	68e2      	ldr	r2, [r4, #12]
 8008d38:	3201      	adds	r2, #1
 8008d3a:	60e2      	str	r2, [r4, #12]
 8008d3c:	69a2      	ldr	r2, [r4, #24]
 8008d3e:	b102      	cbz	r2, 8008d42 <_scanf_chars+0xa2>
 8008d40:	7033      	strb	r3, [r6, #0]
 8008d42:	2000      	movs	r0, #0
 8008d44:	6923      	ldr	r3, [r4, #16]
 8008d46:	443b      	add	r3, r7
 8008d48:	6123      	str	r3, [r4, #16]
 8008d4a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008d4e:	bf00      	nop
 8008d50:	08009da1 	.word	0x08009da1

08008d54 <_scanf_i>:
 8008d54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d58:	460c      	mov	r4, r1
 8008d5a:	4698      	mov	r8, r3
 8008d5c:	4b75      	ldr	r3, [pc, #468]	; (8008f34 <_scanf_i+0x1e0>)
 8008d5e:	b087      	sub	sp, #28
 8008d60:	4682      	mov	sl, r0
 8008d62:	4616      	mov	r6, r2
 8008d64:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8008d68:	ab03      	add	r3, sp, #12
 8008d6a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8008d6e:	4b72      	ldr	r3, [pc, #456]	; (8008f38 <_scanf_i+0x1e4>)
 8008d70:	69a1      	ldr	r1, [r4, #24]
 8008d72:	4a72      	ldr	r2, [pc, #456]	; (8008f3c <_scanf_i+0x1e8>)
 8008d74:	4627      	mov	r7, r4
 8008d76:	2903      	cmp	r1, #3
 8008d78:	bf18      	it	ne
 8008d7a:	461a      	movne	r2, r3
 8008d7c:	68a3      	ldr	r3, [r4, #8]
 8008d7e:	9201      	str	r2, [sp, #4]
 8008d80:	1e5a      	subs	r2, r3, #1
 8008d82:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8008d86:	bf81      	itttt	hi
 8008d88:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8008d8c:	eb03 0905 	addhi.w	r9, r3, r5
 8008d90:	f240 135d 	movwhi	r3, #349	; 0x15d
 8008d94:	60a3      	strhi	r3, [r4, #8]
 8008d96:	f857 3b1c 	ldr.w	r3, [r7], #28
 8008d9a:	bf98      	it	ls
 8008d9c:	f04f 0900 	movls.w	r9, #0
 8008da0:	463d      	mov	r5, r7
 8008da2:	f04f 0b00 	mov.w	fp, #0
 8008da6:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8008daa:	6023      	str	r3, [r4, #0]
 8008dac:	6831      	ldr	r1, [r6, #0]
 8008dae:	ab03      	add	r3, sp, #12
 8008db0:	2202      	movs	r2, #2
 8008db2:	7809      	ldrb	r1, [r1, #0]
 8008db4:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8008db8:	f7fe fe7e 	bl	8007ab8 <memchr>
 8008dbc:	b328      	cbz	r0, 8008e0a <_scanf_i+0xb6>
 8008dbe:	f1bb 0f01 	cmp.w	fp, #1
 8008dc2:	d159      	bne.n	8008e78 <_scanf_i+0x124>
 8008dc4:	6862      	ldr	r2, [r4, #4]
 8008dc6:	b92a      	cbnz	r2, 8008dd4 <_scanf_i+0x80>
 8008dc8:	2308      	movs	r3, #8
 8008dca:	6822      	ldr	r2, [r4, #0]
 8008dcc:	6063      	str	r3, [r4, #4]
 8008dce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008dd2:	6022      	str	r2, [r4, #0]
 8008dd4:	6822      	ldr	r2, [r4, #0]
 8008dd6:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8008dda:	6022      	str	r2, [r4, #0]
 8008ddc:	68a2      	ldr	r2, [r4, #8]
 8008dde:	1e51      	subs	r1, r2, #1
 8008de0:	60a1      	str	r1, [r4, #8]
 8008de2:	b192      	cbz	r2, 8008e0a <_scanf_i+0xb6>
 8008de4:	6832      	ldr	r2, [r6, #0]
 8008de6:	1c51      	adds	r1, r2, #1
 8008de8:	6031      	str	r1, [r6, #0]
 8008dea:	7812      	ldrb	r2, [r2, #0]
 8008dec:	f805 2b01 	strb.w	r2, [r5], #1
 8008df0:	6872      	ldr	r2, [r6, #4]
 8008df2:	3a01      	subs	r2, #1
 8008df4:	2a00      	cmp	r2, #0
 8008df6:	6072      	str	r2, [r6, #4]
 8008df8:	dc07      	bgt.n	8008e0a <_scanf_i+0xb6>
 8008dfa:	4631      	mov	r1, r6
 8008dfc:	4650      	mov	r0, sl
 8008dfe:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8008e02:	4790      	blx	r2
 8008e04:	2800      	cmp	r0, #0
 8008e06:	f040 8085 	bne.w	8008f14 <_scanf_i+0x1c0>
 8008e0a:	f10b 0b01 	add.w	fp, fp, #1
 8008e0e:	f1bb 0f03 	cmp.w	fp, #3
 8008e12:	d1cb      	bne.n	8008dac <_scanf_i+0x58>
 8008e14:	6863      	ldr	r3, [r4, #4]
 8008e16:	b90b      	cbnz	r3, 8008e1c <_scanf_i+0xc8>
 8008e18:	230a      	movs	r3, #10
 8008e1a:	6063      	str	r3, [r4, #4]
 8008e1c:	6863      	ldr	r3, [r4, #4]
 8008e1e:	4948      	ldr	r1, [pc, #288]	; (8008f40 <_scanf_i+0x1ec>)
 8008e20:	6960      	ldr	r0, [r4, #20]
 8008e22:	1ac9      	subs	r1, r1, r3
 8008e24:	f000 f8b6 	bl	8008f94 <__sccl>
 8008e28:	f04f 0b00 	mov.w	fp, #0
 8008e2c:	68a3      	ldr	r3, [r4, #8]
 8008e2e:	6822      	ldr	r2, [r4, #0]
 8008e30:	2b00      	cmp	r3, #0
 8008e32:	d03d      	beq.n	8008eb0 <_scanf_i+0x15c>
 8008e34:	6831      	ldr	r1, [r6, #0]
 8008e36:	6960      	ldr	r0, [r4, #20]
 8008e38:	f891 c000 	ldrb.w	ip, [r1]
 8008e3c:	f810 000c 	ldrb.w	r0, [r0, ip]
 8008e40:	2800      	cmp	r0, #0
 8008e42:	d035      	beq.n	8008eb0 <_scanf_i+0x15c>
 8008e44:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8008e48:	d124      	bne.n	8008e94 <_scanf_i+0x140>
 8008e4a:	0510      	lsls	r0, r2, #20
 8008e4c:	d522      	bpl.n	8008e94 <_scanf_i+0x140>
 8008e4e:	f10b 0b01 	add.w	fp, fp, #1
 8008e52:	f1b9 0f00 	cmp.w	r9, #0
 8008e56:	d003      	beq.n	8008e60 <_scanf_i+0x10c>
 8008e58:	3301      	adds	r3, #1
 8008e5a:	f109 39ff 	add.w	r9, r9, #4294967295
 8008e5e:	60a3      	str	r3, [r4, #8]
 8008e60:	6873      	ldr	r3, [r6, #4]
 8008e62:	3b01      	subs	r3, #1
 8008e64:	2b00      	cmp	r3, #0
 8008e66:	6073      	str	r3, [r6, #4]
 8008e68:	dd1b      	ble.n	8008ea2 <_scanf_i+0x14e>
 8008e6a:	6833      	ldr	r3, [r6, #0]
 8008e6c:	3301      	adds	r3, #1
 8008e6e:	6033      	str	r3, [r6, #0]
 8008e70:	68a3      	ldr	r3, [r4, #8]
 8008e72:	3b01      	subs	r3, #1
 8008e74:	60a3      	str	r3, [r4, #8]
 8008e76:	e7d9      	b.n	8008e2c <_scanf_i+0xd8>
 8008e78:	f1bb 0f02 	cmp.w	fp, #2
 8008e7c:	d1ae      	bne.n	8008ddc <_scanf_i+0x88>
 8008e7e:	6822      	ldr	r2, [r4, #0]
 8008e80:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8008e84:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8008e88:	d1bf      	bne.n	8008e0a <_scanf_i+0xb6>
 8008e8a:	2310      	movs	r3, #16
 8008e8c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008e90:	6063      	str	r3, [r4, #4]
 8008e92:	e7a2      	b.n	8008dda <_scanf_i+0x86>
 8008e94:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8008e98:	6022      	str	r2, [r4, #0]
 8008e9a:	780b      	ldrb	r3, [r1, #0]
 8008e9c:	f805 3b01 	strb.w	r3, [r5], #1
 8008ea0:	e7de      	b.n	8008e60 <_scanf_i+0x10c>
 8008ea2:	4631      	mov	r1, r6
 8008ea4:	4650      	mov	r0, sl
 8008ea6:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8008eaa:	4798      	blx	r3
 8008eac:	2800      	cmp	r0, #0
 8008eae:	d0df      	beq.n	8008e70 <_scanf_i+0x11c>
 8008eb0:	6823      	ldr	r3, [r4, #0]
 8008eb2:	05db      	lsls	r3, r3, #23
 8008eb4:	d50d      	bpl.n	8008ed2 <_scanf_i+0x17e>
 8008eb6:	42bd      	cmp	r5, r7
 8008eb8:	d909      	bls.n	8008ece <_scanf_i+0x17a>
 8008eba:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8008ebe:	4632      	mov	r2, r6
 8008ec0:	4650      	mov	r0, sl
 8008ec2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008ec6:	f105 39ff 	add.w	r9, r5, #4294967295
 8008eca:	4798      	blx	r3
 8008ecc:	464d      	mov	r5, r9
 8008ece:	42bd      	cmp	r5, r7
 8008ed0:	d02d      	beq.n	8008f2e <_scanf_i+0x1da>
 8008ed2:	6822      	ldr	r2, [r4, #0]
 8008ed4:	f012 0210 	ands.w	r2, r2, #16
 8008ed8:	d113      	bne.n	8008f02 <_scanf_i+0x1ae>
 8008eda:	702a      	strb	r2, [r5, #0]
 8008edc:	4639      	mov	r1, r7
 8008ede:	6863      	ldr	r3, [r4, #4]
 8008ee0:	4650      	mov	r0, sl
 8008ee2:	9e01      	ldr	r6, [sp, #4]
 8008ee4:	47b0      	blx	r6
 8008ee6:	6821      	ldr	r1, [r4, #0]
 8008ee8:	f8d8 3000 	ldr.w	r3, [r8]
 8008eec:	f011 0f20 	tst.w	r1, #32
 8008ef0:	d013      	beq.n	8008f1a <_scanf_i+0x1c6>
 8008ef2:	1d1a      	adds	r2, r3, #4
 8008ef4:	f8c8 2000 	str.w	r2, [r8]
 8008ef8:	681b      	ldr	r3, [r3, #0]
 8008efa:	6018      	str	r0, [r3, #0]
 8008efc:	68e3      	ldr	r3, [r4, #12]
 8008efe:	3301      	adds	r3, #1
 8008f00:	60e3      	str	r3, [r4, #12]
 8008f02:	2000      	movs	r0, #0
 8008f04:	1bed      	subs	r5, r5, r7
 8008f06:	44ab      	add	fp, r5
 8008f08:	6925      	ldr	r5, [r4, #16]
 8008f0a:	445d      	add	r5, fp
 8008f0c:	6125      	str	r5, [r4, #16]
 8008f0e:	b007      	add	sp, #28
 8008f10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f14:	f04f 0b00 	mov.w	fp, #0
 8008f18:	e7ca      	b.n	8008eb0 <_scanf_i+0x15c>
 8008f1a:	1d1a      	adds	r2, r3, #4
 8008f1c:	f8c8 2000 	str.w	r2, [r8]
 8008f20:	681b      	ldr	r3, [r3, #0]
 8008f22:	f011 0f01 	tst.w	r1, #1
 8008f26:	bf14      	ite	ne
 8008f28:	8018      	strhne	r0, [r3, #0]
 8008f2a:	6018      	streq	r0, [r3, #0]
 8008f2c:	e7e6      	b.n	8008efc <_scanf_i+0x1a8>
 8008f2e:	2001      	movs	r0, #1
 8008f30:	e7ed      	b.n	8008f0e <_scanf_i+0x1ba>
 8008f32:	bf00      	nop
 8008f34:	08009be8 	.word	0x08009be8
 8008f38:	080090e9 	.word	0x080090e9
 8008f3c:	0800664d 	.word	0x0800664d
 8008f40:	0800a12e 	.word	0x0800a12e

08008f44 <_read_r>:
 8008f44:	b538      	push	{r3, r4, r5, lr}
 8008f46:	4604      	mov	r4, r0
 8008f48:	4608      	mov	r0, r1
 8008f4a:	4611      	mov	r1, r2
 8008f4c:	2200      	movs	r2, #0
 8008f4e:	4d05      	ldr	r5, [pc, #20]	; (8008f64 <_read_r+0x20>)
 8008f50:	602a      	str	r2, [r5, #0]
 8008f52:	461a      	mov	r2, r3
 8008f54:	f7f8 fae2 	bl	800151c <_read>
 8008f58:	1c43      	adds	r3, r0, #1
 8008f5a:	d102      	bne.n	8008f62 <_read_r+0x1e>
 8008f5c:	682b      	ldr	r3, [r5, #0]
 8008f5e:	b103      	cbz	r3, 8008f62 <_read_r+0x1e>
 8008f60:	6023      	str	r3, [r4, #0]
 8008f62:	bd38      	pop	{r3, r4, r5, pc}
 8008f64:	200015bc 	.word	0x200015bc

08008f68 <nan>:
 8008f68:	2000      	movs	r0, #0
 8008f6a:	4901      	ldr	r1, [pc, #4]	; (8008f70 <nan+0x8>)
 8008f6c:	4770      	bx	lr
 8008f6e:	bf00      	nop
 8008f70:	7ff80000 	.word	0x7ff80000

08008f74 <_sbrk_r>:
 8008f74:	b538      	push	{r3, r4, r5, lr}
 8008f76:	2300      	movs	r3, #0
 8008f78:	4d05      	ldr	r5, [pc, #20]	; (8008f90 <_sbrk_r+0x1c>)
 8008f7a:	4604      	mov	r4, r0
 8008f7c:	4608      	mov	r0, r1
 8008f7e:	602b      	str	r3, [r5, #0]
 8008f80:	f7f8 faf6 	bl	8001570 <_sbrk>
 8008f84:	1c43      	adds	r3, r0, #1
 8008f86:	d102      	bne.n	8008f8e <_sbrk_r+0x1a>
 8008f88:	682b      	ldr	r3, [r5, #0]
 8008f8a:	b103      	cbz	r3, 8008f8e <_sbrk_r+0x1a>
 8008f8c:	6023      	str	r3, [r4, #0]
 8008f8e:	bd38      	pop	{r3, r4, r5, pc}
 8008f90:	200015bc 	.word	0x200015bc

08008f94 <__sccl>:
 8008f94:	b570      	push	{r4, r5, r6, lr}
 8008f96:	780b      	ldrb	r3, [r1, #0]
 8008f98:	4604      	mov	r4, r0
 8008f9a:	2b5e      	cmp	r3, #94	; 0x5e
 8008f9c:	bf13      	iteet	ne
 8008f9e:	2200      	movne	r2, #0
 8008fa0:	2201      	moveq	r2, #1
 8008fa2:	784b      	ldrbeq	r3, [r1, #1]
 8008fa4:	1c48      	addne	r0, r1, #1
 8008fa6:	bf08      	it	eq
 8008fa8:	1c88      	addeq	r0, r1, #2
 8008faa:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 8008fae:	1e61      	subs	r1, r4, #1
 8008fb0:	f801 2f01 	strb.w	r2, [r1, #1]!
 8008fb4:	42a9      	cmp	r1, r5
 8008fb6:	d1fb      	bne.n	8008fb0 <__sccl+0x1c>
 8008fb8:	b90b      	cbnz	r3, 8008fbe <__sccl+0x2a>
 8008fba:	3801      	subs	r0, #1
 8008fbc:	bd70      	pop	{r4, r5, r6, pc}
 8008fbe:	f082 0201 	eor.w	r2, r2, #1
 8008fc2:	4605      	mov	r5, r0
 8008fc4:	54e2      	strb	r2, [r4, r3]
 8008fc6:	4628      	mov	r0, r5
 8008fc8:	f810 1b01 	ldrb.w	r1, [r0], #1
 8008fcc:	292d      	cmp	r1, #45	; 0x2d
 8008fce:	d006      	beq.n	8008fde <__sccl+0x4a>
 8008fd0:	295d      	cmp	r1, #93	; 0x5d
 8008fd2:	d0f3      	beq.n	8008fbc <__sccl+0x28>
 8008fd4:	b909      	cbnz	r1, 8008fda <__sccl+0x46>
 8008fd6:	4628      	mov	r0, r5
 8008fd8:	e7f0      	b.n	8008fbc <__sccl+0x28>
 8008fda:	460b      	mov	r3, r1
 8008fdc:	e7f1      	b.n	8008fc2 <__sccl+0x2e>
 8008fde:	786e      	ldrb	r6, [r5, #1]
 8008fe0:	2e5d      	cmp	r6, #93	; 0x5d
 8008fe2:	d0fa      	beq.n	8008fda <__sccl+0x46>
 8008fe4:	42b3      	cmp	r3, r6
 8008fe6:	dcf8      	bgt.n	8008fda <__sccl+0x46>
 8008fe8:	4619      	mov	r1, r3
 8008fea:	3502      	adds	r5, #2
 8008fec:	3101      	adds	r1, #1
 8008fee:	428e      	cmp	r6, r1
 8008ff0:	5462      	strb	r2, [r4, r1]
 8008ff2:	dcfb      	bgt.n	8008fec <__sccl+0x58>
 8008ff4:	1af1      	subs	r1, r6, r3
 8008ff6:	3901      	subs	r1, #1
 8008ff8:	42b3      	cmp	r3, r6
 8008ffa:	bfa8      	it	ge
 8008ffc:	2100      	movge	r1, #0
 8008ffe:	1c58      	adds	r0, r3, #1
 8009000:	1843      	adds	r3, r0, r1
 8009002:	e7e0      	b.n	8008fc6 <__sccl+0x32>

08009004 <_strtoul_l.constprop.0>:
 8009004:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009008:	4686      	mov	lr, r0
 800900a:	460d      	mov	r5, r1
 800900c:	4f35      	ldr	r7, [pc, #212]	; (80090e4 <_strtoul_l.constprop.0+0xe0>)
 800900e:	4628      	mov	r0, r5
 8009010:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009014:	5de6      	ldrb	r6, [r4, r7]
 8009016:	f016 0608 	ands.w	r6, r6, #8
 800901a:	d1f8      	bne.n	800900e <_strtoul_l.constprop.0+0xa>
 800901c:	2c2d      	cmp	r4, #45	; 0x2d
 800901e:	d12f      	bne.n	8009080 <_strtoul_l.constprop.0+0x7c>
 8009020:	2601      	movs	r6, #1
 8009022:	782c      	ldrb	r4, [r5, #0]
 8009024:	1c85      	adds	r5, r0, #2
 8009026:	2b00      	cmp	r3, #0
 8009028:	d057      	beq.n	80090da <_strtoul_l.constprop.0+0xd6>
 800902a:	2b10      	cmp	r3, #16
 800902c:	d109      	bne.n	8009042 <_strtoul_l.constprop.0+0x3e>
 800902e:	2c30      	cmp	r4, #48	; 0x30
 8009030:	d107      	bne.n	8009042 <_strtoul_l.constprop.0+0x3e>
 8009032:	7828      	ldrb	r0, [r5, #0]
 8009034:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8009038:	2858      	cmp	r0, #88	; 0x58
 800903a:	d149      	bne.n	80090d0 <_strtoul_l.constprop.0+0xcc>
 800903c:	2310      	movs	r3, #16
 800903e:	786c      	ldrb	r4, [r5, #1]
 8009040:	3502      	adds	r5, #2
 8009042:	f04f 38ff 	mov.w	r8, #4294967295
 8009046:	fbb8 f8f3 	udiv	r8, r8, r3
 800904a:	2700      	movs	r7, #0
 800904c:	fb03 f908 	mul.w	r9, r3, r8
 8009050:	4638      	mov	r0, r7
 8009052:	ea6f 0909 	mvn.w	r9, r9
 8009056:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800905a:	f1bc 0f09 	cmp.w	ip, #9
 800905e:	d814      	bhi.n	800908a <_strtoul_l.constprop.0+0x86>
 8009060:	4664      	mov	r4, ip
 8009062:	42a3      	cmp	r3, r4
 8009064:	dd22      	ble.n	80090ac <_strtoul_l.constprop.0+0xa8>
 8009066:	2f00      	cmp	r7, #0
 8009068:	db1d      	blt.n	80090a6 <_strtoul_l.constprop.0+0xa2>
 800906a:	4580      	cmp	r8, r0
 800906c:	d31b      	bcc.n	80090a6 <_strtoul_l.constprop.0+0xa2>
 800906e:	d101      	bne.n	8009074 <_strtoul_l.constprop.0+0x70>
 8009070:	45a1      	cmp	r9, r4
 8009072:	db18      	blt.n	80090a6 <_strtoul_l.constprop.0+0xa2>
 8009074:	2701      	movs	r7, #1
 8009076:	fb00 4003 	mla	r0, r0, r3, r4
 800907a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800907e:	e7ea      	b.n	8009056 <_strtoul_l.constprop.0+0x52>
 8009080:	2c2b      	cmp	r4, #43	; 0x2b
 8009082:	bf04      	itt	eq
 8009084:	782c      	ldrbeq	r4, [r5, #0]
 8009086:	1c85      	addeq	r5, r0, #2
 8009088:	e7cd      	b.n	8009026 <_strtoul_l.constprop.0+0x22>
 800908a:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800908e:	f1bc 0f19 	cmp.w	ip, #25
 8009092:	d801      	bhi.n	8009098 <_strtoul_l.constprop.0+0x94>
 8009094:	3c37      	subs	r4, #55	; 0x37
 8009096:	e7e4      	b.n	8009062 <_strtoul_l.constprop.0+0x5e>
 8009098:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800909c:	f1bc 0f19 	cmp.w	ip, #25
 80090a0:	d804      	bhi.n	80090ac <_strtoul_l.constprop.0+0xa8>
 80090a2:	3c57      	subs	r4, #87	; 0x57
 80090a4:	e7dd      	b.n	8009062 <_strtoul_l.constprop.0+0x5e>
 80090a6:	f04f 37ff 	mov.w	r7, #4294967295
 80090aa:	e7e6      	b.n	800907a <_strtoul_l.constprop.0+0x76>
 80090ac:	2f00      	cmp	r7, #0
 80090ae:	da07      	bge.n	80090c0 <_strtoul_l.constprop.0+0xbc>
 80090b0:	2322      	movs	r3, #34	; 0x22
 80090b2:	f04f 30ff 	mov.w	r0, #4294967295
 80090b6:	f8ce 3000 	str.w	r3, [lr]
 80090ba:	b932      	cbnz	r2, 80090ca <_strtoul_l.constprop.0+0xc6>
 80090bc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80090c0:	b106      	cbz	r6, 80090c4 <_strtoul_l.constprop.0+0xc0>
 80090c2:	4240      	negs	r0, r0
 80090c4:	2a00      	cmp	r2, #0
 80090c6:	d0f9      	beq.n	80090bc <_strtoul_l.constprop.0+0xb8>
 80090c8:	b107      	cbz	r7, 80090cc <_strtoul_l.constprop.0+0xc8>
 80090ca:	1e69      	subs	r1, r5, #1
 80090cc:	6011      	str	r1, [r2, #0]
 80090ce:	e7f5      	b.n	80090bc <_strtoul_l.constprop.0+0xb8>
 80090d0:	2430      	movs	r4, #48	; 0x30
 80090d2:	2b00      	cmp	r3, #0
 80090d4:	d1b5      	bne.n	8009042 <_strtoul_l.constprop.0+0x3e>
 80090d6:	2308      	movs	r3, #8
 80090d8:	e7b3      	b.n	8009042 <_strtoul_l.constprop.0+0x3e>
 80090da:	2c30      	cmp	r4, #48	; 0x30
 80090dc:	d0a9      	beq.n	8009032 <_strtoul_l.constprop.0+0x2e>
 80090de:	230a      	movs	r3, #10
 80090e0:	e7af      	b.n	8009042 <_strtoul_l.constprop.0+0x3e>
 80090e2:	bf00      	nop
 80090e4:	08009da1 	.word	0x08009da1

080090e8 <_strtoul_r>:
 80090e8:	f7ff bf8c 	b.w	8009004 <_strtoul_l.constprop.0>

080090ec <__submore>:
 80090ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80090f0:	460c      	mov	r4, r1
 80090f2:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80090f4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80090f8:	4299      	cmp	r1, r3
 80090fa:	d11b      	bne.n	8009134 <__submore+0x48>
 80090fc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8009100:	f7ff fa2a 	bl	8008558 <_malloc_r>
 8009104:	b918      	cbnz	r0, 800910e <__submore+0x22>
 8009106:	f04f 30ff 	mov.w	r0, #4294967295
 800910a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800910e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009112:	63a3      	str	r3, [r4, #56]	; 0x38
 8009114:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8009118:	6360      	str	r0, [r4, #52]	; 0x34
 800911a:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800911e:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8009122:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8009126:	7043      	strb	r3, [r0, #1]
 8009128:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800912c:	7003      	strb	r3, [r0, #0]
 800912e:	6020      	str	r0, [r4, #0]
 8009130:	2000      	movs	r0, #0
 8009132:	e7ea      	b.n	800910a <__submore+0x1e>
 8009134:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8009136:	0077      	lsls	r7, r6, #1
 8009138:	463a      	mov	r2, r7
 800913a:	f000 fa29 	bl	8009590 <_realloc_r>
 800913e:	4605      	mov	r5, r0
 8009140:	2800      	cmp	r0, #0
 8009142:	d0e0      	beq.n	8009106 <__submore+0x1a>
 8009144:	eb00 0806 	add.w	r8, r0, r6
 8009148:	4601      	mov	r1, r0
 800914a:	4632      	mov	r2, r6
 800914c:	4640      	mov	r0, r8
 800914e:	f7fe fcc1 	bl	8007ad4 <memcpy>
 8009152:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8009156:	f8c4 8000 	str.w	r8, [r4]
 800915a:	e7e9      	b.n	8009130 <__submore+0x44>

0800915c <__ascii_wctomb>:
 800915c:	4603      	mov	r3, r0
 800915e:	4608      	mov	r0, r1
 8009160:	b141      	cbz	r1, 8009174 <__ascii_wctomb+0x18>
 8009162:	2aff      	cmp	r2, #255	; 0xff
 8009164:	d904      	bls.n	8009170 <__ascii_wctomb+0x14>
 8009166:	228a      	movs	r2, #138	; 0x8a
 8009168:	f04f 30ff 	mov.w	r0, #4294967295
 800916c:	601a      	str	r2, [r3, #0]
 800916e:	4770      	bx	lr
 8009170:	2001      	movs	r0, #1
 8009172:	700a      	strb	r2, [r1, #0]
 8009174:	4770      	bx	lr
	...

08009178 <__assert_func>:
 8009178:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800917a:	4614      	mov	r4, r2
 800917c:	461a      	mov	r2, r3
 800917e:	4b09      	ldr	r3, [pc, #36]	; (80091a4 <__assert_func+0x2c>)
 8009180:	4605      	mov	r5, r0
 8009182:	681b      	ldr	r3, [r3, #0]
 8009184:	68d8      	ldr	r0, [r3, #12]
 8009186:	b14c      	cbz	r4, 800919c <__assert_func+0x24>
 8009188:	4b07      	ldr	r3, [pc, #28]	; (80091a8 <__assert_func+0x30>)
 800918a:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800918e:	9100      	str	r1, [sp, #0]
 8009190:	462b      	mov	r3, r5
 8009192:	4906      	ldr	r1, [pc, #24]	; (80091ac <__assert_func+0x34>)
 8009194:	f000 f9a2 	bl	80094dc <fiprintf>
 8009198:	f000 fc40 	bl	8009a1c <abort>
 800919c:	4b04      	ldr	r3, [pc, #16]	; (80091b0 <__assert_func+0x38>)
 800919e:	461c      	mov	r4, r3
 80091a0:	e7f3      	b.n	800918a <__assert_func+0x12>
 80091a2:	bf00      	nop
 80091a4:	2000017c 	.word	0x2000017c
 80091a8:	0800a130 	.word	0x0800a130
 80091ac:	0800a13d 	.word	0x0800a13d
 80091b0:	0800a16b 	.word	0x0800a16b

080091b4 <__sflush_r>:
 80091b4:	898a      	ldrh	r2, [r1, #12]
 80091b6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80091b8:	4605      	mov	r5, r0
 80091ba:	0710      	lsls	r0, r2, #28
 80091bc:	460c      	mov	r4, r1
 80091be:	d457      	bmi.n	8009270 <__sflush_r+0xbc>
 80091c0:	684b      	ldr	r3, [r1, #4]
 80091c2:	2b00      	cmp	r3, #0
 80091c4:	dc04      	bgt.n	80091d0 <__sflush_r+0x1c>
 80091c6:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80091c8:	2b00      	cmp	r3, #0
 80091ca:	dc01      	bgt.n	80091d0 <__sflush_r+0x1c>
 80091cc:	2000      	movs	r0, #0
 80091ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80091d0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80091d2:	2e00      	cmp	r6, #0
 80091d4:	d0fa      	beq.n	80091cc <__sflush_r+0x18>
 80091d6:	2300      	movs	r3, #0
 80091d8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80091dc:	682f      	ldr	r7, [r5, #0]
 80091de:	602b      	str	r3, [r5, #0]
 80091e0:	d032      	beq.n	8009248 <__sflush_r+0x94>
 80091e2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80091e4:	89a3      	ldrh	r3, [r4, #12]
 80091e6:	075a      	lsls	r2, r3, #29
 80091e8:	d505      	bpl.n	80091f6 <__sflush_r+0x42>
 80091ea:	6863      	ldr	r3, [r4, #4]
 80091ec:	1ac0      	subs	r0, r0, r3
 80091ee:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80091f0:	b10b      	cbz	r3, 80091f6 <__sflush_r+0x42>
 80091f2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80091f4:	1ac0      	subs	r0, r0, r3
 80091f6:	2300      	movs	r3, #0
 80091f8:	4602      	mov	r2, r0
 80091fa:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80091fc:	4628      	mov	r0, r5
 80091fe:	6a21      	ldr	r1, [r4, #32]
 8009200:	47b0      	blx	r6
 8009202:	1c43      	adds	r3, r0, #1
 8009204:	89a3      	ldrh	r3, [r4, #12]
 8009206:	d106      	bne.n	8009216 <__sflush_r+0x62>
 8009208:	6829      	ldr	r1, [r5, #0]
 800920a:	291d      	cmp	r1, #29
 800920c:	d82c      	bhi.n	8009268 <__sflush_r+0xb4>
 800920e:	4a29      	ldr	r2, [pc, #164]	; (80092b4 <__sflush_r+0x100>)
 8009210:	40ca      	lsrs	r2, r1
 8009212:	07d6      	lsls	r6, r2, #31
 8009214:	d528      	bpl.n	8009268 <__sflush_r+0xb4>
 8009216:	2200      	movs	r2, #0
 8009218:	6062      	str	r2, [r4, #4]
 800921a:	6922      	ldr	r2, [r4, #16]
 800921c:	04d9      	lsls	r1, r3, #19
 800921e:	6022      	str	r2, [r4, #0]
 8009220:	d504      	bpl.n	800922c <__sflush_r+0x78>
 8009222:	1c42      	adds	r2, r0, #1
 8009224:	d101      	bne.n	800922a <__sflush_r+0x76>
 8009226:	682b      	ldr	r3, [r5, #0]
 8009228:	b903      	cbnz	r3, 800922c <__sflush_r+0x78>
 800922a:	6560      	str	r0, [r4, #84]	; 0x54
 800922c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800922e:	602f      	str	r7, [r5, #0]
 8009230:	2900      	cmp	r1, #0
 8009232:	d0cb      	beq.n	80091cc <__sflush_r+0x18>
 8009234:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009238:	4299      	cmp	r1, r3
 800923a:	d002      	beq.n	8009242 <__sflush_r+0x8e>
 800923c:	4628      	mov	r0, r5
 800923e:	f7ff f923 	bl	8008488 <_free_r>
 8009242:	2000      	movs	r0, #0
 8009244:	6360      	str	r0, [r4, #52]	; 0x34
 8009246:	e7c2      	b.n	80091ce <__sflush_r+0x1a>
 8009248:	6a21      	ldr	r1, [r4, #32]
 800924a:	2301      	movs	r3, #1
 800924c:	4628      	mov	r0, r5
 800924e:	47b0      	blx	r6
 8009250:	1c41      	adds	r1, r0, #1
 8009252:	d1c7      	bne.n	80091e4 <__sflush_r+0x30>
 8009254:	682b      	ldr	r3, [r5, #0]
 8009256:	2b00      	cmp	r3, #0
 8009258:	d0c4      	beq.n	80091e4 <__sflush_r+0x30>
 800925a:	2b1d      	cmp	r3, #29
 800925c:	d001      	beq.n	8009262 <__sflush_r+0xae>
 800925e:	2b16      	cmp	r3, #22
 8009260:	d101      	bne.n	8009266 <__sflush_r+0xb2>
 8009262:	602f      	str	r7, [r5, #0]
 8009264:	e7b2      	b.n	80091cc <__sflush_r+0x18>
 8009266:	89a3      	ldrh	r3, [r4, #12]
 8009268:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800926c:	81a3      	strh	r3, [r4, #12]
 800926e:	e7ae      	b.n	80091ce <__sflush_r+0x1a>
 8009270:	690f      	ldr	r7, [r1, #16]
 8009272:	2f00      	cmp	r7, #0
 8009274:	d0aa      	beq.n	80091cc <__sflush_r+0x18>
 8009276:	0793      	lsls	r3, r2, #30
 8009278:	bf18      	it	ne
 800927a:	2300      	movne	r3, #0
 800927c:	680e      	ldr	r6, [r1, #0]
 800927e:	bf08      	it	eq
 8009280:	694b      	ldreq	r3, [r1, #20]
 8009282:	1bf6      	subs	r6, r6, r7
 8009284:	600f      	str	r7, [r1, #0]
 8009286:	608b      	str	r3, [r1, #8]
 8009288:	2e00      	cmp	r6, #0
 800928a:	dd9f      	ble.n	80091cc <__sflush_r+0x18>
 800928c:	4633      	mov	r3, r6
 800928e:	463a      	mov	r2, r7
 8009290:	4628      	mov	r0, r5
 8009292:	6a21      	ldr	r1, [r4, #32]
 8009294:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8009298:	47e0      	blx	ip
 800929a:	2800      	cmp	r0, #0
 800929c:	dc06      	bgt.n	80092ac <__sflush_r+0xf8>
 800929e:	89a3      	ldrh	r3, [r4, #12]
 80092a0:	f04f 30ff 	mov.w	r0, #4294967295
 80092a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80092a8:	81a3      	strh	r3, [r4, #12]
 80092aa:	e790      	b.n	80091ce <__sflush_r+0x1a>
 80092ac:	4407      	add	r7, r0
 80092ae:	1a36      	subs	r6, r6, r0
 80092b0:	e7ea      	b.n	8009288 <__sflush_r+0xd4>
 80092b2:	bf00      	nop
 80092b4:	20400001 	.word	0x20400001

080092b8 <_fflush_r>:
 80092b8:	b538      	push	{r3, r4, r5, lr}
 80092ba:	690b      	ldr	r3, [r1, #16]
 80092bc:	4605      	mov	r5, r0
 80092be:	460c      	mov	r4, r1
 80092c0:	b913      	cbnz	r3, 80092c8 <_fflush_r+0x10>
 80092c2:	2500      	movs	r5, #0
 80092c4:	4628      	mov	r0, r5
 80092c6:	bd38      	pop	{r3, r4, r5, pc}
 80092c8:	b118      	cbz	r0, 80092d2 <_fflush_r+0x1a>
 80092ca:	6983      	ldr	r3, [r0, #24]
 80092cc:	b90b      	cbnz	r3, 80092d2 <_fflush_r+0x1a>
 80092ce:	f000 f887 	bl	80093e0 <__sinit>
 80092d2:	4b14      	ldr	r3, [pc, #80]	; (8009324 <_fflush_r+0x6c>)
 80092d4:	429c      	cmp	r4, r3
 80092d6:	d11b      	bne.n	8009310 <_fflush_r+0x58>
 80092d8:	686c      	ldr	r4, [r5, #4]
 80092da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80092de:	2b00      	cmp	r3, #0
 80092e0:	d0ef      	beq.n	80092c2 <_fflush_r+0xa>
 80092e2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80092e4:	07d0      	lsls	r0, r2, #31
 80092e6:	d404      	bmi.n	80092f2 <_fflush_r+0x3a>
 80092e8:	0599      	lsls	r1, r3, #22
 80092ea:	d402      	bmi.n	80092f2 <_fflush_r+0x3a>
 80092ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80092ee:	f000 f927 	bl	8009540 <__retarget_lock_acquire_recursive>
 80092f2:	4628      	mov	r0, r5
 80092f4:	4621      	mov	r1, r4
 80092f6:	f7ff ff5d 	bl	80091b4 <__sflush_r>
 80092fa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80092fc:	4605      	mov	r5, r0
 80092fe:	07da      	lsls	r2, r3, #31
 8009300:	d4e0      	bmi.n	80092c4 <_fflush_r+0xc>
 8009302:	89a3      	ldrh	r3, [r4, #12]
 8009304:	059b      	lsls	r3, r3, #22
 8009306:	d4dd      	bmi.n	80092c4 <_fflush_r+0xc>
 8009308:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800930a:	f000 f91a 	bl	8009542 <__retarget_lock_release_recursive>
 800930e:	e7d9      	b.n	80092c4 <_fflush_r+0xc>
 8009310:	4b05      	ldr	r3, [pc, #20]	; (8009328 <_fflush_r+0x70>)
 8009312:	429c      	cmp	r4, r3
 8009314:	d101      	bne.n	800931a <_fflush_r+0x62>
 8009316:	68ac      	ldr	r4, [r5, #8]
 8009318:	e7df      	b.n	80092da <_fflush_r+0x22>
 800931a:	4b04      	ldr	r3, [pc, #16]	; (800932c <_fflush_r+0x74>)
 800931c:	429c      	cmp	r4, r3
 800931e:	bf08      	it	eq
 8009320:	68ec      	ldreq	r4, [r5, #12]
 8009322:	e7da      	b.n	80092da <_fflush_r+0x22>
 8009324:	0800a18c 	.word	0x0800a18c
 8009328:	0800a1ac 	.word	0x0800a1ac
 800932c:	0800a16c 	.word	0x0800a16c

08009330 <std>:
 8009330:	2300      	movs	r3, #0
 8009332:	b510      	push	{r4, lr}
 8009334:	4604      	mov	r4, r0
 8009336:	e9c0 3300 	strd	r3, r3, [r0]
 800933a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800933e:	6083      	str	r3, [r0, #8]
 8009340:	8181      	strh	r1, [r0, #12]
 8009342:	6643      	str	r3, [r0, #100]	; 0x64
 8009344:	81c2      	strh	r2, [r0, #14]
 8009346:	6183      	str	r3, [r0, #24]
 8009348:	4619      	mov	r1, r3
 800934a:	2208      	movs	r2, #8
 800934c:	305c      	adds	r0, #92	; 0x5c
 800934e:	f7fb fbd5 	bl	8004afc <memset>
 8009352:	4b05      	ldr	r3, [pc, #20]	; (8009368 <std+0x38>)
 8009354:	6224      	str	r4, [r4, #32]
 8009356:	6263      	str	r3, [r4, #36]	; 0x24
 8009358:	4b04      	ldr	r3, [pc, #16]	; (800936c <std+0x3c>)
 800935a:	62a3      	str	r3, [r4, #40]	; 0x28
 800935c:	4b04      	ldr	r3, [pc, #16]	; (8009370 <std+0x40>)
 800935e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009360:	4b04      	ldr	r3, [pc, #16]	; (8009374 <std+0x44>)
 8009362:	6323      	str	r3, [r4, #48]	; 0x30
 8009364:	bd10      	pop	{r4, pc}
 8009366:	bf00      	nop
 8009368:	08005885 	.word	0x08005885
 800936c:	080058ab 	.word	0x080058ab
 8009370:	080058e3 	.word	0x080058e3
 8009374:	08005907 	.word	0x08005907

08009378 <_cleanup_r>:
 8009378:	4901      	ldr	r1, [pc, #4]	; (8009380 <_cleanup_r+0x8>)
 800937a:	f000 b8c1 	b.w	8009500 <_fwalk_reent>
 800937e:	bf00      	nop
 8009380:	080092b9 	.word	0x080092b9

08009384 <__sfmoreglue>:
 8009384:	2268      	movs	r2, #104	; 0x68
 8009386:	b570      	push	{r4, r5, r6, lr}
 8009388:	1e4d      	subs	r5, r1, #1
 800938a:	4355      	muls	r5, r2
 800938c:	460e      	mov	r6, r1
 800938e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8009392:	f7ff f8e1 	bl	8008558 <_malloc_r>
 8009396:	4604      	mov	r4, r0
 8009398:	b140      	cbz	r0, 80093ac <__sfmoreglue+0x28>
 800939a:	2100      	movs	r1, #0
 800939c:	e9c0 1600 	strd	r1, r6, [r0]
 80093a0:	300c      	adds	r0, #12
 80093a2:	60a0      	str	r0, [r4, #8]
 80093a4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80093a8:	f7fb fba8 	bl	8004afc <memset>
 80093ac:	4620      	mov	r0, r4
 80093ae:	bd70      	pop	{r4, r5, r6, pc}

080093b0 <__sfp_lock_acquire>:
 80093b0:	4801      	ldr	r0, [pc, #4]	; (80093b8 <__sfp_lock_acquire+0x8>)
 80093b2:	f000 b8c5 	b.w	8009540 <__retarget_lock_acquire_recursive>
 80093b6:	bf00      	nop
 80093b8:	200015c1 	.word	0x200015c1

080093bc <__sfp_lock_release>:
 80093bc:	4801      	ldr	r0, [pc, #4]	; (80093c4 <__sfp_lock_release+0x8>)
 80093be:	f000 b8c0 	b.w	8009542 <__retarget_lock_release_recursive>
 80093c2:	bf00      	nop
 80093c4:	200015c1 	.word	0x200015c1

080093c8 <__sinit_lock_acquire>:
 80093c8:	4801      	ldr	r0, [pc, #4]	; (80093d0 <__sinit_lock_acquire+0x8>)
 80093ca:	f000 b8b9 	b.w	8009540 <__retarget_lock_acquire_recursive>
 80093ce:	bf00      	nop
 80093d0:	200015c2 	.word	0x200015c2

080093d4 <__sinit_lock_release>:
 80093d4:	4801      	ldr	r0, [pc, #4]	; (80093dc <__sinit_lock_release+0x8>)
 80093d6:	f000 b8b4 	b.w	8009542 <__retarget_lock_release_recursive>
 80093da:	bf00      	nop
 80093dc:	200015c2 	.word	0x200015c2

080093e0 <__sinit>:
 80093e0:	b510      	push	{r4, lr}
 80093e2:	4604      	mov	r4, r0
 80093e4:	f7ff fff0 	bl	80093c8 <__sinit_lock_acquire>
 80093e8:	69a3      	ldr	r3, [r4, #24]
 80093ea:	b11b      	cbz	r3, 80093f4 <__sinit+0x14>
 80093ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80093f0:	f7ff bff0 	b.w	80093d4 <__sinit_lock_release>
 80093f4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80093f8:	6523      	str	r3, [r4, #80]	; 0x50
 80093fa:	4b13      	ldr	r3, [pc, #76]	; (8009448 <__sinit+0x68>)
 80093fc:	4a13      	ldr	r2, [pc, #76]	; (800944c <__sinit+0x6c>)
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	62a2      	str	r2, [r4, #40]	; 0x28
 8009402:	42a3      	cmp	r3, r4
 8009404:	bf08      	it	eq
 8009406:	2301      	moveq	r3, #1
 8009408:	4620      	mov	r0, r4
 800940a:	bf08      	it	eq
 800940c:	61a3      	streq	r3, [r4, #24]
 800940e:	f000 f81f 	bl	8009450 <__sfp>
 8009412:	6060      	str	r0, [r4, #4]
 8009414:	4620      	mov	r0, r4
 8009416:	f000 f81b 	bl	8009450 <__sfp>
 800941a:	60a0      	str	r0, [r4, #8]
 800941c:	4620      	mov	r0, r4
 800941e:	f000 f817 	bl	8009450 <__sfp>
 8009422:	2200      	movs	r2, #0
 8009424:	2104      	movs	r1, #4
 8009426:	60e0      	str	r0, [r4, #12]
 8009428:	6860      	ldr	r0, [r4, #4]
 800942a:	f7ff ff81 	bl	8009330 <std>
 800942e:	2201      	movs	r2, #1
 8009430:	2109      	movs	r1, #9
 8009432:	68a0      	ldr	r0, [r4, #8]
 8009434:	f7ff ff7c 	bl	8009330 <std>
 8009438:	2202      	movs	r2, #2
 800943a:	2112      	movs	r1, #18
 800943c:	68e0      	ldr	r0, [r4, #12]
 800943e:	f7ff ff77 	bl	8009330 <std>
 8009442:	2301      	movs	r3, #1
 8009444:	61a3      	str	r3, [r4, #24]
 8009446:	e7d1      	b.n	80093ec <__sinit+0xc>
 8009448:	08009d14 	.word	0x08009d14
 800944c:	08009379 	.word	0x08009379

08009450 <__sfp>:
 8009450:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009452:	4607      	mov	r7, r0
 8009454:	f7ff ffac 	bl	80093b0 <__sfp_lock_acquire>
 8009458:	4b1e      	ldr	r3, [pc, #120]	; (80094d4 <__sfp+0x84>)
 800945a:	681e      	ldr	r6, [r3, #0]
 800945c:	69b3      	ldr	r3, [r6, #24]
 800945e:	b913      	cbnz	r3, 8009466 <__sfp+0x16>
 8009460:	4630      	mov	r0, r6
 8009462:	f7ff ffbd 	bl	80093e0 <__sinit>
 8009466:	3648      	adds	r6, #72	; 0x48
 8009468:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800946c:	3b01      	subs	r3, #1
 800946e:	d503      	bpl.n	8009478 <__sfp+0x28>
 8009470:	6833      	ldr	r3, [r6, #0]
 8009472:	b30b      	cbz	r3, 80094b8 <__sfp+0x68>
 8009474:	6836      	ldr	r6, [r6, #0]
 8009476:	e7f7      	b.n	8009468 <__sfp+0x18>
 8009478:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800947c:	b9d5      	cbnz	r5, 80094b4 <__sfp+0x64>
 800947e:	4b16      	ldr	r3, [pc, #88]	; (80094d8 <__sfp+0x88>)
 8009480:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009484:	60e3      	str	r3, [r4, #12]
 8009486:	6665      	str	r5, [r4, #100]	; 0x64
 8009488:	f000 f859 	bl	800953e <__retarget_lock_init_recursive>
 800948c:	f7ff ff96 	bl	80093bc <__sfp_lock_release>
 8009490:	2208      	movs	r2, #8
 8009492:	4629      	mov	r1, r5
 8009494:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009498:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800949c:	6025      	str	r5, [r4, #0]
 800949e:	61a5      	str	r5, [r4, #24]
 80094a0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80094a4:	f7fb fb2a 	bl	8004afc <memset>
 80094a8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80094ac:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80094b0:	4620      	mov	r0, r4
 80094b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80094b4:	3468      	adds	r4, #104	; 0x68
 80094b6:	e7d9      	b.n	800946c <__sfp+0x1c>
 80094b8:	2104      	movs	r1, #4
 80094ba:	4638      	mov	r0, r7
 80094bc:	f7ff ff62 	bl	8009384 <__sfmoreglue>
 80094c0:	4604      	mov	r4, r0
 80094c2:	6030      	str	r0, [r6, #0]
 80094c4:	2800      	cmp	r0, #0
 80094c6:	d1d5      	bne.n	8009474 <__sfp+0x24>
 80094c8:	f7ff ff78 	bl	80093bc <__sfp_lock_release>
 80094cc:	230c      	movs	r3, #12
 80094ce:	603b      	str	r3, [r7, #0]
 80094d0:	e7ee      	b.n	80094b0 <__sfp+0x60>
 80094d2:	bf00      	nop
 80094d4:	08009d14 	.word	0x08009d14
 80094d8:	ffff0001 	.word	0xffff0001

080094dc <fiprintf>:
 80094dc:	b40e      	push	{r1, r2, r3}
 80094de:	b503      	push	{r0, r1, lr}
 80094e0:	4601      	mov	r1, r0
 80094e2:	ab03      	add	r3, sp, #12
 80094e4:	4805      	ldr	r0, [pc, #20]	; (80094fc <fiprintf+0x20>)
 80094e6:	f853 2b04 	ldr.w	r2, [r3], #4
 80094ea:	6800      	ldr	r0, [r0, #0]
 80094ec:	9301      	str	r3, [sp, #4]
 80094ee:	f000 f8a5 	bl	800963c <_vfiprintf_r>
 80094f2:	b002      	add	sp, #8
 80094f4:	f85d eb04 	ldr.w	lr, [sp], #4
 80094f8:	b003      	add	sp, #12
 80094fa:	4770      	bx	lr
 80094fc:	2000017c 	.word	0x2000017c

08009500 <_fwalk_reent>:
 8009500:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009504:	4606      	mov	r6, r0
 8009506:	4688      	mov	r8, r1
 8009508:	2700      	movs	r7, #0
 800950a:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800950e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009512:	f1b9 0901 	subs.w	r9, r9, #1
 8009516:	d505      	bpl.n	8009524 <_fwalk_reent+0x24>
 8009518:	6824      	ldr	r4, [r4, #0]
 800951a:	2c00      	cmp	r4, #0
 800951c:	d1f7      	bne.n	800950e <_fwalk_reent+0xe>
 800951e:	4638      	mov	r0, r7
 8009520:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009524:	89ab      	ldrh	r3, [r5, #12]
 8009526:	2b01      	cmp	r3, #1
 8009528:	d907      	bls.n	800953a <_fwalk_reent+0x3a>
 800952a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800952e:	3301      	adds	r3, #1
 8009530:	d003      	beq.n	800953a <_fwalk_reent+0x3a>
 8009532:	4629      	mov	r1, r5
 8009534:	4630      	mov	r0, r6
 8009536:	47c0      	blx	r8
 8009538:	4307      	orrs	r7, r0
 800953a:	3568      	adds	r5, #104	; 0x68
 800953c:	e7e9      	b.n	8009512 <_fwalk_reent+0x12>

0800953e <__retarget_lock_init_recursive>:
 800953e:	4770      	bx	lr

08009540 <__retarget_lock_acquire_recursive>:
 8009540:	4770      	bx	lr

08009542 <__retarget_lock_release_recursive>:
 8009542:	4770      	bx	lr

08009544 <memmove>:
 8009544:	4288      	cmp	r0, r1
 8009546:	b510      	push	{r4, lr}
 8009548:	eb01 0402 	add.w	r4, r1, r2
 800954c:	d902      	bls.n	8009554 <memmove+0x10>
 800954e:	4284      	cmp	r4, r0
 8009550:	4623      	mov	r3, r4
 8009552:	d807      	bhi.n	8009564 <memmove+0x20>
 8009554:	1e43      	subs	r3, r0, #1
 8009556:	42a1      	cmp	r1, r4
 8009558:	d008      	beq.n	800956c <memmove+0x28>
 800955a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800955e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009562:	e7f8      	b.n	8009556 <memmove+0x12>
 8009564:	4601      	mov	r1, r0
 8009566:	4402      	add	r2, r0
 8009568:	428a      	cmp	r2, r1
 800956a:	d100      	bne.n	800956e <memmove+0x2a>
 800956c:	bd10      	pop	{r4, pc}
 800956e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009572:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009576:	e7f7      	b.n	8009568 <memmove+0x24>

08009578 <__malloc_lock>:
 8009578:	4801      	ldr	r0, [pc, #4]	; (8009580 <__malloc_lock+0x8>)
 800957a:	f7ff bfe1 	b.w	8009540 <__retarget_lock_acquire_recursive>
 800957e:	bf00      	nop
 8009580:	200015c0 	.word	0x200015c0

08009584 <__malloc_unlock>:
 8009584:	4801      	ldr	r0, [pc, #4]	; (800958c <__malloc_unlock+0x8>)
 8009586:	f7ff bfdc 	b.w	8009542 <__retarget_lock_release_recursive>
 800958a:	bf00      	nop
 800958c:	200015c0 	.word	0x200015c0

08009590 <_realloc_r>:
 8009590:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009594:	4680      	mov	r8, r0
 8009596:	4614      	mov	r4, r2
 8009598:	460e      	mov	r6, r1
 800959a:	b921      	cbnz	r1, 80095a6 <_realloc_r+0x16>
 800959c:	4611      	mov	r1, r2
 800959e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80095a2:	f7fe bfd9 	b.w	8008558 <_malloc_r>
 80095a6:	b92a      	cbnz	r2, 80095b4 <_realloc_r+0x24>
 80095a8:	f7fe ff6e 	bl	8008488 <_free_r>
 80095ac:	4625      	mov	r5, r4
 80095ae:	4628      	mov	r0, r5
 80095b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80095b4:	f000 fa9e 	bl	8009af4 <_malloc_usable_size_r>
 80095b8:	4284      	cmp	r4, r0
 80095ba:	4607      	mov	r7, r0
 80095bc:	d802      	bhi.n	80095c4 <_realloc_r+0x34>
 80095be:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80095c2:	d812      	bhi.n	80095ea <_realloc_r+0x5a>
 80095c4:	4621      	mov	r1, r4
 80095c6:	4640      	mov	r0, r8
 80095c8:	f7fe ffc6 	bl	8008558 <_malloc_r>
 80095cc:	4605      	mov	r5, r0
 80095ce:	2800      	cmp	r0, #0
 80095d0:	d0ed      	beq.n	80095ae <_realloc_r+0x1e>
 80095d2:	42bc      	cmp	r4, r7
 80095d4:	4622      	mov	r2, r4
 80095d6:	4631      	mov	r1, r6
 80095d8:	bf28      	it	cs
 80095da:	463a      	movcs	r2, r7
 80095dc:	f7fe fa7a 	bl	8007ad4 <memcpy>
 80095e0:	4631      	mov	r1, r6
 80095e2:	4640      	mov	r0, r8
 80095e4:	f7fe ff50 	bl	8008488 <_free_r>
 80095e8:	e7e1      	b.n	80095ae <_realloc_r+0x1e>
 80095ea:	4635      	mov	r5, r6
 80095ec:	e7df      	b.n	80095ae <_realloc_r+0x1e>

080095ee <__sfputc_r>:
 80095ee:	6893      	ldr	r3, [r2, #8]
 80095f0:	b410      	push	{r4}
 80095f2:	3b01      	subs	r3, #1
 80095f4:	2b00      	cmp	r3, #0
 80095f6:	6093      	str	r3, [r2, #8]
 80095f8:	da07      	bge.n	800960a <__sfputc_r+0x1c>
 80095fa:	6994      	ldr	r4, [r2, #24]
 80095fc:	42a3      	cmp	r3, r4
 80095fe:	db01      	blt.n	8009604 <__sfputc_r+0x16>
 8009600:	290a      	cmp	r1, #10
 8009602:	d102      	bne.n	800960a <__sfputc_r+0x1c>
 8009604:	bc10      	pop	{r4}
 8009606:	f000 b949 	b.w	800989c <__swbuf_r>
 800960a:	6813      	ldr	r3, [r2, #0]
 800960c:	1c58      	adds	r0, r3, #1
 800960e:	6010      	str	r0, [r2, #0]
 8009610:	7019      	strb	r1, [r3, #0]
 8009612:	4608      	mov	r0, r1
 8009614:	bc10      	pop	{r4}
 8009616:	4770      	bx	lr

08009618 <__sfputs_r>:
 8009618:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800961a:	4606      	mov	r6, r0
 800961c:	460f      	mov	r7, r1
 800961e:	4614      	mov	r4, r2
 8009620:	18d5      	adds	r5, r2, r3
 8009622:	42ac      	cmp	r4, r5
 8009624:	d101      	bne.n	800962a <__sfputs_r+0x12>
 8009626:	2000      	movs	r0, #0
 8009628:	e007      	b.n	800963a <__sfputs_r+0x22>
 800962a:	463a      	mov	r2, r7
 800962c:	4630      	mov	r0, r6
 800962e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009632:	f7ff ffdc 	bl	80095ee <__sfputc_r>
 8009636:	1c43      	adds	r3, r0, #1
 8009638:	d1f3      	bne.n	8009622 <__sfputs_r+0xa>
 800963a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800963c <_vfiprintf_r>:
 800963c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009640:	460d      	mov	r5, r1
 8009642:	4614      	mov	r4, r2
 8009644:	4698      	mov	r8, r3
 8009646:	4606      	mov	r6, r0
 8009648:	b09d      	sub	sp, #116	; 0x74
 800964a:	b118      	cbz	r0, 8009654 <_vfiprintf_r+0x18>
 800964c:	6983      	ldr	r3, [r0, #24]
 800964e:	b90b      	cbnz	r3, 8009654 <_vfiprintf_r+0x18>
 8009650:	f7ff fec6 	bl	80093e0 <__sinit>
 8009654:	4b89      	ldr	r3, [pc, #548]	; (800987c <_vfiprintf_r+0x240>)
 8009656:	429d      	cmp	r5, r3
 8009658:	d11b      	bne.n	8009692 <_vfiprintf_r+0x56>
 800965a:	6875      	ldr	r5, [r6, #4]
 800965c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800965e:	07d9      	lsls	r1, r3, #31
 8009660:	d405      	bmi.n	800966e <_vfiprintf_r+0x32>
 8009662:	89ab      	ldrh	r3, [r5, #12]
 8009664:	059a      	lsls	r2, r3, #22
 8009666:	d402      	bmi.n	800966e <_vfiprintf_r+0x32>
 8009668:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800966a:	f7ff ff69 	bl	8009540 <__retarget_lock_acquire_recursive>
 800966e:	89ab      	ldrh	r3, [r5, #12]
 8009670:	071b      	lsls	r3, r3, #28
 8009672:	d501      	bpl.n	8009678 <_vfiprintf_r+0x3c>
 8009674:	692b      	ldr	r3, [r5, #16]
 8009676:	b9eb      	cbnz	r3, 80096b4 <_vfiprintf_r+0x78>
 8009678:	4629      	mov	r1, r5
 800967a:	4630      	mov	r0, r6
 800967c:	f000 f960 	bl	8009940 <__swsetup_r>
 8009680:	b1c0      	cbz	r0, 80096b4 <_vfiprintf_r+0x78>
 8009682:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009684:	07dc      	lsls	r4, r3, #31
 8009686:	d50e      	bpl.n	80096a6 <_vfiprintf_r+0x6a>
 8009688:	f04f 30ff 	mov.w	r0, #4294967295
 800968c:	b01d      	add	sp, #116	; 0x74
 800968e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009692:	4b7b      	ldr	r3, [pc, #492]	; (8009880 <_vfiprintf_r+0x244>)
 8009694:	429d      	cmp	r5, r3
 8009696:	d101      	bne.n	800969c <_vfiprintf_r+0x60>
 8009698:	68b5      	ldr	r5, [r6, #8]
 800969a:	e7df      	b.n	800965c <_vfiprintf_r+0x20>
 800969c:	4b79      	ldr	r3, [pc, #484]	; (8009884 <_vfiprintf_r+0x248>)
 800969e:	429d      	cmp	r5, r3
 80096a0:	bf08      	it	eq
 80096a2:	68f5      	ldreq	r5, [r6, #12]
 80096a4:	e7da      	b.n	800965c <_vfiprintf_r+0x20>
 80096a6:	89ab      	ldrh	r3, [r5, #12]
 80096a8:	0598      	lsls	r0, r3, #22
 80096aa:	d4ed      	bmi.n	8009688 <_vfiprintf_r+0x4c>
 80096ac:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80096ae:	f7ff ff48 	bl	8009542 <__retarget_lock_release_recursive>
 80096b2:	e7e9      	b.n	8009688 <_vfiprintf_r+0x4c>
 80096b4:	2300      	movs	r3, #0
 80096b6:	9309      	str	r3, [sp, #36]	; 0x24
 80096b8:	2320      	movs	r3, #32
 80096ba:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80096be:	2330      	movs	r3, #48	; 0x30
 80096c0:	f04f 0901 	mov.w	r9, #1
 80096c4:	f8cd 800c 	str.w	r8, [sp, #12]
 80096c8:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8009888 <_vfiprintf_r+0x24c>
 80096cc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80096d0:	4623      	mov	r3, r4
 80096d2:	469a      	mov	sl, r3
 80096d4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80096d8:	b10a      	cbz	r2, 80096de <_vfiprintf_r+0xa2>
 80096da:	2a25      	cmp	r2, #37	; 0x25
 80096dc:	d1f9      	bne.n	80096d2 <_vfiprintf_r+0x96>
 80096de:	ebba 0b04 	subs.w	fp, sl, r4
 80096e2:	d00b      	beq.n	80096fc <_vfiprintf_r+0xc0>
 80096e4:	465b      	mov	r3, fp
 80096e6:	4622      	mov	r2, r4
 80096e8:	4629      	mov	r1, r5
 80096ea:	4630      	mov	r0, r6
 80096ec:	f7ff ff94 	bl	8009618 <__sfputs_r>
 80096f0:	3001      	adds	r0, #1
 80096f2:	f000 80aa 	beq.w	800984a <_vfiprintf_r+0x20e>
 80096f6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80096f8:	445a      	add	r2, fp
 80096fa:	9209      	str	r2, [sp, #36]	; 0x24
 80096fc:	f89a 3000 	ldrb.w	r3, [sl]
 8009700:	2b00      	cmp	r3, #0
 8009702:	f000 80a2 	beq.w	800984a <_vfiprintf_r+0x20e>
 8009706:	2300      	movs	r3, #0
 8009708:	f04f 32ff 	mov.w	r2, #4294967295
 800970c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009710:	f10a 0a01 	add.w	sl, sl, #1
 8009714:	9304      	str	r3, [sp, #16]
 8009716:	9307      	str	r3, [sp, #28]
 8009718:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800971c:	931a      	str	r3, [sp, #104]	; 0x68
 800971e:	4654      	mov	r4, sl
 8009720:	2205      	movs	r2, #5
 8009722:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009726:	4858      	ldr	r0, [pc, #352]	; (8009888 <_vfiprintf_r+0x24c>)
 8009728:	f7fe f9c6 	bl	8007ab8 <memchr>
 800972c:	9a04      	ldr	r2, [sp, #16]
 800972e:	b9d8      	cbnz	r0, 8009768 <_vfiprintf_r+0x12c>
 8009730:	06d1      	lsls	r1, r2, #27
 8009732:	bf44      	itt	mi
 8009734:	2320      	movmi	r3, #32
 8009736:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800973a:	0713      	lsls	r3, r2, #28
 800973c:	bf44      	itt	mi
 800973e:	232b      	movmi	r3, #43	; 0x2b
 8009740:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009744:	f89a 3000 	ldrb.w	r3, [sl]
 8009748:	2b2a      	cmp	r3, #42	; 0x2a
 800974a:	d015      	beq.n	8009778 <_vfiprintf_r+0x13c>
 800974c:	4654      	mov	r4, sl
 800974e:	2000      	movs	r0, #0
 8009750:	f04f 0c0a 	mov.w	ip, #10
 8009754:	9a07      	ldr	r2, [sp, #28]
 8009756:	4621      	mov	r1, r4
 8009758:	f811 3b01 	ldrb.w	r3, [r1], #1
 800975c:	3b30      	subs	r3, #48	; 0x30
 800975e:	2b09      	cmp	r3, #9
 8009760:	d94e      	bls.n	8009800 <_vfiprintf_r+0x1c4>
 8009762:	b1b0      	cbz	r0, 8009792 <_vfiprintf_r+0x156>
 8009764:	9207      	str	r2, [sp, #28]
 8009766:	e014      	b.n	8009792 <_vfiprintf_r+0x156>
 8009768:	eba0 0308 	sub.w	r3, r0, r8
 800976c:	fa09 f303 	lsl.w	r3, r9, r3
 8009770:	4313      	orrs	r3, r2
 8009772:	46a2      	mov	sl, r4
 8009774:	9304      	str	r3, [sp, #16]
 8009776:	e7d2      	b.n	800971e <_vfiprintf_r+0xe2>
 8009778:	9b03      	ldr	r3, [sp, #12]
 800977a:	1d19      	adds	r1, r3, #4
 800977c:	681b      	ldr	r3, [r3, #0]
 800977e:	9103      	str	r1, [sp, #12]
 8009780:	2b00      	cmp	r3, #0
 8009782:	bfbb      	ittet	lt
 8009784:	425b      	neglt	r3, r3
 8009786:	f042 0202 	orrlt.w	r2, r2, #2
 800978a:	9307      	strge	r3, [sp, #28]
 800978c:	9307      	strlt	r3, [sp, #28]
 800978e:	bfb8      	it	lt
 8009790:	9204      	strlt	r2, [sp, #16]
 8009792:	7823      	ldrb	r3, [r4, #0]
 8009794:	2b2e      	cmp	r3, #46	; 0x2e
 8009796:	d10c      	bne.n	80097b2 <_vfiprintf_r+0x176>
 8009798:	7863      	ldrb	r3, [r4, #1]
 800979a:	2b2a      	cmp	r3, #42	; 0x2a
 800979c:	d135      	bne.n	800980a <_vfiprintf_r+0x1ce>
 800979e:	9b03      	ldr	r3, [sp, #12]
 80097a0:	3402      	adds	r4, #2
 80097a2:	1d1a      	adds	r2, r3, #4
 80097a4:	681b      	ldr	r3, [r3, #0]
 80097a6:	9203      	str	r2, [sp, #12]
 80097a8:	2b00      	cmp	r3, #0
 80097aa:	bfb8      	it	lt
 80097ac:	f04f 33ff 	movlt.w	r3, #4294967295
 80097b0:	9305      	str	r3, [sp, #20]
 80097b2:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 800988c <_vfiprintf_r+0x250>
 80097b6:	2203      	movs	r2, #3
 80097b8:	4650      	mov	r0, sl
 80097ba:	7821      	ldrb	r1, [r4, #0]
 80097bc:	f7fe f97c 	bl	8007ab8 <memchr>
 80097c0:	b140      	cbz	r0, 80097d4 <_vfiprintf_r+0x198>
 80097c2:	2340      	movs	r3, #64	; 0x40
 80097c4:	eba0 000a 	sub.w	r0, r0, sl
 80097c8:	fa03 f000 	lsl.w	r0, r3, r0
 80097cc:	9b04      	ldr	r3, [sp, #16]
 80097ce:	3401      	adds	r4, #1
 80097d0:	4303      	orrs	r3, r0
 80097d2:	9304      	str	r3, [sp, #16]
 80097d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80097d8:	2206      	movs	r2, #6
 80097da:	482d      	ldr	r0, [pc, #180]	; (8009890 <_vfiprintf_r+0x254>)
 80097dc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80097e0:	f7fe f96a 	bl	8007ab8 <memchr>
 80097e4:	2800      	cmp	r0, #0
 80097e6:	d03f      	beq.n	8009868 <_vfiprintf_r+0x22c>
 80097e8:	4b2a      	ldr	r3, [pc, #168]	; (8009894 <_vfiprintf_r+0x258>)
 80097ea:	bb1b      	cbnz	r3, 8009834 <_vfiprintf_r+0x1f8>
 80097ec:	9b03      	ldr	r3, [sp, #12]
 80097ee:	3307      	adds	r3, #7
 80097f0:	f023 0307 	bic.w	r3, r3, #7
 80097f4:	3308      	adds	r3, #8
 80097f6:	9303      	str	r3, [sp, #12]
 80097f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80097fa:	443b      	add	r3, r7
 80097fc:	9309      	str	r3, [sp, #36]	; 0x24
 80097fe:	e767      	b.n	80096d0 <_vfiprintf_r+0x94>
 8009800:	460c      	mov	r4, r1
 8009802:	2001      	movs	r0, #1
 8009804:	fb0c 3202 	mla	r2, ip, r2, r3
 8009808:	e7a5      	b.n	8009756 <_vfiprintf_r+0x11a>
 800980a:	2300      	movs	r3, #0
 800980c:	f04f 0c0a 	mov.w	ip, #10
 8009810:	4619      	mov	r1, r3
 8009812:	3401      	adds	r4, #1
 8009814:	9305      	str	r3, [sp, #20]
 8009816:	4620      	mov	r0, r4
 8009818:	f810 2b01 	ldrb.w	r2, [r0], #1
 800981c:	3a30      	subs	r2, #48	; 0x30
 800981e:	2a09      	cmp	r2, #9
 8009820:	d903      	bls.n	800982a <_vfiprintf_r+0x1ee>
 8009822:	2b00      	cmp	r3, #0
 8009824:	d0c5      	beq.n	80097b2 <_vfiprintf_r+0x176>
 8009826:	9105      	str	r1, [sp, #20]
 8009828:	e7c3      	b.n	80097b2 <_vfiprintf_r+0x176>
 800982a:	4604      	mov	r4, r0
 800982c:	2301      	movs	r3, #1
 800982e:	fb0c 2101 	mla	r1, ip, r1, r2
 8009832:	e7f0      	b.n	8009816 <_vfiprintf_r+0x1da>
 8009834:	ab03      	add	r3, sp, #12
 8009836:	9300      	str	r3, [sp, #0]
 8009838:	462a      	mov	r2, r5
 800983a:	4630      	mov	r0, r6
 800983c:	4b16      	ldr	r3, [pc, #88]	; (8009898 <_vfiprintf_r+0x25c>)
 800983e:	a904      	add	r1, sp, #16
 8009840:	f7fb fa02 	bl	8004c48 <_printf_float>
 8009844:	4607      	mov	r7, r0
 8009846:	1c78      	adds	r0, r7, #1
 8009848:	d1d6      	bne.n	80097f8 <_vfiprintf_r+0x1bc>
 800984a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800984c:	07d9      	lsls	r1, r3, #31
 800984e:	d405      	bmi.n	800985c <_vfiprintf_r+0x220>
 8009850:	89ab      	ldrh	r3, [r5, #12]
 8009852:	059a      	lsls	r2, r3, #22
 8009854:	d402      	bmi.n	800985c <_vfiprintf_r+0x220>
 8009856:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009858:	f7ff fe73 	bl	8009542 <__retarget_lock_release_recursive>
 800985c:	89ab      	ldrh	r3, [r5, #12]
 800985e:	065b      	lsls	r3, r3, #25
 8009860:	f53f af12 	bmi.w	8009688 <_vfiprintf_r+0x4c>
 8009864:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009866:	e711      	b.n	800968c <_vfiprintf_r+0x50>
 8009868:	ab03      	add	r3, sp, #12
 800986a:	9300      	str	r3, [sp, #0]
 800986c:	462a      	mov	r2, r5
 800986e:	4630      	mov	r0, r6
 8009870:	4b09      	ldr	r3, [pc, #36]	; (8009898 <_vfiprintf_r+0x25c>)
 8009872:	a904      	add	r1, sp, #16
 8009874:	f7fb fc84 	bl	8005180 <_printf_i>
 8009878:	e7e4      	b.n	8009844 <_vfiprintf_r+0x208>
 800987a:	bf00      	nop
 800987c:	0800a18c 	.word	0x0800a18c
 8009880:	0800a1ac 	.word	0x0800a1ac
 8009884:	0800a16c 	.word	0x0800a16c
 8009888:	0800a104 	.word	0x0800a104
 800988c:	0800a10a 	.word	0x0800a10a
 8009890:	0800a10e 	.word	0x0800a10e
 8009894:	08004c49 	.word	0x08004c49
 8009898:	08009619 	.word	0x08009619

0800989c <__swbuf_r>:
 800989c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800989e:	460e      	mov	r6, r1
 80098a0:	4614      	mov	r4, r2
 80098a2:	4605      	mov	r5, r0
 80098a4:	b118      	cbz	r0, 80098ae <__swbuf_r+0x12>
 80098a6:	6983      	ldr	r3, [r0, #24]
 80098a8:	b90b      	cbnz	r3, 80098ae <__swbuf_r+0x12>
 80098aa:	f7ff fd99 	bl	80093e0 <__sinit>
 80098ae:	4b21      	ldr	r3, [pc, #132]	; (8009934 <__swbuf_r+0x98>)
 80098b0:	429c      	cmp	r4, r3
 80098b2:	d12b      	bne.n	800990c <__swbuf_r+0x70>
 80098b4:	686c      	ldr	r4, [r5, #4]
 80098b6:	69a3      	ldr	r3, [r4, #24]
 80098b8:	60a3      	str	r3, [r4, #8]
 80098ba:	89a3      	ldrh	r3, [r4, #12]
 80098bc:	071a      	lsls	r2, r3, #28
 80098be:	d52f      	bpl.n	8009920 <__swbuf_r+0x84>
 80098c0:	6923      	ldr	r3, [r4, #16]
 80098c2:	b36b      	cbz	r3, 8009920 <__swbuf_r+0x84>
 80098c4:	6923      	ldr	r3, [r4, #16]
 80098c6:	6820      	ldr	r0, [r4, #0]
 80098c8:	b2f6      	uxtb	r6, r6
 80098ca:	1ac0      	subs	r0, r0, r3
 80098cc:	6963      	ldr	r3, [r4, #20]
 80098ce:	4637      	mov	r7, r6
 80098d0:	4283      	cmp	r3, r0
 80098d2:	dc04      	bgt.n	80098de <__swbuf_r+0x42>
 80098d4:	4621      	mov	r1, r4
 80098d6:	4628      	mov	r0, r5
 80098d8:	f7ff fcee 	bl	80092b8 <_fflush_r>
 80098dc:	bb30      	cbnz	r0, 800992c <__swbuf_r+0x90>
 80098de:	68a3      	ldr	r3, [r4, #8]
 80098e0:	3001      	adds	r0, #1
 80098e2:	3b01      	subs	r3, #1
 80098e4:	60a3      	str	r3, [r4, #8]
 80098e6:	6823      	ldr	r3, [r4, #0]
 80098e8:	1c5a      	adds	r2, r3, #1
 80098ea:	6022      	str	r2, [r4, #0]
 80098ec:	701e      	strb	r6, [r3, #0]
 80098ee:	6963      	ldr	r3, [r4, #20]
 80098f0:	4283      	cmp	r3, r0
 80098f2:	d004      	beq.n	80098fe <__swbuf_r+0x62>
 80098f4:	89a3      	ldrh	r3, [r4, #12]
 80098f6:	07db      	lsls	r3, r3, #31
 80098f8:	d506      	bpl.n	8009908 <__swbuf_r+0x6c>
 80098fa:	2e0a      	cmp	r6, #10
 80098fc:	d104      	bne.n	8009908 <__swbuf_r+0x6c>
 80098fe:	4621      	mov	r1, r4
 8009900:	4628      	mov	r0, r5
 8009902:	f7ff fcd9 	bl	80092b8 <_fflush_r>
 8009906:	b988      	cbnz	r0, 800992c <__swbuf_r+0x90>
 8009908:	4638      	mov	r0, r7
 800990a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800990c:	4b0a      	ldr	r3, [pc, #40]	; (8009938 <__swbuf_r+0x9c>)
 800990e:	429c      	cmp	r4, r3
 8009910:	d101      	bne.n	8009916 <__swbuf_r+0x7a>
 8009912:	68ac      	ldr	r4, [r5, #8]
 8009914:	e7cf      	b.n	80098b6 <__swbuf_r+0x1a>
 8009916:	4b09      	ldr	r3, [pc, #36]	; (800993c <__swbuf_r+0xa0>)
 8009918:	429c      	cmp	r4, r3
 800991a:	bf08      	it	eq
 800991c:	68ec      	ldreq	r4, [r5, #12]
 800991e:	e7ca      	b.n	80098b6 <__swbuf_r+0x1a>
 8009920:	4621      	mov	r1, r4
 8009922:	4628      	mov	r0, r5
 8009924:	f000 f80c 	bl	8009940 <__swsetup_r>
 8009928:	2800      	cmp	r0, #0
 800992a:	d0cb      	beq.n	80098c4 <__swbuf_r+0x28>
 800992c:	f04f 37ff 	mov.w	r7, #4294967295
 8009930:	e7ea      	b.n	8009908 <__swbuf_r+0x6c>
 8009932:	bf00      	nop
 8009934:	0800a18c 	.word	0x0800a18c
 8009938:	0800a1ac 	.word	0x0800a1ac
 800993c:	0800a16c 	.word	0x0800a16c

08009940 <__swsetup_r>:
 8009940:	4b32      	ldr	r3, [pc, #200]	; (8009a0c <__swsetup_r+0xcc>)
 8009942:	b570      	push	{r4, r5, r6, lr}
 8009944:	681d      	ldr	r5, [r3, #0]
 8009946:	4606      	mov	r6, r0
 8009948:	460c      	mov	r4, r1
 800994a:	b125      	cbz	r5, 8009956 <__swsetup_r+0x16>
 800994c:	69ab      	ldr	r3, [r5, #24]
 800994e:	b913      	cbnz	r3, 8009956 <__swsetup_r+0x16>
 8009950:	4628      	mov	r0, r5
 8009952:	f7ff fd45 	bl	80093e0 <__sinit>
 8009956:	4b2e      	ldr	r3, [pc, #184]	; (8009a10 <__swsetup_r+0xd0>)
 8009958:	429c      	cmp	r4, r3
 800995a:	d10f      	bne.n	800997c <__swsetup_r+0x3c>
 800995c:	686c      	ldr	r4, [r5, #4]
 800995e:	89a3      	ldrh	r3, [r4, #12]
 8009960:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009964:	0719      	lsls	r1, r3, #28
 8009966:	d42c      	bmi.n	80099c2 <__swsetup_r+0x82>
 8009968:	06dd      	lsls	r5, r3, #27
 800996a:	d411      	bmi.n	8009990 <__swsetup_r+0x50>
 800996c:	2309      	movs	r3, #9
 800996e:	6033      	str	r3, [r6, #0]
 8009970:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009974:	f04f 30ff 	mov.w	r0, #4294967295
 8009978:	81a3      	strh	r3, [r4, #12]
 800997a:	e03e      	b.n	80099fa <__swsetup_r+0xba>
 800997c:	4b25      	ldr	r3, [pc, #148]	; (8009a14 <__swsetup_r+0xd4>)
 800997e:	429c      	cmp	r4, r3
 8009980:	d101      	bne.n	8009986 <__swsetup_r+0x46>
 8009982:	68ac      	ldr	r4, [r5, #8]
 8009984:	e7eb      	b.n	800995e <__swsetup_r+0x1e>
 8009986:	4b24      	ldr	r3, [pc, #144]	; (8009a18 <__swsetup_r+0xd8>)
 8009988:	429c      	cmp	r4, r3
 800998a:	bf08      	it	eq
 800998c:	68ec      	ldreq	r4, [r5, #12]
 800998e:	e7e6      	b.n	800995e <__swsetup_r+0x1e>
 8009990:	0758      	lsls	r0, r3, #29
 8009992:	d512      	bpl.n	80099ba <__swsetup_r+0x7a>
 8009994:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009996:	b141      	cbz	r1, 80099aa <__swsetup_r+0x6a>
 8009998:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800999c:	4299      	cmp	r1, r3
 800999e:	d002      	beq.n	80099a6 <__swsetup_r+0x66>
 80099a0:	4630      	mov	r0, r6
 80099a2:	f7fe fd71 	bl	8008488 <_free_r>
 80099a6:	2300      	movs	r3, #0
 80099a8:	6363      	str	r3, [r4, #52]	; 0x34
 80099aa:	89a3      	ldrh	r3, [r4, #12]
 80099ac:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80099b0:	81a3      	strh	r3, [r4, #12]
 80099b2:	2300      	movs	r3, #0
 80099b4:	6063      	str	r3, [r4, #4]
 80099b6:	6923      	ldr	r3, [r4, #16]
 80099b8:	6023      	str	r3, [r4, #0]
 80099ba:	89a3      	ldrh	r3, [r4, #12]
 80099bc:	f043 0308 	orr.w	r3, r3, #8
 80099c0:	81a3      	strh	r3, [r4, #12]
 80099c2:	6923      	ldr	r3, [r4, #16]
 80099c4:	b94b      	cbnz	r3, 80099da <__swsetup_r+0x9a>
 80099c6:	89a3      	ldrh	r3, [r4, #12]
 80099c8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80099cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80099d0:	d003      	beq.n	80099da <__swsetup_r+0x9a>
 80099d2:	4621      	mov	r1, r4
 80099d4:	4630      	mov	r0, r6
 80099d6:	f000 f84d 	bl	8009a74 <__smakebuf_r>
 80099da:	89a0      	ldrh	r0, [r4, #12]
 80099dc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80099e0:	f010 0301 	ands.w	r3, r0, #1
 80099e4:	d00a      	beq.n	80099fc <__swsetup_r+0xbc>
 80099e6:	2300      	movs	r3, #0
 80099e8:	60a3      	str	r3, [r4, #8]
 80099ea:	6963      	ldr	r3, [r4, #20]
 80099ec:	425b      	negs	r3, r3
 80099ee:	61a3      	str	r3, [r4, #24]
 80099f0:	6923      	ldr	r3, [r4, #16]
 80099f2:	b943      	cbnz	r3, 8009a06 <__swsetup_r+0xc6>
 80099f4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80099f8:	d1ba      	bne.n	8009970 <__swsetup_r+0x30>
 80099fa:	bd70      	pop	{r4, r5, r6, pc}
 80099fc:	0781      	lsls	r1, r0, #30
 80099fe:	bf58      	it	pl
 8009a00:	6963      	ldrpl	r3, [r4, #20]
 8009a02:	60a3      	str	r3, [r4, #8]
 8009a04:	e7f4      	b.n	80099f0 <__swsetup_r+0xb0>
 8009a06:	2000      	movs	r0, #0
 8009a08:	e7f7      	b.n	80099fa <__swsetup_r+0xba>
 8009a0a:	bf00      	nop
 8009a0c:	2000017c 	.word	0x2000017c
 8009a10:	0800a18c 	.word	0x0800a18c
 8009a14:	0800a1ac 	.word	0x0800a1ac
 8009a18:	0800a16c 	.word	0x0800a16c

08009a1c <abort>:
 8009a1c:	2006      	movs	r0, #6
 8009a1e:	b508      	push	{r3, lr}
 8009a20:	f000 f898 	bl	8009b54 <raise>
 8009a24:	2001      	movs	r0, #1
 8009a26:	f7f7 fd73 	bl	8001510 <_exit>

08009a2a <__swhatbuf_r>:
 8009a2a:	b570      	push	{r4, r5, r6, lr}
 8009a2c:	460e      	mov	r6, r1
 8009a2e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009a32:	4614      	mov	r4, r2
 8009a34:	2900      	cmp	r1, #0
 8009a36:	461d      	mov	r5, r3
 8009a38:	b096      	sub	sp, #88	; 0x58
 8009a3a:	da08      	bge.n	8009a4e <__swhatbuf_r+0x24>
 8009a3c:	2200      	movs	r2, #0
 8009a3e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8009a42:	602a      	str	r2, [r5, #0]
 8009a44:	061a      	lsls	r2, r3, #24
 8009a46:	d410      	bmi.n	8009a6a <__swhatbuf_r+0x40>
 8009a48:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009a4c:	e00e      	b.n	8009a6c <__swhatbuf_r+0x42>
 8009a4e:	466a      	mov	r2, sp
 8009a50:	f000 f89c 	bl	8009b8c <_fstat_r>
 8009a54:	2800      	cmp	r0, #0
 8009a56:	dbf1      	blt.n	8009a3c <__swhatbuf_r+0x12>
 8009a58:	9a01      	ldr	r2, [sp, #4]
 8009a5a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009a5e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009a62:	425a      	negs	r2, r3
 8009a64:	415a      	adcs	r2, r3
 8009a66:	602a      	str	r2, [r5, #0]
 8009a68:	e7ee      	b.n	8009a48 <__swhatbuf_r+0x1e>
 8009a6a:	2340      	movs	r3, #64	; 0x40
 8009a6c:	2000      	movs	r0, #0
 8009a6e:	6023      	str	r3, [r4, #0]
 8009a70:	b016      	add	sp, #88	; 0x58
 8009a72:	bd70      	pop	{r4, r5, r6, pc}

08009a74 <__smakebuf_r>:
 8009a74:	898b      	ldrh	r3, [r1, #12]
 8009a76:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009a78:	079d      	lsls	r5, r3, #30
 8009a7a:	4606      	mov	r6, r0
 8009a7c:	460c      	mov	r4, r1
 8009a7e:	d507      	bpl.n	8009a90 <__smakebuf_r+0x1c>
 8009a80:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009a84:	6023      	str	r3, [r4, #0]
 8009a86:	6123      	str	r3, [r4, #16]
 8009a88:	2301      	movs	r3, #1
 8009a8a:	6163      	str	r3, [r4, #20]
 8009a8c:	b002      	add	sp, #8
 8009a8e:	bd70      	pop	{r4, r5, r6, pc}
 8009a90:	466a      	mov	r2, sp
 8009a92:	ab01      	add	r3, sp, #4
 8009a94:	f7ff ffc9 	bl	8009a2a <__swhatbuf_r>
 8009a98:	9900      	ldr	r1, [sp, #0]
 8009a9a:	4605      	mov	r5, r0
 8009a9c:	4630      	mov	r0, r6
 8009a9e:	f7fe fd5b 	bl	8008558 <_malloc_r>
 8009aa2:	b948      	cbnz	r0, 8009ab8 <__smakebuf_r+0x44>
 8009aa4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009aa8:	059a      	lsls	r2, r3, #22
 8009aaa:	d4ef      	bmi.n	8009a8c <__smakebuf_r+0x18>
 8009aac:	f023 0303 	bic.w	r3, r3, #3
 8009ab0:	f043 0302 	orr.w	r3, r3, #2
 8009ab4:	81a3      	strh	r3, [r4, #12]
 8009ab6:	e7e3      	b.n	8009a80 <__smakebuf_r+0xc>
 8009ab8:	4b0d      	ldr	r3, [pc, #52]	; (8009af0 <__smakebuf_r+0x7c>)
 8009aba:	62b3      	str	r3, [r6, #40]	; 0x28
 8009abc:	89a3      	ldrh	r3, [r4, #12]
 8009abe:	6020      	str	r0, [r4, #0]
 8009ac0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009ac4:	81a3      	strh	r3, [r4, #12]
 8009ac6:	9b00      	ldr	r3, [sp, #0]
 8009ac8:	6120      	str	r0, [r4, #16]
 8009aca:	6163      	str	r3, [r4, #20]
 8009acc:	9b01      	ldr	r3, [sp, #4]
 8009ace:	b15b      	cbz	r3, 8009ae8 <__smakebuf_r+0x74>
 8009ad0:	4630      	mov	r0, r6
 8009ad2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009ad6:	f000 f86b 	bl	8009bb0 <_isatty_r>
 8009ada:	b128      	cbz	r0, 8009ae8 <__smakebuf_r+0x74>
 8009adc:	89a3      	ldrh	r3, [r4, #12]
 8009ade:	f023 0303 	bic.w	r3, r3, #3
 8009ae2:	f043 0301 	orr.w	r3, r3, #1
 8009ae6:	81a3      	strh	r3, [r4, #12]
 8009ae8:	89a0      	ldrh	r0, [r4, #12]
 8009aea:	4305      	orrs	r5, r0
 8009aec:	81a5      	strh	r5, [r4, #12]
 8009aee:	e7cd      	b.n	8009a8c <__smakebuf_r+0x18>
 8009af0:	08009379 	.word	0x08009379

08009af4 <_malloc_usable_size_r>:
 8009af4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009af8:	1f18      	subs	r0, r3, #4
 8009afa:	2b00      	cmp	r3, #0
 8009afc:	bfbc      	itt	lt
 8009afe:	580b      	ldrlt	r3, [r1, r0]
 8009b00:	18c0      	addlt	r0, r0, r3
 8009b02:	4770      	bx	lr

08009b04 <_raise_r>:
 8009b04:	291f      	cmp	r1, #31
 8009b06:	b538      	push	{r3, r4, r5, lr}
 8009b08:	4604      	mov	r4, r0
 8009b0a:	460d      	mov	r5, r1
 8009b0c:	d904      	bls.n	8009b18 <_raise_r+0x14>
 8009b0e:	2316      	movs	r3, #22
 8009b10:	6003      	str	r3, [r0, #0]
 8009b12:	f04f 30ff 	mov.w	r0, #4294967295
 8009b16:	bd38      	pop	{r3, r4, r5, pc}
 8009b18:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8009b1a:	b112      	cbz	r2, 8009b22 <_raise_r+0x1e>
 8009b1c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009b20:	b94b      	cbnz	r3, 8009b36 <_raise_r+0x32>
 8009b22:	4620      	mov	r0, r4
 8009b24:	f000 f830 	bl	8009b88 <_getpid_r>
 8009b28:	462a      	mov	r2, r5
 8009b2a:	4601      	mov	r1, r0
 8009b2c:	4620      	mov	r0, r4
 8009b2e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009b32:	f000 b817 	b.w	8009b64 <_kill_r>
 8009b36:	2b01      	cmp	r3, #1
 8009b38:	d00a      	beq.n	8009b50 <_raise_r+0x4c>
 8009b3a:	1c59      	adds	r1, r3, #1
 8009b3c:	d103      	bne.n	8009b46 <_raise_r+0x42>
 8009b3e:	2316      	movs	r3, #22
 8009b40:	6003      	str	r3, [r0, #0]
 8009b42:	2001      	movs	r0, #1
 8009b44:	e7e7      	b.n	8009b16 <_raise_r+0x12>
 8009b46:	2400      	movs	r4, #0
 8009b48:	4628      	mov	r0, r5
 8009b4a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009b4e:	4798      	blx	r3
 8009b50:	2000      	movs	r0, #0
 8009b52:	e7e0      	b.n	8009b16 <_raise_r+0x12>

08009b54 <raise>:
 8009b54:	4b02      	ldr	r3, [pc, #8]	; (8009b60 <raise+0xc>)
 8009b56:	4601      	mov	r1, r0
 8009b58:	6818      	ldr	r0, [r3, #0]
 8009b5a:	f7ff bfd3 	b.w	8009b04 <_raise_r>
 8009b5e:	bf00      	nop
 8009b60:	2000017c 	.word	0x2000017c

08009b64 <_kill_r>:
 8009b64:	b538      	push	{r3, r4, r5, lr}
 8009b66:	2300      	movs	r3, #0
 8009b68:	4d06      	ldr	r5, [pc, #24]	; (8009b84 <_kill_r+0x20>)
 8009b6a:	4604      	mov	r4, r0
 8009b6c:	4608      	mov	r0, r1
 8009b6e:	4611      	mov	r1, r2
 8009b70:	602b      	str	r3, [r5, #0]
 8009b72:	f7f7 fcc5 	bl	8001500 <_kill>
 8009b76:	1c43      	adds	r3, r0, #1
 8009b78:	d102      	bne.n	8009b80 <_kill_r+0x1c>
 8009b7a:	682b      	ldr	r3, [r5, #0]
 8009b7c:	b103      	cbz	r3, 8009b80 <_kill_r+0x1c>
 8009b7e:	6023      	str	r3, [r4, #0]
 8009b80:	bd38      	pop	{r3, r4, r5, pc}
 8009b82:	bf00      	nop
 8009b84:	200015bc 	.word	0x200015bc

08009b88 <_getpid_r>:
 8009b88:	f7f7 bcb8 	b.w	80014fc <_getpid>

08009b8c <_fstat_r>:
 8009b8c:	b538      	push	{r3, r4, r5, lr}
 8009b8e:	2300      	movs	r3, #0
 8009b90:	4d06      	ldr	r5, [pc, #24]	; (8009bac <_fstat_r+0x20>)
 8009b92:	4604      	mov	r4, r0
 8009b94:	4608      	mov	r0, r1
 8009b96:	4611      	mov	r1, r2
 8009b98:	602b      	str	r3, [r5, #0]
 8009b9a:	f7f7 fce0 	bl	800155e <_fstat>
 8009b9e:	1c43      	adds	r3, r0, #1
 8009ba0:	d102      	bne.n	8009ba8 <_fstat_r+0x1c>
 8009ba2:	682b      	ldr	r3, [r5, #0]
 8009ba4:	b103      	cbz	r3, 8009ba8 <_fstat_r+0x1c>
 8009ba6:	6023      	str	r3, [r4, #0]
 8009ba8:	bd38      	pop	{r3, r4, r5, pc}
 8009baa:	bf00      	nop
 8009bac:	200015bc 	.word	0x200015bc

08009bb0 <_isatty_r>:
 8009bb0:	b538      	push	{r3, r4, r5, lr}
 8009bb2:	2300      	movs	r3, #0
 8009bb4:	4d05      	ldr	r5, [pc, #20]	; (8009bcc <_isatty_r+0x1c>)
 8009bb6:	4604      	mov	r4, r0
 8009bb8:	4608      	mov	r0, r1
 8009bba:	602b      	str	r3, [r5, #0]
 8009bbc:	f7f7 fcd4 	bl	8001568 <_isatty>
 8009bc0:	1c43      	adds	r3, r0, #1
 8009bc2:	d102      	bne.n	8009bca <_isatty_r+0x1a>
 8009bc4:	682b      	ldr	r3, [r5, #0]
 8009bc6:	b103      	cbz	r3, 8009bca <_isatty_r+0x1a>
 8009bc8:	6023      	str	r3, [r4, #0]
 8009bca:	bd38      	pop	{r3, r4, r5, pc}
 8009bcc:	200015bc 	.word	0x200015bc

08009bd0 <_init>:
 8009bd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009bd2:	bf00      	nop
 8009bd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009bd6:	bc08      	pop	{r3}
 8009bd8:	469e      	mov	lr, r3
 8009bda:	4770      	bx	lr

08009bdc <_fini>:
 8009bdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009bde:	bf00      	nop
 8009be0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009be2:	bc08      	pop	{r3}
 8009be4:	469e      	mov	lr, r3
 8009be6:	4770      	bx	lr
